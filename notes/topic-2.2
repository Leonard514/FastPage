<script type="text/javascript">
// If you're seeing this, I'm letting you know that you're not supposed to be here.
// I put a bunch of commands in here limiting certain functionalities of the website.
// So if you noticed that you can't right-click, select stuff, and copy text, that has a function.
// Namely preventing YOU from copying my code and cheating.
// Now if you're sincere, now is my warning. You're not supposed to be in an inspect element window, 
// modifying the website's code as you please.
// And if you're extra sincere, you can even email me at leonardalwright@gmail.com
// Tell me how you opened this. Because I need to disable that functionality as a safeguard.

// But if you're malicious and will cheat using my code, things will get bad quickly.
// Life with an academic dishonesty infraction is not fun.
// And unlike some people who wouldn't have a way to defend themselves, I do.
// It's this code. Unlike most people, I went out of my way to stop cheaters.
// This code is evidence of my sincerity.
// Which will make your intentions undeniable if you copy my code. SO DON'T.
  document.oncontextmenu = new Function("return false");
  document.oncut = new Function("return false");
  document.oncopy = new Function("return false");
  document.onafterprint = new Function("return false");
  document.onbeforeprint = new Function("return false");
document.addEventListener('contextmenu', (e) => e.preventDefault());
document.addEventListener('copy', (e) => e.preventDefault());
document.addEventListener('cut', (e) => e.preventDefault());
document.addEventListener('afterprint', (e) => e.preventDefault());
document.addEventListener('beforeprint', (e) => e.preventDefault());

function ctrlShiftKey(e, keyCode) {
  return e.ctrlKey && e.shiftKey && e.keyCode === keyCode.charCodeAt(0);
}

document.onkeydown = (e) => {
  if (
    event.keyCode === 123 ||
    ctrlShiftKey(e, 'I') ||
    ctrlShiftKey(e, 'J') ||
    ctrlShiftKey(e, 'C') ||
    (e.ctrlKey && e.keyCode === 'U'.charCodeAt(0))
    (e.ctrlKey && e.keyCode === 'S'.charCodeAt(0))
    (e.ctrlKey && e.keyCode === 'C'.charCodeAt(0))
    (e.ctrlKey && e.keyCode === 'X'.charCodeAt(0))
    (e.ctrlKey && e.keyCode === 'P'.charCodeAt(0))
  )
    return false;
};
</script>

<article class="post h-entry" itemscope itemtype="http://schema.org/BlogPosting" onmousedown="return false" onselectstart="return false" onkeydown="return false">

  <header class="post-header">
    <h1 class="post-title p-name" itemprop="name headline">Topic 2.2-2.3 Notes</h1><p class="page-description">Includes Important Notes about Data Compression and Images</p><p class="post-meta post-meta-title"><time class="dt-published" datetime="2023-03-06T00:00:00-06:00" itemprop="datePublished">
        Mar 6, 2023
      </time>
       • <span class="read-time" title="Estimated read time">
    
    
      6 min read
    
</span></p>

    
      <p class="category-tags"><i class="fas fa-tags category-tags-icon"></i></i> 
      
        <a class="category-tags-link" href="/FastPage/categories/#markdown">markdown</a>
        &nbsp;
      
        <a class="category-tags-link" href="/FastPage/categories/#Comp Sci">Comp Sci</a>
        
      
      </p>
    

    </header>

  <div class="post-content e-content" itemprop="articleBody">
    <ul id="toc" class="section-nav">
<li class="toc-entry toc-h2"><a href="#prompt-1-describe-some-of-the-meta-data">Prompt 1: Describe some of the meta data…</a></li>
<li class="toc-entry toc-h2"><a href="#prompt-2-commands-for-file-paths-in-different-os-and-pathlib">Prompt 2: Commands for file paths in different OS and pathlib</a></li>
<li class="toc-entry toc-h2"><a href="#prompt-3-playing-around-with-provided-sample-code">Prompt 3: Playing around with provided sample code</a></li>
<li class="toc-entry toc-h2"><a href="#prompt-4-translate-the-first-3-letters-of-your-name-to-base64">Prompt 4: Translate the first 3 letters of your name to base64</a></li>
<li class="toc-entry toc-h2"><a href="#prompt-5-buffering">Prompt 5: Buffering</a></li>
<li class="toc-entry toc-h1"><a href="#topic-23">Topic 2.3</a>
<ul>
<li class="toc-entry toc-h2"><a href="#quiz-questions">Quiz Questions</a>
<ul>
<li class="toc-entry toc-h3"><a href="#quiz-1-data-compression">Quiz 1: Data Compression</a></li>
</ul>
</li>
</ul>
</li>
</ul><p>I’ve been asked to display some images in Jupyter Notebooks. Unfortunately, I do not have a Jupyter editor at the moment so I will have to resort to Markdown.</p>

<p><img src="/FastPage/images/green-square-16.png" alt="" title="The first image is a small green square"></p>

<p><img src="/FastPage/images/clouds-impression.png" alt="" title="The second image is medium sized and depicting clouds"></p>

<p><img src="/FastPage/images/lassen-volcano.jpg" alt="" title="The third image is large and depicts volcanoes"></p>

<h2 id="prompt-1-describe-some-of-the-meta-data">
<a class="anchor" href="#prompt-1-describe-some-of-the-meta-data" aria-hidden="true"><span class="octicon octicon-link"></span></a>Prompt 1: Describe some of the meta data…</h2>

<p>The image size, which could be measured by the number of pixels, affects the file size of a given image. If the file size of an image becomes too large, the image could be difficult to transport across the Internet. As such, the image file must be compressed, which decreases its file size. <a href="https://apclassroom.collegeboard.org/103/home?apd=p13chxi8d3&amp;unit=2">According to a College Board video</a>, this is achieved through using an in-file dictionary to decrease the number of characters in a file, thereby decreasing its size. According to this same video, there are two types of compression: Lossless compression (all data is conserved) and lossy compression (not all data is conserved, though there is no need to do so). Generally, lossy compression reduces the file size more effectively.</p>

<p>In terms of images, there are many file extensions that are available. Some of the more common file extensions are the .PNG and the .JPEG extensions. According to <a href="https://www.techtarget.com/whatis/definition/PNG-Portable-Network-Graphics">this source</a>, .JPEG uses lossy compression while .PNG uses lossless compression. When lossy compression is utilized, the change in image colors are not easily perceptible. When I took notes on the 2.2 lesson, the instructor sampled multiple images of smiley faces. One image only used 2-3 colors (a shade of yellow, black, and possibly white), while another image used many shades of green. Lossless compression is more favorable for images with less colors (many pixels with the same color means less dictionary mappings are necessary), while lossy compression is more favorable for images with more colors.</p>

<h2 id="prompt-2-commands-for-file-paths-in-different-os-and-pathlib">
<a class="anchor" href="#prompt-2-commands-for-file-paths-in-different-os-and-pathlib" aria-hidden="true"><span class="octicon octicon-link"></span></a>Prompt 2: Commands for file paths in different OS and pathlib</h2>

<p>Here are some common commands used within a Linux terminal to access files</p>

<p><code class="language-plaintext highlighter-rouge">cat /path/to/file/file.txt</code> - prints the contents of file.txt. Requires read permissions</p>

<p><code class="language-plaintext highlighter-rouge">ls -la</code> - prints all of the files/directories within the current working directory (probably important to see <em>what</em> files there are to work with)</p>

<p><code class="language-plaintext highlighter-rouge">./script.exe</code> - executes a script/executable. Requires execute permissions</p>

<p><code class="language-plaintext highlighter-rouge">nano /path/to/file/file.txt</code> - opens up a text editor to write to file.txt. May require read and/or write permissions. Other common text editors include <strong>gedit</strong> (which has more GUI-focused specifications) and <strong>vim</strong> (which I am less familiar with, though those who often work with Linux will probably be able to tell you more)</p>

<p><code class="language-plaintext highlighter-rouge">cd /path/to/directory</code> - changes working directory to <strong>/path/to/directory</strong></p>

<h2 id="prompt-3-playing-around-with-provided-sample-code">
<a class="anchor" href="#prompt-3-playing-around-with-provided-sample-code" aria-hidden="true"><span class="octicon octicon-link"></span></a>Prompt 3: Playing around with provided sample code</h2>

<p>Lily (my partner) had some issues loading a Jupyter renderer and a dependency. She just reloaded VSCode and everything worked fine. The issue was relatively strange.</p>

<p>As for image paths, paths are important when working with images so that the program can appropriately find the location of the image within its filesystem. If a man doesn’t know where his favorite place is, he can’t use it. In a similar manner, if the program doesn’t know where an image is, the program can’t display it.</p>

<p>I need to answer a question about</p>

<h2 id="prompt-4-translate-the-first-3-letters-of-your-name-to-base64">
<a class="anchor" href="#prompt-4-translate-the-first-3-letters-of-your-name-to-base64" aria-hidden="true"><span class="octicon octicon-link"></span></a>Prompt 4: Translate the first 3 letters of your name to base64</h2>

<p>There are many text-to-base64 converters online, and I’ll be using one <a href="https://base64.guru/converter/encode/text">here</a>. As seen in <a href="https://en.wikipedia.org/wiki/Base64">the Wikipedia article about Base64</a>, the basis of converting ASCII to base64 is that Base64 supports 6 bits (2^6 = 64), while ASCII supports 0 bits. As such, each group of 3 ASCII characters provides 24 bits for 4 Base64 characters; equal signs are used as padding to ensure that the number of characters printed is a multiple of 4 (an ASCII string does not necessarily have a number of characters being a multiple of 3)</p>

<ul>
  <li>Leo –&gt; TGVv</li>
</ul>

<p>But for the sake of the exercise I’ll also do it manually. <a href="https://pthree.org/2011/04/06/convert-text-to-base-64-by-hand/">This source</a> was very helpful, along with this <a href="https://en.wikipedia.org/wiki/File:ASCII_Code_Chart-Quick_ref_card.png">ASCII code chart</a>. I’ll be re-using information from the chart and the article as I go along. Now, here’s what I’ll do.</p>

<ul>
  <li>
    <p>Each ASCII character will have 8 bits. The first bit will always be 0 for some reason. The next three bits will be the bits at the top row in the column of the ASCII character, and the last four bits will be in the left four columns in the same row as the character (feel free to actually click the link to the article). We are essentially converting each character to binary. <strong>Keep in mind that this is case-sensitive.</strong></p>
  </li>
  <li>L –&gt; 01001100</li>
  <li>e –&gt; 01100101</li>
  <li>o –&gt; 01101111</li>
</ul>

<p>The article then says that I must group my bits by 6 (I said before that base64 has 6 bits). I’ll go do that real quick.</p>

<p>010011 000110 010101 101111</p>

<p>We must now change our binary to decimal so that we can match the characters via base64. The article goes into detail about how to do the padding, but the administrators decided to ask for 3 letters so we can skip those parts. I omitted zeros in this case. Note that each binary digit is a power of 2.</p>

<p>010011 = 1 + 2 + 16 = 19
000110 = 2 + 4 = 6
010101 = 1 + 4 + 16 = 21
101111 = 1 + 2 + 4 + 8 + 32 = 47</p>

<p>Now we’ll use the base64 chart in the linked Wikipedia article to convert these decimals.</p>

<p>19 –&gt; T
6 –&gt; G
21 –&gt; V
47 –&gt; v</p>

<p>So Leo (ASCII) = TGVv (base64).</p>

<h2 id="prompt-5-buffering">
<a class="anchor" href="#prompt-5-buffering" aria-hidden="true"><span class="octicon octicon-link"></span></a>Prompt 5: Buffering</h2>

<h1 id="topic-23">
<a class="anchor" href="#topic-23" aria-hidden="true"><span class="octicon octicon-link"></span></a>Topic 2.3</h1>

<h2 id="quiz-questions">
<a class="anchor" href="#quiz-questions" aria-hidden="true"><span class="octicon octicon-link"></span></a>Quiz Questions</h2>

<p>Integrity Disclaimer: The author does not condone use of these quiz reflections to cheat on quizzes. Do your own work!</p>

<h3 id="quiz-1-data-compression">
<a class="anchor" href="#quiz-1-data-compression" aria-hidden="true"><span class="octicon octicon-link"></span></a>Quiz 1: Data Compression</h3>

<p>1) What is an advantage of lossless compression?</p>

<p>Well, lossless compression preserves all the data. Lossy compression can’t do that. Data security often depends more on the encryption algorithms used during file transmission (not the file compression)</p>

<p>2) A user wants to save a file on a storage site, reduce the file size, and restore the file to its original size.</p>

<p>He should use lossless compression… and only lossless compression.</p>

<p>3) Programmer developing social media software; wants to use compression for attachments sent between users. What is true?</p>

<p>(The answer choices make conjectures about videos, images, and audio files)</p>

<p>A) Lossless compression of videos save more space than lossy compression: Largely circumstantial. If the video file has frames with very few different colors (ex: screen recordings where screen GUI elements have uniform colors), lossless compression may be ideal. However, most videos of real-life settings will have pixels of many colors in the frames. LOssy compression is therefore ideal in most scenarios.</p>

<p>B) Lossless compression of images result in images of equal size to the original file: If this were true, the compression operation would be pointless since it’s meant to decrease file size.</p>

<p>C) LOssy compression of images provides greater reduction in transmission than lossless: Lossy compression decreases image file size for images of diverse colors more effectively than lossless compression, which in turn decreases transmission time. This seems favorable.</p>

<p>D) Sound clips with lossy compression can be restored to original quality: Lossy compression will result in irreversible loss of data, so this is false.</p>

  </div><!-- from https://github.com/utterance/utterances -->

<script type="text/javascript">
        // If you're seeing this, I'm letting you know that you're not supposed to be here.
        // I put a bunch of commands in here limiting certain functionalities of the website.
        // So if you noticed that you can't right-click, select stuff, and copy text, that has a function.
        // Namely preventing YOU from copying my code and cheating.
        // Now if you're sincere, now is my warning. You're not supposed to be in an inspect element window, 
        // modifying the website's code as you please.
        // And if you're extra sincere, you can even email me at leonardalwright@gmail.com
        // Tell me how you opened this. Because I need to disable that functionality as a safeguard.
        
        // But if you're malicious and will cheat using my code, things will get bad quickly.
        // Life with an academic dishonesty infraction is not fun.
        // And unlike some people who wouldn't have a way to defend themselves, I do.
        // It's this code. Unlike most people, I went out of my way to stop cheaters.
        // This code is evidence of my sincerity.
        // Which will make your intentions undeniable if you copy my code. SO DON'T.
          document.oncontextmenu = new Function("return false");
          document.oncut = new Function("return false");
          document.oncopy = new Function("return false");
          document.onafterprint = new Function("return false");
          document.onbeforeprint = new Function("return false");
        document.addEventListener('contextmenu', (e) => e.preventDefault());
        document.addEventListener('copy', (e) => e.preventDefault());
        document.addEventListener('cut', (e) => e.preventDefault());
        document.addEventListener('afterprint', (e) => e.preventDefault());
        document.addEventListener('beforeprint', (e) => e.preventDefault());
        
        function ctrlShiftKey(e, keyCode) {
          return e.ctrlKey && e.shiftKey && e.keyCode === keyCode.charCodeAt(0);
        }
        
        document.onkeydown = (e) => {
          if (
            event.keyCode === 123 ||
            ctrlShiftKey(e, 'I') ||
            ctrlShiftKey(e, 'J') ||
            ctrlShiftKey(e, 'C') ||
            (e.ctrlKey && e.keyCode === 'U'.charCodeAt(0))
            (e.ctrlKey && e.keyCode === 'S'.charCodeAt(0))
            (e.ctrlKey && e.keyCode === 'C'.charCodeAt(0))
            (e.ctrlKey && e.keyCode === 'X'.charCodeAt(0))
            (e.ctrlKey && e.keyCode === 'P'.charCodeAt(0))
          )
            return false;
        };
</script>

<script src="https://utteranc.es/client.js"
        repo="Leonard514/FastPage"
        issue-term="title"
        label="blogpost-comment"
        theme="github-light"
        crossorigin="anonymous"
        async>
</script><a class="u-url" href="/FastPage/notes/topic-2.2" hidden></a>
</article>
