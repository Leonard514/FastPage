{
  
    
        "post0": {
            "title": "Cool Things With Sass",
            "content": "Online SCSS →CSS converter (may help with running experiments) . | . Official SASS documentation . Special Functions (this is tough) . | Defining variables (pretty basic) . Use the $var-name: var-value; syntax . SASS variables are compiled before conversion to CSS; CSS variables kept . | . | Defining a variable later can override a previously-defined value. If you don’t want a variable to override previously-defined values, use the !default flag after the value. This allows variables to be configurable by variable overrides on the local scope. In the example below, the $time variable would be the first defined value, while $seconds will have the given value… . $time: 03312023; . | $time: 04012023 !default; . | $seconds: 222 !default; . | . | You cannot override built-in variables (ex: the value of pi) . | Put variables you want to be used throughout your program at the top to make them global. Variables defined in blocks/selectors will be local to that block. It is possible to override global variables within a block only by defining them locally: this is known as shadowing. . | . | . . If you want a locally-defined variable to override a global variable, use the !global flag. For example, if we put the !global flag after the value of the $variable in .content, then this would become global and likely be applied to .sidebar . | Built-in functions . meta.variable-exists($var-name): Checks if a variable with the given name exists in the corresponding scope (local or global) . | meta.global-variable-exists($var-name): Checks if a global variable with the given name exists. . | . | . Interpolation (central concept!!!) . Very often used with @mixin. Mixins follow very similar purpose/formatting to functions in Python . | . | . . Interpolation: Wherever the parameter goes into the code, it is surrounded in #{para1}. . Note: Interpolation returns unquoted strings, so you can’t perform numerical operations. However, when defining a variable as a number, you can add units! There are some quirks there though. . | Quotes around strings are removed when converting to CSS. However, using the built-in string.unquote($string) may be better for code readability purposes . | On the other hand, if you wanted to preserve the quotes during interpolation, use the #{meta.inspect($string)} built-in function . | . | . Style notes (more thorough) . Nest a selector within a selector; the parent selector’s rules applied to the child selectors . | Can list selectors . | . | . . Can use combinators (I have no idea what that means) . | Interpolation: Can make @mixin (form of procedural abstraction) and can allow user-inputted parameters to take effect . | . Property Declarations . Here is an example of a property being declared (.circle is property) . | . | . . Can use expressions for a declaration value, which can be evaluated using operators . | Expressions include all the data types we’re familiar with (boolean, integers, etc.) The data structure known as dictionaries in Python is known as maps in SASS and use normal parenthesis instead of curly brackets. . | Can manipulate using operators . | Expressions include variables, calls to functions (including built-in functions) . | Can use interpolation to define properties (reduces redundancy) . | Can use nesting (covered above) . | Hidden declarations: These are basically conditional statements. They’re called as such because the configuration won’t show up in CSS if the condition is not fulfilled. Look for the if($boolean-condition, setting1, setting2) . | . . CSS custom properties: denoted by the double-dash before the variable name (ex:–var-name). If the value is set equal to a $string, the $string is not evaluated to a variable even if one is defined. Interpolation will override this. On the other hand, using one or no dashes for the variable name will result in evaluation of $string. . The documentation says this has implication for JavaScript compatibility . | . | . . Parent Selectors . Whenever you use the &amp; within a child class (in a nesting scheme), this is interpreted as the name of the parent class. Basic functions: . Adding suffixes to classes (ex: .parent__child1 → &amp;__child1) . | Adding a pseudoclass, where the styles will change dynamically based on certain conditions . | . | . | . . There are some notes for advanced nesting I’m not ready for at the moment . | . Placeholder Selectors . They are denoted using the % (ex: %button-settings). They are not translated directly into CSS. Instead, you can use @extend to import and combine all the styles in placeholder selectors into selectors of your choice. . | . | . . List of at rules (this will be somewhat comprehensive) . @use - essentially a replacement to @import . Loads all mixins, variables, functions (referred to from here on out as members) from the files. Any CSS output that would come from running those files normally could be outputted here. The file will only be loaded once regardless of how many times @use is called . Variables/mixins from files usually have namespaces to prevent conflicts (namespace.var-name). By default, the name space is the file name, though this can be customized. Using * will result in no namespace. @import does not have this option! . | Great if you got a scheme with multiple .scss files. Each .scss file loaded is now known as a module. Use @use before any other at-rule in the file. . If you don’t want the SASS of a loaded file to be compiled/interpreted individually, start the file name with a _ (the file is now known as a partial) . | . | Can use variables with !default flags in the original file to allow for greater flexibility . | . | SASS loads the URL (not the file path). This is for cross-compatibility between Windows (with backslashes) and Linux (with slashes) . Need to do @use ‘url/file’; . | Putting the file extension is optional. Can load .scss, .sass, and .css files. .css files can’t use .sass features, but .css can be extended . | . | . | . . Need to look into integration with @mixin . | It is possible to re-assign variables after the @use is called (but not built-in variables) . | . . If there is an _index.scss, then this is loaded when @use is called on the URL of the folder. . | Deviations from @import (the predecessor) . All the variables, functions, mixins only to the scope of the file (not at global scope) . | Each file loaded once (reduces redundancy) . | Must be at the top of file, with one URL with quotes around it. . | . | May exclude variables, mixins, functions by starting the name with an underscore/hyphen (ex: $-radius). When @use is called on a file, those members are not loaded and are known as private members. This could help with controling what parts of the file are loaded into another file (ex: sensitive info) . | . @forward . Very similar to @use in that it loads the members, making them available as if they were in the module (they aren’t though; that’s what @use is for). With regards to CSS, it functions the same way as @use. . | If you want to combine with @use, do @forward first. . Useful if you want to load all the variables from one file . | . | Can add variable prefixes to avoid conflicts using @forward “url” as prefixname-* . | . | . . Can do @forward “url” hide &lt;members&gt; to exclude specified members or @forward “url” show &lt;members&gt; to include only specified members . | Can combine with variables of the !default flag . | . . @import . This will eventually be deprecated . All members defined globally → where did they come from? . | Naming collisions for members is a concern since namespaces aren’t added by default . | Inefficient output (stylesheet converted to CSS upon every import instance, as opposed to once when calling @use. Could result in redundant code) . | No compatibility for private members . | . | Functionality: All the file’s members &amp; CSS results replace @import . Similar to @use, do the URL first. If you want to load based on paths, you can load relative to current file (in same directory as file directory or given load path). Can use commas in the @import call (see below). . | Has all the same functionality as @use with regards to which files are compatible, partials, index files, loading CSS files . | Possible to name your file filename.import.scss to make sure it’s only @import compatbile (not @use compatible). If using a file meant for @use, the @import has access to private members but not other loaded modules unless @forward is used. Modules can only be loaded once, meaning the members can’t be changed. . | Since @import was meant to be an improvement on @import from CSS, meaning that @import in CSS had to be supported. Imports with a .css extension, a URL with the http:// or https://, url(url.css), and media queries (see below). Also, CSS @import can include interpolation (ex: based on parameters of mixins; SASS @import can’t have interpolation) . | . | . | . . . At this point I realized that the concision of my notes was not optimal. I’d probably be returning to the documentation anyways, so I’ll stop providing example code snips here. My notes from here on out will take a more conceptual or feature-focused approach, so if you’re interested in including the features in the lesson, take a gander at the docs (it’ll help you get used to docs, which you’ll be consulting a lot) . @mixin, @include . Allows for definition of re-usable styles based on parameters. Define using @mixin mixin-name at the top of the file. . | Use @include mixin-name (arguments); to use the mixin. It is possible to make arguments optionalto input by defining a default value in the mixin using $var-name: default-value. All arguments must be utilized in the code, however. . | It is possible to pass arguments during a mixin call using keywords using similar syntax to optional arguments in the call. This can be useful if the user wants to be sure of how variables are being configured. If you rename an argument, you should tell the users and keep the old name for some time to give them time to adjust. . | You can take the last arguments as a list by doing: $arg… All the extra arguments then become elements of a list, and you can do iteration operations accordingly. This also allows you to pass a list variable as the last argument. These arguments are known as arbitrary arguments. . If users like keyword arguments in their calls, you need to @use “sass:meta”; at the top and call @debug meta.keywords($arguments);. This converts the user input to a map which allows the code to work with the input. . | . | There is an @content rule that is nowhere else in the docs. If you include it in a mix-in, it becomes a content block. Content blocks have lexical scope, meaning it will only see its own local variables (and not any of the ones locally defined in the mixin where it is called). For mixins with content blocks, you must declare the acceptance of the arguments (@include mixin(para1, para2) using ($argument) { ) . | . | @function - @function function_name (arguments) {code} . Very similar in function to mixins in that this serves for procedural abstraction. The docs encourages use of functions for computing values and mixins for setting variables dynamically . | Can only have universal statements in the code (declaring variables, @error, @warn, @debug, at rules for flow control) . | Identical functionalities to mixins with regards to default values (optional arguments), final arguments as a list (arbitrary arguments), passing arguments using keywords . | Different in that functions are called using their names and that there must be an @return to exit the function with the indicated value. . | There are built-in SASS functions (more on those later). Also, you can call CSS functions, which are not user-defined or built into SASS. . | . | @extend . Call @extend .selector-name to make the given selector inherit the style/element rules as the extender referenced. Best to use for semantic (related) selectors/classes . | @extend updates/overrides any styles as appropriate and reduces redundancy through combination of selectors with the same attributes. . | This will also function for any pseudoclass where the given selector exists. . | Since these are compiled towards the end, parent selectors are blind to @extend effects . | Can put placeholders (selectors purely developed for extension) using the %, could be private by starting the name with - or _ (can only be extended within its stylesheet) . | @extend usually has limited scope (only affecting its stylesheet and ones that are loaded with @use or @forward). The exception is @import, where @extend is imported on a global scale. . | @extend requires that the selector exists unless the !optional flag is added. In that case, @extend does nothing if the selector doesn’t exist . | You can’t extend complex selectors like .complex.selector the same way as usual. You must extend using @extend .complex, .selector. If complex selectors are interleaved, @extend uses a heuristic to avoid using combinations that will not exist in HTML. . | If you want to use an @media (CSS at rule), can’t extend selectors outside of @media . | . | @error - @error &lt;expression&gt; . Yeah, this is in case your user gives an unexpected argument or if the argument passed is otherwise unexpected. This could be the case with typos or with deprecated arguments. You give an error message and the stylesheet quits compiling. Probably good for ensuring the integrity of your data structures. . | . | @warn - @warn &lt;expression&gt; . This discourages users from entering unusual arguments. It has a similar printing functionality to @error, but it doesn’t quit the compilation of SASS. . | . | @debug - @debug &lt;expression&gt; . This is how you get to see the values of your variables (identical functionality to print() in Python). As the name implies, useful for finding out what your program is actually doing. . | . | @at-root . Everything with regard to the selector referred to in the at-root is compiled at the bottom of CSS rather than following usual nesting rules. This may be required for certain nesting schemes. . Usually gets rid of style rules only (not CSS rules). Can exclude certain rules with @at-root (without: rulename) or include only certain rules using @at-root (with: rulename) . | Rule is style rules but not at rules. . | All is all style rules and all at rules. . | . | . | Flow control rules: These are essentially selection and iteration. The two ways for loops index in Python are separated in SASS. . | @if and @else - @if &lt;expression&gt; { code } . You guessed it, this is selection. The code associated with @if is evaluated when an associated expression is true, while that associated with @else is evaluated if the expression is false. If you want a chain of conditionals, use @else if . | Truthy: Any expression that is not false or null is true. This includes empty strings/lists and 0. . | . | @each - @each &lt;var&gt; in &lt;expression&gt; { code } . Use this when you want to execute code for each element in a list or pairs in maps. For lists, you can assign one variable name for the elements, but in maps, you must have two variable names (one for the keys, and one for the corresponding values) . | Lists of lists are a thing, and if you happen to be working with one you have to assign one variable for each element index (ex: if each list has 4 elements, you must define 4 variables in the @each call) . | . | @for - @for &lt;variable&gt; from &lt;expression&gt; to &lt;expression&gt; {code} . This is for executing a block of code a certain number of times. The expressions are essentially indexes, and SASS counts from the first expression to the second expression. Using to makes the final index excluded; use through to include this. . | . | @while - @while &lt;expression&gt; {code} . Will evaluate the code block repeatedly until the expression evaluates to false. Remember the truthy and falsy rules in SASS! . The documentation recommends using @each and @for over @while where possible . | . | . | CSS rules - support for all rules . If CSS nested inside style, the CSS at rule is outputted on top for ease of use . | Can use @media for queries. According to Mozilla, this allows for styles to vary based on conditions like screen size. Can use interpolation and use SASS expressions. Nested queries will be merged since some browsers don’t support nested queries. . | @supports is used to apply styles if the machine supports such styles. . | @keyframes is used to apply styles to intermediary steps in animated portions of a website. . | . | Values: These are basically all the data types supported in SASS. . | Numbers . Can have units and scientific notation (ex: 1.2e4 = 12000). SASS fully expands the numbers since browsers do not consistently support scientific notation. . | SASS can do unit manipulations, though if you have complex units (ex: px2), using those as property values will produce errors. This feature is intended because usually complex units indicate calculation errors. . | SASS can convert units, but if you do operations with incompatible units there will be errors. Use math.comparable($number1, $number2) to see if the units are compatible. . | Do not use interpolation if you want a number, because interpolation gives a string without quotes. . | Decimals and percentages are not interchangeable unless using math.div($percentage, 100%) or math.percentage() . | Has 10-decimal precision. Numbers with negligible differences reaching more than 10 decimals will be considered equivalent, and there are certain rounding conventions (rounding tends to gravitate towards integers where applicable) . | . | Strings . Can be quoted or unquoted. Can convert between these forms using string.unquote() and string.quote() . | Can use backslashes to make characters other than the hex characters part of a character. Could alternatively enter the unicode for any character, and the unicode is replaced by the corresponding character. . | Quoted strings can have single quotes or double quotes. Can have interpolation and contain most characters ( , ‘, “, and newlines must be escaped with unicode) . Guaranteed compilation. At this point we see why interpolation removes quotes (so that quoted strings inserted within another quoted string don’t cause issues) . | . | Unquoted strings follow a syntax pattern (on-site). It may be a good idea to include dashes or underscores. Some identifiers not parsed as strings are: . Color names → colors . | null → the value null . | true/false → the boolean values . | not, and, or → boolean operators . | . | Escapes is weird for unquoted strings. Unicode is converted where appropriate, and characters other than newlines and tabs can be replaced (including the backslash). Sometimes, there is no compilation (especially if non hex characters are involved in the backslash). Honestly I think it’s best to use quoted strings for simplicity . | Each character in a string is indexed. A few quirks: . The first character has index 1 (rather than 0). Yep, just like pseudocode. . | The last character can have index -1, the second to last having -2, etc. . | . | . | Colors . Supports: sRGB, HSL, colors as hex codes, color names . Any color can be used with both RGB and HSL) . | . | There are built-in functions to modify colors. More on that later . | . | Lists . Elements can be separated with slashes, commas, or spaces (if consisted) . Forward slashes are also used for division, but this will be deprecated in favor of math.div() in the near future (outside of the calc() function). This will make forward slashes only function as list separators. . | . | Brackets are optional. Use square brackets or parenthesis . Can have one-element lists (expression,) or [expression] or zero-element lists () or [] . | . | Remember that we are using the 1-index (not 0-index) . | Get an element: @debug list.nth($list, $index) . | Use @each to do something for each element . | To append: @debug list.append($list, $appended-value) . | To check if a value exists: @debug list.index($list, $value) (returns the index of the value or null if none) . | Lists are immutable (can’t be modified); all the list functions make new lists. It is possible to assign the new list to the same variable and override, however. . | If you make the last parameter of a mixin with …, you can take the last argument as a list. . | . | Maps . (&lt;key&gt;: &lt;value&gt;, &lt;key&gt;: &lt;value&gt;) . Keys must be unique. Duplicate values are OK. Put keys in quotes to make sure you’re actually making them string values (and not some other value, like a color value). . | Can use == to determine if keys have the same value . | . | Lookup a value: @debug map.get($map, $key) . | Use @each to execute code for each key and value pair . | Add/update key/value pair: map.set($map, $key, $value) . | Merge maps: map.merge($map1, $map2) . Duplicate keys: Second map’s values override first map’s values. . | . | Maps are immutable because they are lists. . | . | True/False . Are booleans. Can be returned by operators or built-in functions. . | Can be affected by boolean operators (and, or, not, etc.) . | Can use booleans in conditionals . | Remember: only false and null are false. . | . | Null . Returned by functions when there is no result. . | Properties and list elements with null are omitted from CSS during compilation. . | . | Calculations . Use built-in functions (calc(), min(), max()) to do calculations. Using / for division will work here. . Functionally equivalent to CSS calc(), but SASS variables and SASS functions can be used. . | . | Calculation functions can also simplify. Occasionally, simplification is prioritized over calculation . | Calculations can cause errors since some operations can only be used on numbers without units . | Constants can be used. Pi, e, infinity, -infinity, and NaN (not a number) are resolved/parsed automatically. . | . | W3Schools . One of the biggest selling points on the front page of W3Schools SASS is assigning colors (ex: #ffffff) to variables . | Fonts, text size, and image size can also be assigned to variables, as can lists/booleans (like in most programming languages) . | Can nest variables in SASS (rather than spelling them out one-by-one in CSS) . | . | . What is SASS: . SASS code needs to later be converted into CSS code as browsers can’t read SASS code . A compiler can be used for this conversion . | . | SASS is a lot more concise than CSS and therefore more scalable. . Alert: Hyphens and underscores are considered the same character. . | . | . Features available with SASS: . Variables: Variables can be created using a $ sign to store things like different colors that can be referenced in different parts of the SASS code . If the thing stored in the variable needs to be changed, it only needs to be changed in the variable rather than every place the thing is used (without SASS) which would be a lot of time consuming . | . | Nesting: Nesting can be used to avoid different code segments being repeated various times. Also increases ease of variable definition (ex: font-related variables) . Selector Lists: Selectors that are between commas are nested separately and combined in CSS. Can be combined with combinators. May have quadratic complexity (watch it!) . | . | SASS Mixins: If you find yourself wanting to use the same group of styles for many different classes, the mixins feature can be used to apply a style set anywhere you want . | Conditional Logic: If and else statements can be used with SASS. . | Lists and Arrays can be created with SASS . | Loops: For, while, and each loops can be implemented with SASS . | Functions: Reusable functions can be created and the last 3 features mentioned before can be used in them. . | Importations: Use @import filename.scss to import a file and all the variables defined within that file. This allows creating a global cache of variables for the project. This prevents redefinition of variables for every file (that’s redundant!) . | Extensions: Another way to increase concision in SASS. You can define a class with some attributes (text size, text alignment, etc.) as a generic class (ex: buttons on your website will be visually similar). In another class, call the generic class using @extend .class-name; and all the attributes of that class will be imported into your defined class. . | . Syntax: . SCSS: . File extension is .scss . | Use this because it is more popular . | All CSS works in SCSS too . | Uses curly braces and semicolons (whitespace does not matter) . | . | Indented syntax: . File extension is .sass . | Same features as SCSS except indentation is used (whitespace does matter) . | . | . Example Code: . FastPages (Leonard’s posted here) . dark-mode.scss and fastpages-dracula-highlight.scss has good stuff . | . | Check Lily’s fastpages for SASS examples (will post later) . | . Possible Quiz Questions: . What does SASS stand for? . | Give three reasons why SASS is more scalable than CSS. . | . - .",
            "url": "https://leonard514.github.io/FastPage/word/2023/04/16/Cool-things-with-SASS.html",
            "relUrl": "/word/2023/04/16/Cool-things-with-SASS.html",
            "date": " • Apr 16, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "MCQ 2018 Reflection",
            "content": "Integrity Disclaimer . The author does not permit copying of any of the reflections contained within this post. Cheating has severe consequences, among them a stain on the academic record and a lack of understanding about the relevant contents of the course. Do your own work please! . Statement of Intention . This blog post is for reflection on multiple choice questions that I found to be particularly difficult. These include questions that I got wrong as well as questions that I found to be particularly difficult. I will not go over all of the questions to reduce vulnerabilities in the integrity system. . Reflection . Here are a few of the questions that were of interest. . Question 3: Citizen Science!!! . Apparently citizen science exists. I’ve never heard of this before. If there’s anything I’m guessing this has something to do with involving a group of people representative of the population. . Iterative and Incremental Processes of Development . Question 16 and the Digital Millenium Copyright Act . I was 50% certain when I was taking the test that this was legislation that was proposed, protested against, and ultimately never happened. Regardless, the music seller was licensed, so I thought copyright infringement was unlikely. TODO: Look it up. .",
            "url": "https://leonard514.github.io/FastPage/notes/MCQ2018reflection",
            "relUrl": "/notes/MCQ2018reflection",
            "date": " • Apr 9, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Note: The template is not my work. There are blanks here that are filled that are my work. . Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: 2.80 GHz | Memory in GB: 3.72 GB | Storage in GB: 32 GB | OS: Chrome OS Version 111.0.5563.118 | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices Touchpads | Keyboards | . | Output devices Computer Speakers | Monitors/Screens | . | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path | Route | Computer System | Computer Device | Bandwidth | Computer Network | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://leonard514.github.io/FastPage/2023/04/05/Topic4.html",
            "relUrl": "/2023/04/05/Topic4.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a ___. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is ___. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # # # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # # . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # # # Printing the dictionary print(lover_album) . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] # What can you change to make sure there are no duplicate producers? # # # Printing the dictionary print(lover_album) . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # # # Printing the dictionary print(lover_album) . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # # . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # # . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | .",
            "url": "https://leonard514.github.io/FastPage/2023/03/29/hashmap.html",
            "relUrl": "/2023/03/29/hashmap.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Parallel Computing + Hashmaps Notes",
            "content": "Most important things first. The W3Schools editor is primitive because it breaks when you try to give it input. So new editor! . Class Notes - Parallel Computing . top -H gives a list of processes! I’ve run this on Linux machines before. You want to run this on a terminal. There is a #TH in Mac and/or the total number of threads at the top. I think number of threads is also available via Windows Task Manager. . When the code affecting the images is run, there is a img.putdata([grey_pixel(pixel) for pixel in image[‘numpy’]]). This is a for loop in one line, with brackets for the list. There is a list comprehension hacks exercise (I’ll have to use the W3Schools Python interpreter for that). You put the list of the for loop into the list. . Sequential Processing example: Each image is processed one at a time. In order to see this more clearly, the class increased the baseWidth to 2000 pixels. Since it took half a minute for each set of images to render on Lily’s computer, it was more obvious that sequential processing was occurring. . Parallel Processing: Each of the images are processed simultaneously. Mr. Yeung’s execution took 43.9 seconds rather than 48 seconds. This was largely dependent on the threads. Mr. Yeung observed 110 threads initially/during sequential processing, but 113 threads while the parallel processing was occurring. Mr. Yeung also noted that computers can max out their threads and parallel processing would not be too different. In my opinion, parallel computing should be faster if computing resources are not being strained by other processes . Chinmay asked if it was possible to apply multiple threads to the same loop (iteration operation). Mr. Yeung responded that it is not possible to run multiple threads on one loop, but it is possible to run multiple threads on multiple loops. However, setting up multiple loops would be impractical/inefficient . College Board Notes . I was instructed to provide answers + thoughts about the question form of the college board video. I’ll provide my general notes on the video contents first. . Sequential/parallel/distributed computing . | Computers handle many tasks System: Managing hardware, working with network, etc. | User: Executing user programs (google chrome, MS Excel) | . | Computer needs to balance + schedule all the tasks | . Sequential Computing . Do tasks one at a time. Applies to computers with one Core Processor Unit | Tasks with dependencies (Task C depends on Task B, Task B depends on Task A, etc.) | . | Time to execute is the sum of execution times of individual tasks | . Parallel Computing . Program is segregated into smaller computing operations Done on same computer. Usually has sequential/parallel portions | . | Why? Hardware-driven (1 CPU/GPU has many cores), faster Ex: Having all students grade their papers is faster | . | Lots of data can be processed in same way - Single Instruction, Multiple Data (Wikipedia) (SIMD - processors perform the same operation on multiple pieces of data) | More scalable than sequential computing | Time taken is longest time of any processor Works if there aren’t dependencies in tasks | Takes as long as all sequential tasks + longest parallel task | . | . | . Speedup time . Sequential processing time / Parallel Time (proportional comparison) | Parallel computing restricted by sequential portions (dependencies). At a point, adding parallel portions won’t increase efficiency | . Distributed Computing . Uses other computers to run a program (uses more than one computer). Needs network access. | Mixes sequential and parallel computing. Allows for execution of programs that would otherwise be impossible with a single computer | Ex: Google Search, Beowolf Clusters, executing tasks over the web | If the network is not down or if responses take a long time, time efficiency may decrease. | . Example 1 . Computer has 2 identical processors. Each process must be executed on single processor, each processor can do one at a time. No dependencies. Find the minimum time to execute. | . Process Execution time . X | 50 seconds | . Y | 10 seconds | . Z | 30 seconds | . Assign these processes as follows . Processor 1: X (50 sec) | Processor 2: Y and Z (10 + 30 = 40 sec) | . Minimum time of *50 seconds detected. . Example 2 . Computer has two identical processors that can run parallely. No dependencies. | . Process Execution Time . A | 25 Seconds | . B | 45 Seconds | . Find difference in execution time between parallel processing and sequential processing. . In parallel processing, assign the processes as follows: . Processor 1: Process A (25 sec) Processor 2: Process B (45 sec) . This will take a total of 45 seconds. . In sequential processing, these processes will be run one after another for a total of (45 sec + 25 sec) 70 sec. . The time difference is 70 sec - 45 sec = 25 seconds. . Example 2 . Computer has two processors. No dependencies. Assign the 4 processes to optimize execution time. . Process Execution Time . A | 25 seconds | . B | 25 seconds | . C | 10 seconds | . D | 40 seconds | . To optimize the execution time, the execution time for each of the parallel processors should theoretically be as close as possible. Here are assignments that would fulfill this aim: . Processor 1: Processes A and B (25 sec + 25 sec = 50 seconds) Processor 2: Processes C and D (10 sec + 40 sec = 50 seconds) . The execution will take 50 seconds and will have the maximum efficiency possible. Execution time will be optimized. . Hack 3: Example of List Comprehension . Here is a URL that is particularly important since I need it to execute Python on a chromebook. Anyways, I’ll paste in my code and current results below so you can take a gander. . # This W3Schools lesson was very helpful. # https://www.w3schools.com/python/python_lists_comprehension.asp # I can also do a documentation drop on you if you&#39;re more curious about this stuff. # The instructors have only skimmed the surface of the available data structures in Python. # Here you go: https://docs.python.org/3/tutorial/datastructures.html # Let&#39;s start simple. All the numbers from 0 to 99. numbers = [i for i in range(100)] print(&quot;Numbers:&quot;, numbers) # List comprehension can be used to filter lists!!! evenNumbers = [i for i in numbers if i % 2 == 0] print(&quot;Evens:&quot;, evenNumbers) # Can also perform operations on each item in a list. # See example for changing all these numbers back to the integers convertedNumbers = [ int(i/2) for i in evenNumbers] print(&quot;Back to integers:&quot;, convertedNumbers) # I&#39;ve created an equivalent to the head function and the tail function using list comprehension. # These list the first 10 elements in a list and the last 10 elements in the list, respectively. # You can replace the list name with your desired list and you&#39;re off!!! headNumbers = [i for i in numbers if i &lt; 10] print(&quot;Head:&quot;, headNumbers) tailNumbers = [i for i in numbers if i &gt; (len(numbers) - 11)] print(&quot;Tail:&quot;, tailNumbers) . . . Hashmap Notes . In python, the built-in hashtable is a dictionary. Hashtables allow for efficiency in lookup, insertion, deletion. The time complexity for looking up an item in a hashtable is constant O(1) since the known key can be found quickly. Without dictionaries, there are hashing. There are no duplicates (can’t have multiple values into the same key); collisions can result from different keys mapping to the same hash value. . Set Example: Executing the code results in removal of all duplicate elements within the brackets. The set is printed in curly braces. Sets are in the tech talk along with hash maps likely since they are cleaner versions of hashmaps, which cannot contain duplicate entries associated with a key (this would result in collisions). Dictionaries cannot have duplicate keys. . Dictionary example about lover album: Within here are string variables (ex: the title of the album and the artist), integer variables (release year), list variables (the genre of the music), and a dictionary variable (the tracks). . SAVED WORK BELOW . # Question 1: What do you notice about the set, and why is this in the tech talk? my_set = set([1, 2, 3, 2, 1]) print(my_set) # The set contains only unique entries. # Question 2 about the lover album. What data structures are there? lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # Data structures include lists, integers, strings, and dictionaries. # # Printing the dictionary print(lover_album) # CODE BLOCK 3 print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) # CODE BLOCK 4 print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) # CODE BLOCK 5 lover_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? # Use set notation!!! # # Printing the dictionary print(lover_album) # CODE BLOCK 6 lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? lover_album[&quot;genre&quot;].append(&quot;Lyrical Music&quot;) # # Printing the dictionary print(lover_album) # CODE BLOCK 7 # These were helpful for a few of my purposes. # https://stackoverflow.com/questions/32796452/printing-a-list-separated-with-commas-without-a-trailing-comma # https://stackoverflow.com/questions/493386/how-to-print-without-a-newline-or-space # https://www.w3schools.com/python/python_conditions.asp for k,v in lover_album.items(): # iterate using a for loop for key and value if str(type(v)) == &quot;&lt;class &#39;list&#39;&gt;&quot; or str(type(v)) == &quot;&lt;class &#39;set&#39;&gt;&quot;: print(str(k) + &quot;: &quot;, end=&#39;&#39;); print(*v, sep=&quot;, &quot;) elif str(type(v)) == &quot;&lt;class &#39;dict&#39;&gt;&quot;: print() print(str(k) + &quot;:&quot;) for key, value in v.items(): print(str(key) + &quot;. &quot; + str(value)) print() else: print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # Success! (above) # # CODE BLOCK 8 def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) #search() # This is a very basic code segment, how can you improve upon this code? # # . # The album of my choice. No lyrics. A solid portion of songs # these days have garbage lyrics (profanity, questionable topics, etc.). # For a song to even be considered my favorite, it shouldn&#39;t have lyrics. # That way, I can appreciate the beauty of the music without worrying about what&#39;s being said. # So yep, I don&#39;t have a favorite Taylor Swift song. # https://en.wikipedia.org/wiki/December_(George_Winston_album) piano_album = { &quot;title&quot;: &quot;December&quot;, &quot;artist&quot;: &quot;George Winston&quot;, &quot;year&quot;: 1982, &quot;genre&quot;: [&quot;Christmas&quot;, &quot;Ambient&quot;, &quot;New Age&quot;, &quot;Folk&quot;], &quot;notes&quot;: &quot;Lots of piano stuff with classics. No lyrics!&quot;, &quot;Top Billboard Rank&quot;: 54, &quot;tracks&quot;: { 1: &quot;Thanksgiving&quot;, 2: &quot;Jesus, Jesus, Rest Your Head&quot;, 3: &quot;Joy&quot;, 4: &quot;Prelude&quot;, 5: &quot;Carol of the Bells&quot;, 6: &quot;Night, Part One: Snow&quot;, 7: &quot;Night, Part Two: Midnight&quot;, 8: &quot;Night, Part Three: Ministrels&quot;, 9: &quot;Variations on the Kanon by Johann Pachelbel&quot;, 10: &quot;The Holly and the Ivy&quot;, 11: &quot;Some Children See Him&quot;, 12: &quot;Peace&quot; } } print(piano_album) # Anyways, I thought it would be a good idea to alphabetize all the tracks. # This was essentially a sorting exercise. Merge sort proved to be a bit ambitious, so # I decided to go with an insertion sort. We&#39;ll probably be coming back to this later. # I could have just as easily done something like &quot;the track with the longest name&quot; using length # on each string. Anyways... print(&quot;Here are the alphabetized tracks:&quot;) trackList = [] for key, value in piano_album.items(): #print(key, value) if str(type(value)) == &quot;&lt;class &#39;dict&#39;&gt;&quot;: for track, song in value.items(): trackList.append(song) #print(trackList) # I&#39;ll decide to do an insertion sort since it seems simpler. # Geeks for Geeks also says it&#39;s better for smaller data (like this one) # https://www.geeksforgeeks.org/insertion-sort/ # I&#39;ll be blunt and say I just took the pseudocode # and converted it to Python. # Essentially, if one element is greater than the previous element, # they are swapped and the previous pair is examined. # This is basically a refined version of bubble sort. # Don&#39;t use these on large datasets. # The geeks for geeks article on merge sort suggested that for the # lists smaller than 43 elements that insertion sort be used since # it will be faster for those smaller pieces... # https://www.geeksforgeeks.org/merge-sort/ for i in range (0 , len(trackList)): j = i while j &gt; 0 and trackList[j-1] &gt; trackList[j]: trackList[j-1], trackList[j] = trackList[j], trackList[j-1] j = j - 1 print(*trackList, sep=&quot; n&quot;) . .",
            "url": "https://leonard514.github.io/FastPage/notes/parallel",
            "relUrl": "/notes/parallel",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "MCQ",
            "content": "Integrity Disclaimer . The author does not permit copying of any of the reflections contained within this post. Cheating has severe consequences, among them a stain on the academic record and a lack of understanding about the relevant contents of the course. Do your own work please! . Statement of Intention . This blog post is for reflection on multiple choice questions that I found to be particularly difficult. These include questions that I got wrong as well as questions that I found to be particularly difficult. I will not go over all of the questions to reduce vulnerabilities in the integrity system. . Reflection . Here are a few of the questions that were of interest. . Question 7: What is assigned to a new computer after connecting to the Internet? . There was an option here that I had never heard of despite previous experience with computer networking, and that is called a packet number. I am familiar with the idea of data transmissions via packets through networks from servers to clients. According to this source, packet numbers are identifiers within a packet saying where within a set of data the packet fits and how many packets comprise the set of data. The debate about what packet numbers are assigned to is therefore closed. . I am familiar with computers being assigned IP addresses through a process known as Dynamic Host Configuration Protocol. Essentially, a DHCP server (which could be a standalone server or a router) assigns a computer an IP address for a finite period of time. This address comes from a pool of available addresses. It is actually possible to manually configure your computer IP address, but DHCP is more scalable for larger networks (ex: the school network) and is less susceptible to IP address conflicts (computers must have unique IP addresses to properly receive network packets). . Question 23: What is not an example of searching for patterns in large datasets to produce useful information? . I answered this one incorrectly. The wrong answer I chose had to do with online companies looking through viewing habits to suggest products based on other customers’ purchases. I selected this one on the basis that the behavior of other customers may not be representative of the behavior of one specific customer. However, it seems that similarities are enough in this case. . The correct answer in this case had to do with finding the top 10 students in class rank at a local high school. Sorting through the highest GPAs is not pattern matching according to college Board. I can see that looking for the highest values in a dataset is a relatively simple operation here. There is also some context that is obscured by the conditions of this school, where we have around 2500 students. That’s actually 5 times higher than the national average, but that’s not to say we’re close to the biggest school in the United States. Regardless, 500 students and their GPAs is a small scale operation compared to analyzing millions of customer data points in an online system. .",
            "url": "https://leonard514.github.io/FastPage/notes/MCQ5reflection",
            "relUrl": "/notes/MCQ5reflection",
            "date": " • Mar 25, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Time/Space Complexity Notes",
            "content": "Prompt 1: Why do programmers care about time and space complexity? . Programmers care about space complexity because they want to make sure that their computer programs consume a reasonable amount of resources to function. If programs consume too much memory to function, they may crash the computers they run on (especially if this is a product intended to be installed on consumer machines; these machines will have limited memory). Programmers care about time complexity because they want to ensure their programs run in a reasonable amount of time. If programs run too slowly (ex: a search engine taking a minute to pull up results), this decreases ease of use. From a corporate perspective, slow programs are not that competitive and will not make profits. . Notes . Loading time for 5000 pixels in width took between 0.1 and 0.5 seconds. | Loading time for 2500 pixels in width took less time | Loading time for greater image resolution has slowed down performance and in some cases has crashed the kernel. The maximum width of 40000 pixels took 30-60 seconds to load (if it did) | . Loading large images is both a space complexity and a time complexity problem. The space complexity is through managing . Big O notation . Constant O(1) | Linear On | Quadratic On^2 | Logarithmic Olog(n) | Exponential O2^n | . Constant . Finding number in a list with a known index | Dictionary (keys and values) An example of time complexity (will take the same time to fetch the object) | . | Space complexity: returning a sum of two numbers (no matter how large those numbers are) | . Linear . Iterating through list (not as efficient as constant) - Time Searching for a value in a list with unknown index | . | Space: Reversing the order of a list | . Quadratic . Nested for loop operation (time) | Space complexity - Matrix - this may take a while | . Logarithm - shorter than 0(n) . Binary Search - elements in order, do number in center, adjust search based on if element is above or below that part | . Exponential (2^n) . Fibonacci sequence, series of numbers and each number is sum of two preceding numbers. Do recursion with CRUD menu… | As numbers increase, the function will take a while to execute. | Generate subset will print every possible combination of a list of numbers. This will make many additional combinations very quickly. | . Hacks Response . I started by testing all the algorithm stuff. I should probably paste this URL here since it’ll let me execute python without Jupyter. . Now here’s a table . Algorithm Form Time Patterns . Constant | Negligibly small - took 2.622 * 10^-6 seconds to fetch an item from a list of 1000 elements. Took 9.536 * 10^-7 seconds to add two large numbers | The time is always negligibly small | . Linear | Printing all values in larger list takes progressively more time. Printing a list with 100 elements takes 3.07 * 10^-5 seconds, but printing lists of 1000 elements takes 2.49 * 10^-4 seconds. | Time increases proportionally to the number of elements to perform operations on. | . Quadratic | Performing the nested for loop operation took 0.00467 seconds on a list with 100 elements, but 0.0455 seconds on a list with 1000 elements. For a 10-fold increase of elements, the time taken increased by 100-fold | As the number of elements increases by a certain extent, time taken for execution increases by the square of this extent | . I also have some sorting algorithms. . Sorting Algorithm Functionality Worst Case Space Complexity Worst Case Time Complexity . QuickSort | A pivot element is selected in the array, and all the other elements are divided into two subarrays so that all elements of one array have value less than the pivot element and all elements of the other array have value greater than the pivot element; the pivot element is then placed in the middle of the array. This process is repeated for all the subarrays until this is sorted. | Logarithmic | Quadratic | . Merge Sort | Make the unsorted list into sublists with one element. The sublists will be merged together with elements in order until a complete list is made | Linear | O(nln(n)) | . Timsort |   |   |   | . Heapsort | Divides the data into sorted and unsorted parts (the unsorted part is in a data heap, which is essentially a binary data structure where each object is a parent object with two child objects. This allows a targeted element to be obtained more quickly in a process similar to binary search); the algorithm starts by turning the unsorted part into the mentioned heap. For the unsorted part, the algorithm then gets the |   |   | .",
            "url": "https://leonard514.github.io/FastPage/notes/complexity",
            "relUrl": "/notes/complexity",
            "date": " • Mar 21, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Big Idea 2 MCQ Reflection",
            "content": "Integrity Disclaimer . The author does not permit copying of any of the reflections contained within this post. Cheating has severe consequences, among them a stain on the academic record and a lack of understanding about the relevant contents of the course. Do your own work please! . Statement of Intention . This blog post is for reflection on multiple choice questions that I found to be particularly difficult. These include questions that I got wrong as well as questions that I found to be particularly difficult. I will not go over all of the questions to reduce vulnerabilities in the integrity system. . Reflection . I did get a perfect score. Of all the available questions, one question stood out. . Question Prompt: There are 4 spreadsheets relating to students, GPA, and sports . i) Name, ID, GPA ii) ID, names of sports iii) Name, ID (only includes 3.5+ GPA) iv) Name, ID (only includes 2+ sports) . Goal: Are students that play sports more likely to have greater/lesser GPAs than those who don’t? . Spreadsheet (iv) is irrelevant since this excludes students who play exactly 1 sport. As such, spreadsheet (ii) was necessary. The question was whether to select (i) or (iii). In order to determine this, there should be a method to determine whether a given spreadsheet meets the goal. . In order to reach the goal, ideally we could find the proportion of sports students with a GPA cutoff (# sports students with the GPA / total # sports students). Execute a similar procedure for students who don’t play sports. Then, compare the ratios and see if the sports students have a ratio significantly different from that of the non-sports students. The total number of students who play sports and the total number of students who don’t play sports are required to find this ratio, and this requires Spreadsheet (i); spreadsheet (iii) doesn’t give total students. Therefore, spreadsheet (i) was most appropriate. . All the other questions were relatively quick, and a significant portion of the questions were recycled from previously administered quizzes. That’s why I don’t have too much to say here. .",
            "url": "https://leonard514.github.io/FastPage/notes/MCQ4reflection",
            "relUrl": "/notes/MCQ4reflection",
            "date": " • Mar 17, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . What is the purpose of identity Column in SQL database? | What is the purpose of a primary key in SQL database? | What are the Data Types in SQL table? | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | Same for cursor object? | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://leonard514.github.io/FastPage/2023/03/16/topic-2.4-b.html",
            "relUrl": "/2023/03/16/topic-2.4-b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///files/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User | db.Model inheritance | init method | @property, @&lt;column&gt;.setter | create, read, update, delete methods | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | User Object Constructors | Try / Except | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | user.password | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://leonard514.github.io/FastPage/2023/03/14/topic2.4a.html",
            "relUrl": "/2023/03/14/topic2.4a.html",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Topic 2.4 Notes",
            "content": "Class Notes . The init method is the constructor for all of the objects related to the users. . The following notes about the class User . The db.Model is the parameter for the creation of the class User. In Object Orienting Program, information is taken from the database (info inherited from db.Model). . For each attribute, @property (getter) and a setter. For getting and CRUD (create, read, update, delete), getting may correspond to Creating, Reading, and Updating. . The class added breakpoints to u6 and to u2 of the Initial Data code segment. initUsers() at the bottom is highlighted since the function is not run until the final line calls it. All the user information is contained within the call to the class defined as 6 user-variables. . sqlite database under notebooks &gt; files . It is good to convert data at the end to JSON because this is a universal language; this allows it to be more usable (ex: using APIs) . Notes on all the Code Blocks . Block 1 . The first code block starts by importing libraries and starting a flask instance. It finds the sqlite.db file and sets a few configurations related to Flask and SQLAlchemy, including the secret key and where the database file is. THe SQLALCHEMY_TRACK_MODIFICATIONS setting is set to false; this saves system resources according to this stackexchange . Here are some notes from the prompts on the blog . The first portion I’ll dedicate to the line app = Flask(__name__). According to more well-known sources, this command starts a Flask instance, which is used to fetch resources required to run a program. A personal blog went into more specific detail about how that works. According to that blog, a function is called which finds the root path of the application being executed. The setting of SQLAlchemy() to db allows for the creation of an object for the database. . Block 2 . This imports more libraries and is also where the class User is defined. At that, various columns for the SQL database are defined (including the _name, _uid, _password, and _dob). There are configurations for the maximum length (indicated to be 255 characters by db.string(255), and the _uid must be unique (unique=True). . After all of these definitions, the __init__ function is defined, which constructs the object of the User class. These include configurations for the name, uid, password, and date of birth. There are then a series of getter functions to obtain these stored attributes from the object and setter functions for updating this data for the object. There are some differences for how the passwords are handled: only the first 10 characters of each password can be shown, and when passwords are set, they are hashed with SHA256. There is also checking for matching uid, password matching, and an age calculator. When necessary, these is a function to obtain the data and output it in JSON format for API use. Finally, there are functions which execute each of the 4 procedures related to CRUD (create, read, update, and delete). . Block 3 . The block starts by defining function initUsers. The function creates a database and inserts information for 6 users in accordance with the class User. This information includes names, uids, passwords, and dates of birth. THese users are then sent into a list users and loops through the list. A for loop is then utilized to add each user of the list into the table, along with printing output based on if each user was successfully added to the list. If not, the print message says there was a duplicate uid or other error. . After the function was defined, the function is called and executed. . A few notes: . db.create_all() creates an empty table and database. Data can now be appended to this table. Each of the u# variables defines a user with each of the attributes in accordance with the user class. After these users are created, the program will attempt to add these users to the table (try), but if there is an error, the program will execute the except lines, which prints a debug message. . Block 4 . The first function, find_by_uid, has parameter uid. According to these docs, it will look within the SQLite database for the user with the uid matching the parameter entered (the first() option will probably bring up the first match in the table. It has no effect here since there aren’t duplicate uids). If the user is found, it’s returned outside the function. The function searches the table using the User.query.filter_by, which, as the name implies, searches the User class based on an attribute. . The second function, check_credentials, will take parameters uid and password. It first searches the table for a matching uid, and tow conditions are checked: first, if there is no match (user == None), and second, if the user’s password matches what is in the database. If the first condition is fulfilled or if no condition is fulfilled, the function will exit with False; if the second condition is fulfilled, the function will exit with True. This function is likely to be used in authentication checks (signing in). . Block 5 . The function create starts by setting the uid equal to a user input; the user is prompted to enter the ID. If the ID matches anything in the database, the function tells the user that a user was found. This prevents duplicate uids from occurring. If the uid is not present in the table, the function allows the user to create a user with that uid, entering the name and password. These are stored in the User object. The user can also enter the date of birth as dob; if the user doesn’t follow formatting conventions (the except condition), the birthday is set to the present date. This allows the dates of birth in the table to be uniform, increasing the ease of searching through the data. Afterwards, there is an attempt to create the new object (if this fails, there’s an error message). After the function is defined, it is called and executed. . Block 6 . The function read is defined; in the app context, . Class Notes B . Object-Oriented Programming . User class with objects and functions + attributes | Larger scale Imperative Programming | Small bit of code with function by function | . SQLite = 2 objects conn and cursor are created . schema() (I wasn’t there when this was introduced) . These are the columns of the database. They exist to organize the data, which increases the ease of search queries | The purpose of a primary key (in the User class as the id) is to more easily access the data | String, integer, float, boolean, images, and pretty much any type of data or structure can be incorporated into SQL tables. | . Executing the first code block output the schema from the User class. THe VARCHAR(255) is the character limit. PRAGMA should be in the docs. . conn and cursor is new. See the older methods. They accessed the sqlite.db through the terminal in VSCode. Command sqlite3 sqlite.db was executed, then SELECT * FROM users; which printed out table with all the forms of data defined in the user class as previously configured. . In code block 2, the variable results was set equal to cursor.execute(‘SELECT * FROM users’). This has equivalent effect to executing the command in parenthesis in the terminal. It seems the cursor exists to execute commands outside of the console. This is an example of abstraction (ease of use). The results (the contents of the schema) seems to be an object since there are data in the variable. In addition, there are attributes (names, uid, etc.) for all the data (ex: the methods - the names, uid). The object contains both the data and the functions (CRUD - create, read, update, and delete. . For the create() of both sqlite3 lessons… compare. What is better/worse? . The create function in this lesson 2.4b seems to collect user input about all the attributes (name, uid, password, dob). A connection is then established and a cursor within that connection, and a command is executed to insert all the data into the users class, which is then committed. In 2.4a, stored values of the self (when running the program) are applied to the table. It seems that the data is collected as create is executed for Lesson 2.4b. This makes all data more long-term. Meanwhile, in 2.4a, create (add attributes to table) is separate of actually defining those attributes. This may allow for short-term data storage (if needed). There is also the option that 2.4b is for smaller-scale operations. . The menu function uses elif statements to check for inputs of c, r, u, d, s… there’s also a menu() at the very bottom that causes the function to act recursively. The menu function will keep executing until Esc is inputted, after which the condition of the operation having a length of 0 would pass. This will result in return (leave the function) .",
            "url": "https://leonard514.github.io/FastPage/notes/topic-2b",
            "relUrl": "/notes/topic-2b",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. . Here are some suggestions... . Titanic Dataset:This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. | Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | . These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset... . Kaggle:The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. | UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning Visit Tutorials Point . Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python. . Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . | Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. . Decision Trees, prediction by a piecewise constant approximation. | Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7705882352941177 LogisticRegression Accuracy: 0.788235294117647 . /Users/johnmortensen/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://leonard514.github.io/FastPage/2023/03/09/2.3lecture.html",
            "relUrl": "/2023/03/09/2.3lecture.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Topic 2.2-2.3 Notes",
            "content": "I’ve been asked to display some images in Jupyter Notebooks. Unfortunately, I do not have a Jupyter editor at the moment so I will have to resort to Markdown. . . . . Prompt 1: Describe some of the meta data… . The image size, which could be measured by the number of pixels, affects the file size of a given image. If the file size of an image becomes too large, the image could be difficult to transport across the Internet. As such, the image file must be compressed, which decreases its file size. According to a College Board video, this is achieved through using an in-file dictionary to decrease the number of characters in a file, thereby decreasing its size. According to this same video, there are two types of compression: Lossless compression (all data is conserved) and lossy compression (not all data is conserved, though there is no need to do so). Generally, lossy compression reduces the file size more effectively. . In terms of images, there are many file extensions that are available. Some of the more common file extensions are the .PNG and the .JPEG extensions. According to this source, .JPEG uses lossy compression while .PNG uses lossless compression. When lossy compression is utilized, the change in image colors are not easily perceptible. When I took notes on the 2.2 lesson, the instructor sampled multiple images of smiley faces. One image only used 2-3 colors (a shade of yellow, black, and possibly white), while another image used many shades of green. Lossless compression is more favorable for images with less colors (many pixels with the same color means less dictionary mappings are necessary), while lossy compression is more favorable for images with more colors. . Prompt 2: Commands for file paths in different OS and pathlib . Here are some commands used to access files .   Linux Windows . Print Files | cat /path/to/file.txt | cat C: path to file | . Change Directory | cd /path/to/directory | cd C: path to directory | . Print files/folders in directory | ls -la | dir | . Edit files | nano /path/to/file.txt | Notepad “C: path to file.bat” | . The most dramatic variation between these file-related commands in Windows CMD and Linux Terminal is that all the file paths are shown differently: in Linux, forward slashes are used for each directory without any drive, while in Windows, a drive is used (usually the C drive) and backslashes are used for each directory. . Prompt 3: Playing around with provided sample code . Lily (my partner) had some issues loading a Jupyter renderer and a dependency. She just reloaded VSCode and everything worked fine. The issue was relatively strange. . As for image paths, paths are important when working with images so that the program can appropriately find the location of the image within its filesystem. If a man doesn’t know where his favorite place is, he can’t use it. In a similar manner, if the program doesn’t know where an image is, the program can’t display it. . I need to answer a question about pandas. . Prompt 4: Translate the first 3 letters of your name to base64 . There are many text-to-base64 converters online, and I’ll be using one here. As seen in the Wikipedia article about Base64, the basis of converting ASCII to base64 is that Base64 supports 6 bits (2^6 = 64), while ASCII supports 0 bits. As such, each group of 3 ASCII characters provides 24 bits for 4 Base64 characters; equal signs are used as padding to ensure that the number of characters printed is a multiple of 4 (an ASCII string does not necessarily have a number of characters being a multiple of 3) . Leo –&gt; TGVv | . But for the sake of the exercise I’ll also do it manually. This source was very helpful, along with this ASCII code chart. I’ll be re-using information from the chart and the article as I go along. Now, here’s what I’ll do. . Each ASCII character will have 8 bits. The first bit will always be 0 for some reason. The next three bits will be the bits at the top row in the column of the ASCII character, and the last four bits will be in the left four columns in the same row as the character (feel free to actually click the link to the article). We are essentially converting each character to binary. Keep in mind that this is case-sensitive. . | L –&gt; 01001100 | e –&gt; 01100101 | o –&gt; 01101111 | . The article then says that I must group my bits by 6 (I said before that base64 has 6 bits). I’ll go do that real quick. . 010011 000110 010101 101111 . We must now change our binary to decimal so that we can match the characters via base64. The article goes into detail about how to do the padding, but the administrators decided to ask for 3 letters so we can skip those parts. I omitted zeros in this case. Note that each binary digit is a power of 2. . 010011 = 1 + 2 + 16 = 19 000110 = 2 + 4 = 6 010101 = 1 + 4 + 16 = 21 101111 = 1 + 2 + 4 + 8 + 32 = 47 . Now we’ll use the base64 chart in the linked Wikipedia article to convert these decimals. . 19 –&gt; T 6 –&gt; G 21 –&gt; V 47 –&gt; v . So Leo (ASCII) = TGVv (base64). . Prompt 5: Buffering . I have been a consumer of buffering while working with chromebooks. I currently use a chromebook for a lot of computer-related projects. Occasionally, when I type, the inputs for all the characters I type will take a while to appear on the screen. This is probably where the input for all of my characters are queued for the output. The buffering for this is an inconvenience in that it increases the amount of time it takes for me to get my work done. Depending on if there is a severe time constrain, this could be a minor inconvenience or a major inconvenience. These apply to executing functions on images given that, depending on image dimensions, a iteration may have to cycle through millions of pixels. Each of those pixels may have to go through a buffer, and under certain circumstances the functions executed on such images may cost time. . Prompt 6: Images (comment on the code) . If you’re asking about sequencing in code, then all code has sequencing. Lines are executed in a certain order. . For the greyscale function, it is likely that each pixel in the image is converted to an array (likely based on the RGB values - each pixel in an image is determined by red, greeh, and blue values ranging from 0 to 255). A blank list gray_data is made for the array of the greyscale image. . Then for each pixel in the original image aray, the average of the RGB values is taken by adding them and dividing by three. If there are more than three values for an element in the array, the average is taken of all values. Regardless, the average is appended to gray_data, and if there are more than three elements, the fourth element is preserved. The grayscale array then is placed as the data for what will become the grayscale image, which is run through a function that saves the image/array in a buffer and uses base64 to help display the image. . For the scaling function, a variable baseWidth of 320 pixels is defined. A variable scalePercent is defined as the the quotient of baseWidth divided by (what is likely) the original width of the image (converted to a float variable). The scaleHeight variable is the product of the float variable of the original height of the image times the scalePercent variable. This is returned as an integer. Then, the scale variable is defined as the dimensions of the image, being the width and the height respectively. The new dimensions are returned. Similar to the grayscaled image, this is run through the function that saves the image/array in a buffer and uses base64 to help display the image. . Scaling images can be viewed as a form of lossy compression. That is, reducing the number of pixels in the image can reduce the image file size. However, it is impossible to recover the original (higher-resolution) image from the scaled (lower-resolution) image. Scaling very high resolution images may not severely affect image quality unless the scaling is highly exaggerated (ex: scaling a 1000x1000 pixel image to a 10x10 pixel image) . Prompt: Add images that will likely utilize lossy and lossless data compression. . Here you go. . . Source is here . . Source is here . Here are some reasons why the first of these images might utilize lossless compression . There are only two image colors (a shade of red and a shade of white). As such, when constructing the in-file dictionary to compress all those pixels, there are only two possible pixel colors. The image is also a .PNG image, which commonly utilizes lossless compression. As such, this image is likely to utilize lossless compression. | . Here are some reasons why the second of these images might utilize lossy compression . This image has a .JPG extension, and these images commonly utilize lossy compression. In addition, there is a high variation of colors and shades in the image. These include various shades of brown, blue, white, and gray. As such, there are too many color values for an in-file dictionary to save much space (given there is not a high degree of repetition of color shades within the image pixels). As such, a lossy compression method could result in changes of color shades that are difficult to notice, but yet they would dramatically decrease file size. The original colors of the pixels would be irrevocerable, however. | . Topic 2.3 . Actual Notes . 1) What needs to be cleaned in grade.json? . Here is a list of attributes that should be cleaned. . In column Student ID, find the actual student ID for that labeled nil. . In column Year in School, replace Junior with 11 and 9th Grade with 9. It is important that each column of a data set prove uniform since that makes it easier for each column to search. Search for and verify the grade level of student 313 who has a grade level of 20. . In column GPA, verify that student 324’s GPA is actually 4.75. This might be obtained through taking lots of honors classes, but 4.75 is unusually high among the sample, which has the highest GPA of 4.00. This suggests a weighted GPA may have been misplaced among unweighted GPAs. . Please see the .ipynb file for the notes and observations on each code cell. Oh wait, I forgot I don’t have a Jupyter Editor. That’s why I’m in Markdown. I guess I’ll do it here. . Comments on all the code segments. . Code Segment 1 . import pandas as pd . Just need to import a library before you can use it. That’s really all. I think the as portion allows you to define how you’re going to call the library in subsequent code (this allows for some customizability and also avoiding naming conflicts). . Code Segment 2 . df = pd.read_json(&#39;files/grade.json&#39;) print(df) . This prints the dataset. It’s probably important to print or otherwise read a dataset before incorporating it into a computer project to make sure the data columns are relatively uniform (clean) and contains correct data. . Code Segment 3 . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . The first print statement prints the data but restricts the information displayed to GPA column. The second print statement adds an enter to the output, while the third print command prints the student IDs alongside their GPAs, but not their indexes (as specified by index=False) . Code Segment 4 . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . The first print statement prints everything again, but this time sorts by GPA. The second substantial print statement includes argument ascending=False. When inspecting the output, the first output sorts GPA by ascending order, while the second output sorts GPA by descending order. Mr. Yeung posted a question of whether a descending argument existed. Here’s documentation of the relevant commands used, and there is no such argument. . Code Segment . Quiz Questions . Integrity Disclaimer: The author does not condone use of these quiz reflections to cheat on quizzes. Do your own work! . Quiz 1: Data Compression . 1) What is an advantage of lossless compression? . Well, lossless compression preserves all the data. Lossy compression can’t do that. Data security often depends more on the encryption algorithms used during file transmission (not the file compression) . 2) A user wants to save a file on a storage site, reduce the file size, and restore the file to its original size. . He should use lossless compression… and only lossless compression. . 3) Programmer developing social media software; wants to use compression for attachments sent between users. What is true? . (The answer choices make conjectures about videos, images, and audio files) . A) Lossless compression of videos save more space than lossy compression: Largely circumstantial. If the video file has frames with very few different colors (ex: screen recordings where screen GUI elements have uniform colors), lossless compression may be ideal. However, most videos of real-life settings will have pixels of many colors in the frames. Lossy compression is therefore ideal in most scenarios. . B) Lossless compression of images result in images of equal size to the original file: If this were true, the compression operation would be pointless since it’s meant to decrease file size. . C) LOssy compression of images provides greater reduction in transmission than lossless: Lossy compression decreases image file size for images of diverse colors more effectively than lossless compression, which in turn decreases transmission time. This seems favorable. . D) Sound clips with lossy compression can be restored to original quality: Lossy compression will result in irreversible loss of data, so this is false. . Quiz 2: Binary Numbers . 1) A programming language has 4-bit binary for nonnegative integers. Programmers try to add 14 and 15 and assign to total. What will happen? . The sum of 14 and 15 is 29 in decimal. Must find the maximum displayable decimal number for 4-bits . 1111 = 1 + 2 + 4 + 8 = 15 . Yeah, this will be an overflow error; the sum is larger than the largest possible number to display with 4 bits. . 2) In two versions of a game, the character can face 4 directions in the 1st version and 8 directions in the 2nd version. What is true about storing 8 directions in memory? . (all the answer choices pertain to 4 bits) . The maximum number of values storable in 4 bits is expressed by: . 1111 = 1 + 2 + 4 + 8 = 15 . Then add 1 (don’t forget the 0) to get 16 possible values . 4 bits is enough to store 8 direction values. | . 3) What is true? . I) Binary sequences can be used to represent strings II) Binary sequences can be used to represent colors III) Binary sequences can be used to represent audio recordings . As far as I know, binary sequences represent all data present on a computer/machine. . 4) Consider 0011, 0110, and 1111. Which decimal is not equal? . 0011 = 1 + 2 = 3 0110 = 2 + 4 = 6 1111 = 1 + 2 + 4 + 8 = 15 . Answer option 9 doesn’t match . 5) Runner’s position is analog data. How is the position of the runner represented digitally (via sensors)? . I could be wrong here. It’s certainly not 0 or 1 depending on if the start or the finish is closer. In my physics class, motion sensors took 20 samples per second of object position using clicking sounds. According to an answer option, these positions should be represented by bits. . 6) Sort from least to greatest . Binary 1011 = 1 + 2 + 8 = 11 Binary 1101 = 1 + 4 + 8 = 13 . 5 &lt; 11 &lt; 12 &lt; 13 5 &lt; Binary 1011 &lt; 12 &lt; Binary 1101 . Quiz 3: Extracting Information from Data . 1) A researcher has access to two databases . Database with first/last names, grade levels, GPAs | Database with first/last names, number of absences (school), number of tardies | . Students don’t have ID numbers. What’s the problem? . The answer that fits is: Students with the same name may be confused. This is because names are a form of identification, similarly to ID numbers. . 2) Researchers make program to analyze pollution in US counties. What is the challenge? . A few options seem strange, particularly those pertaining to there being too much data. Data files can be very large, so size is no problem. The answer options raise issues due to combining data from different files and different organizations of data between counties. Logically, data files can be combined with ease. If the data is organized differently, it may be difficult to display the data in a uniform manner. . 3) Student makes web site to display city info based on inputted city name. What is a challenge? . The first thing that comes to mind (without me looking at the options) is multiple possible city names and case-sensitivity of inputs. . The former option already applies to abbreviated city names and spelling errors. . 4) Database of info at concert shows: . Name of artist at show | Show date | $ of all tickets | . What other info useful for determining artist with greatest attendance? . Dividing income from tickets by price of tickets will determine number of tickets sold. It is possible that someone will purchase a ticket without going to the show, but I’d guess this applies to few people. | . 5) Camera mounted on car captures image from driver’s seat every second + metadata (speed, date/time, GPS position). What is best determined without the metadata? . Option, number of bicycles passed, does not require the metadata. It only requires counting each unique bike in the pictures. . 6) Teacher sends survey of work habits . Minutes of HW per night | Minutes of test prep per test | Enjoy class materials? | . Which questions about students can teacher answer? . i) Do students enjoying class material spend more time on HW? ii) Do students spending more time on HW spend less time studying for tests? iii) Do students spending more time studying for tests earn higher grades? . Grades is not even in the dataset. iii is wrong. . Quiz 4: Using Programs with Data . 1) Spreadsheet contains lots of info (I’m not going to copy down the spreadsheet). Count # of books with criteria: . Mystery book | &lt; $10 cost | At least one copy. | . genre is the genre of a book, num is number of copies, and cost is the cost. Get an expression to evaluate to true only if the criteria are satisfied. . (genre = “mystery”) AND ((num &gt; 0) AND (cost &lt; 10.00)) . Yeah, I did that before consulting the answer choices. They did things slightly differently (namely setting num to be greater than or equal to 1), but you get the point. Multiple ways to solve the same problem. I probably have to group the right two parameters since I expect boolean operations to work in pairs. . HW time, studying for tests, and class enjoyment are in the dataset. The teacher could sort data in ascending/descending order of one variable and search for a relationship between that variable and a different variable. . 2) Clothing store records over 7 days: . Date transaction | Method of payment | items purchased . | Transaction cost | . Possible methods payment are cash, check, debit card, credit card. What is true? . A) Avg amount spent per day determined by sorting by total transaction, add 7 greatest amounts, divide by 7: This is an average of the 7 most expensive purchases (not for the entire day) . B) Method of payment used most commonly determined by sorting data by method payment, adding # items purchased for each type, then finding max sum: This determines the method of payment used to purchase the greatest number of items (not the method of payment used in most transactions) . C) Most expensive item can be determined by searching data for all items… that operation is not supported in the data. The data is about the transactions, not the items. . D) Total # items purchased in day determined by searching all transactions, adding # of items purchased for each transaction that day: True. . 3) Company with data files… . (there’s a big table with types of data available) . If a new product with AA batteries is available, how to use data files to send emails to customers who purchased products using AA batteries? . This is a bit invasive. Regardless… . Use products to find products IDs with AA batteries. Bridge from Product IDs to Customer IDs using Purchases. Bridge from customer IDs to email-addresses using customers. . 4) Spreadsheet contains photography info . Student makes algorithm to determine name of photographer for oldest photo; ignore unknown photographers and years. Entry will appear in rows of spreadsheet. Actions are available. . Need to filter by photographer, filter by year, and sort by year. I don’t think order matters; if the pictures with unknown years are sorted before being removed, positions will be adjusted as if they weren’t there. . 5) There’s a spreadsheet (a portion provided) - for a radio station . Students want to count talk shows on Saturday or Sunday. . genre is genre of show (string), day is day (string). Make an expression to evaluate to true if show meets criteria… . (genre = “talk”) AND ((day = “Saturday”) OR (day = “Sunday)) . 6) Wildlife preserve makes exhibit. There’s data categories. . Database Info . 1 | Name, classification, skin type, thermoregulation | . 2 | Name, lifestyle, life span, top speed | . How can these databases be used? . Use both; search by name. .",
            "url": "https://leonard514.github.io/FastPage/notes/topic-2",
            "relUrl": "/notes/topic-2",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Final Exam 2 Reflection",
            "content": "Integrity Disclaimer . The author does not permit copying of any of the reflections contained within this post. Cheating has severe consequences, among them a stain on the academic record and a lack of understanding about the relevant contents of the course. Do your own work please! . Statement of Intention . This blog post is for reflection on multiple choice questions that I found to be particularly difficult. These include questions that I got wrong as well as questions where I utilized a search engine. Mr. Yeung has permitted use of search engines orally on the condition that students are transparent about their methods. Unlike previous posts where I have used a tabular format, I will format each question with a subheading to give me more space to write longer reflections. . Question 2: Which has the greatest potential for compromising user privacy? . This question is difficult in that all options presented represent significant threats to privacy. . A) Cookies stored by Web Browsers.) . According to this article on Internet cookies by Mozilla (developers of FIrefox), cookies have information relevant to websites a user visits. They may store PID (phone numbers, emails, etc.) if the user entered this information into a website. This could reasonably happen if the user entered information into an online form (ex: applying for membership within a certain group, or even something as simple as sharing contact information with other members of a team). Here are some potential ways this could be a threat to privacy: . An attacker compromises a user’s computer system. After establishing control, the attacker goes to the web browser files where the cookies are cached. The attacker extracts information about the user and uses it for his/her ends. | As part of a phishing scam, an attacker sets up a fake website that is a convincing mock-up of a legitimate corporate website. The user enters information as is expected. The catch is that the information is actually extracted using Internet cookies. This is known as session hijacking. | . B) The IP address of the user’s computer . This question is quite vague in my opinion, because it fails to specify if it’s talking about the private IP address (which is often somewhere in the 192.168.0.0 to 192.168.0.255 range) or the public IP address (which is used to communicate with other machines). When I’ve learned about cybersecurity, I’ve heard that public IPs should be kept a secret at all costs, so I took a look around and found this stack exchange, where someone from a large corporation encountered something similar. The accepted answer said that if attackers knew which IP addresses were being used, then they could conduct reconnaissance of their targets without an obvious trail. If the attackers aim to do a data breach, this could be a significant threat to privacy. . C) User email addresses . The email address is somewhat a piece of identifiable information, though if anyone is running their own website or applying for a job with a resume and the like, it’s probably already out there. There are a few ways malicious individuals can use this information to gain private information: . Phishing/social engineering emails (as I’ve said before) | The attacker may try to crack the password to the email. Many users use insecure passwords, and if that fails, there’s always the security questions used to reset the passwords (with attackers hoping that the users put in true information so a search engine would suffice for information gathering). After the email account is compromised, attackers will have access to private correspondence. | . D) Public keys for encryption . This one is difficult because it is not specified if symmetric encryption or asymmetric encryption is used. If the secret key for symmetric encryption is obtained by attackers, the connection is essentially compromised. Attackers can use software to monitor the connection (and extract any data sent over the connection, such as passwords and credit card numbers). They may also be able to get into the connection as part of a man-in-the-middle attack. However, if this is asymmetric, there is no cause for worry since the private key is required to decrypt the connection. Given my Google search called asymmetric cryptogrpahy “Public-Key Cryptography,” I think this is relatively safe. . Before I move on, I’ll say that the habit of corporations to harvest and sell data is another privacy concern. I believe that cookies are most closely associated with privacy issues. . 8) What are true about digital certificates for web browsers? . I probably should have paid more attention to the question. When I started looking stuff up I was somewhat surprised to be greeted by stuff I (should) already know. . i) Verify ownership of encrypted keys . This one’s a no-brainer. I helped with a certain deployment process, and yeah there was the whole HTTPS certification part for the website. To top it off, here’s the Britannica article about this topic. . 2) Ensure fault tolerance of a network connection . Apparently I forgot what fault tolerance was. According to this article I found, it’s the ability of a network to remain up despite certain problems (because keeping downtime to the absolute minimum is basically essential in today’s environment). To give a bit more context, let’s talk about HSRP (Hot Standby Routing Protocol) . . Now, this is a network with routers and switches. This might be a bit unfamiliar to some, but I’ll say a few basic things here. All the Internet traffic to the computers at the bottom of the network is usually routed through Router1 (that’s how to access Internet, and this is denoted by the label active). Now, it is possible that Router1 is unexpectedly powered off, or perhaps there is a system maintenance. If this should happen, all the traffic will be routed through Router2 instead (as indicated by the standby label). This is a demonstration of fault tolerance. . Now, take a scenario like this and apply this to a corporation that needs to keep its website running at all times. There must be configurations like this so that all of the web servers (hosting the website) may still be online in case a device (like a router) should go down unexpectedly or due to maintenance. . I could go on and on about this, but the key thing here is to notice that I didn’t say anything about encrypting the connection between the client and the server or anything about digital certificates. Because that’s not what fault tolerance is about. Fault tolerance is about keeping the network running at all times. . 13) In which situation would it be better to use creative commons licenses over copyright for an e-book? . i) Make the e-book freely downloadable ii) Prevent people from sharing copies of the book on P2P networks iii) Allow people to use and modify the book . The interesting part about creative commons is that there are multiple licenses. There is a general theme of the following . Others may distribute and build upon the work | Users must give credit to original author | Some licenses may restrict to non-commercial purposes | Some licenses require remakes/modified works to keep the same license | One license prohibits modified works entirely; one license prohibits distribution of modified works | .",
            "url": "https://leonard514.github.io/FastPage/notes/MCQ3reflection",
            "relUrl": "/notes/MCQ3reflection",
            "date": " • Mar 3, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "OOP Hack 1",
            "content": "A few notes: . Apparently the teachers thought it would be a good idea to do age and date of birth for me. It seems all I have to do is integrate everything. | . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2004, 12, 31) age = calculate_age(dob) print(age) . 18 . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # Getter + Setter for classOf, is largely a test. Based off previous codes. @property def classOf(self): print(self._dob.year + 18) return self._dob.year + 18 #@classOf.setter #def classOf(self, classOf): #self._classOf = classOf # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;classOf&quot; : self.classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . JSON ready string: 1865 {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;classOf&#34;: 1865} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$PPLDLb13bFSgSwAF$ea169c4ff72ec8c4a71b8bd09afeb11e929873237a015861bcda740433c0e2dc&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11)} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$PPLDLb13bFSgSwAF$ea169c4ff72ec8c4a71b8bd09afeb11e929873237a015861bcda740433c0e2dc,dob=1847-02-11) .",
            "url": "https://leonard514.github.io/FastPage/jupyter/2023/02/03/OOPhack.html",
            "relUrl": "/jupyter/2023/02/03/OOPhack.html",
            "date": " • Feb 3, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "College Board MCQ Reflection",
            "content": "The following are some notes about a few questions that I worked on. . Question Number Correct? Explanation . 1 | Yes | I was silly and initially didn’t realize that the code segment checking if x was the maximum was disconnected from the code segment checking if y was the maximum. As such, if x was the maximum, z would be displayed as the maximum since the conditional statement of y being greater than x would fail to pass, making the else condition execute | . 10 | No | Need a boolean expression equivalent to num ≥ 15. An answer I had selected (num &gt; 15 AND num = 15) is inherently false, and an OR operator is required instead. I likely lost the point since I wasn’t paying attention to the operator within answer I was selecting, or the answer itself. This was likely a careless mistake. | . 42 | No | This one was a bit tricky; I understood that a simulation can be used to test designs before real-life prototypes are used, as well as the safety of those designs without having to use a crash test. This saves money. Option III was a bit confusing since I thought that this would mean showing the simulation to the customers (which I would expect to be too technical for most people to understand). However, it seems that the presentation of this design can be made user-friendly. I should probably account for this. | .",
            "url": "https://leonard514.github.io/FastPage/notes/MCQ2reflection",
            "relUrl": "/notes/MCQ2reflection",
            "date": " • Jan 28, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Topic 5 reflection",
            "content": "5.1 Reflection . Questions are pasted below for context . Come up with three of your own Beneficial and corresponding Harmful Effects of Computing | Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? | Let’s use a table to answer the first question. . General Topic Beneficial Application/Effect Harmful Application/Effect . Computers can calculate more quickly and more accurately than humans. The discussion here will apply specifically to calculated trajectories. | Computing can be used for greater feats in astronomy coupled with an increase in safety. For example, using a computer to calculate a trajectory to get man on Mars would have less room for error than a human calculation (the existence of errors in the calculations of students in math classes should sufficiently explain this). Computers could also assist in mapping trajectories for space probes. | Increased accuracy of calculated trajectories could increase the accuracy of weapons systems (ex: UAV drones firing missiles), which in turn would result in increased death in a conventional war (since all parties would likely have access to computers at this point in human history). Of course, nations around the world will be forced to implement this since it would be necessary for national security. | . Self-driving cars | Increased convenience on part of the driver (who doesn’t have to drive). Computers have shorter reaction times than the driver, and this can be utilized to prevent accidents. Will likely deprecate traffic infractions (assuming the car is configured to drive under the speed limit). | Any computer connected to the Internet is susceptible to compromise by attackers. As such, attackers can potentially escalate their actions beyond compromising sensitive data to a point where their actions result in deaths. It is probable that eventually a car’s computer would have enough data capacity to store the entire world map independently of the Internet in the future, but attackers may find other ways to attack these systems. Cybersecurity is a constantly evolving field. | . Digital Maps | Added convenience in navigation around unfamiliar areas through automatic route mapping and marking current location. Paper maps require users to orient themselves with their surroundings and plan their own routes, which can consume time. Digital maps can also account for traffic/accidents and adjust routes accordingly (paper maps can’t do that) | Digital maps of the entire world could potentially expose important classified sites of national governments (ex: Area 51). This could potentially present national security issues unless those sites are censored on all versions of all digital maps. | . Time to address the elephant in the room, namely the second question. Since this has been a personal issue, I thought it would be best to respond to the issue in the most thorough way possible, and that method is through the use of formal research papers. Note that since video games are often said to have drug-like effects, many of these papers will go into the deep end and make open comparisons. . Experiment 1 | . This should download a PDF of a study. . Notes on Experiment 1: . Despite the title, this is not actually a comparison between game users and non-game users. This is actually a comparison on the effect of video games on the dopamine receptors of ordinary people compared to people who are recovering from drug addiction. | The study showed that the dopamine receptors of normal people were significantly impacted by a motorcycle video game, whereas the dopamine receptors of former drug users were not affected as much. The study posited that this was because the drugs released greater amounts of dopamine over time, which decreased the sensitivity of the receptors later. . | Compilation 1 | Study 2 | . That should download a PDF with a filename in Chinese characters (the study is in English). I chose this study from the compilation website since it was the study with the greatest sample of people involved. Studies with low sample size do not have good integrity since outliers/variations have greater effect on the results. You’ll probably need to look up a lot of field-specific vocabulary (as is often the case for these kinds of studies), including neuroscience and statistics. Here is a more reader-friendly summary of the study: . There is a wavelength related to brain activity which takes 3/10 of a second to appear after a stimulus. | The internet addiction group exhibited increased latency and decreased amplitude of this wavelength, which is often observed in different types of addicts. | After the addicts were treated, the latency decreased but the amplitude remained low. This suggests that partial recovery is possible but Internet addiction can permanently damage the nervous system. | . At this point it is safe to declare that the connection between dopamine issues and technology use is no parent conspiracy. . 5.2 Reflection . Before I talk about the impacts of the digital divide on the lower classes, I’d like to point out that cybersecurity is a crucial consideration when uplifting other people through access to the Internet. It would be imprudent to provide the poor access to computers without also helping them learn to ensure those computers are secure, because otherwise their data could be compromised by malicious individuals. . Here are some questions (copy-pasted for context) . How does someone empower themself in a digital world? | How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. | Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? | For the first question, learning how to secure one’s own computer is strictly necessary for digital empowerment. People without the ability to secure their own computers are at risk of having their personal information stolen by attackers. After this, one may be able to look up reference guides in the field of their choice to supplement their learning in the workforce. . For the second question, one can teach others how to secure their own systems by running a cybersecurity-related club, help others with coding projects, or simply teaching someone how to research online. I find greater satisfaction with one-on-one support than supporting a group of students, mostly since I can guarantee that a given student would get the help he/she needs. . For the third question, Del Norte has done a fair job in distributing chromebooks to students who do not have computers. There are also computer systems available for use in the library. When I took 3D Computer Animation as a Freshman (mainly to get my arts graduation requirement), Mr. Askegreen provided MacOS systems to work on the projects in class (working on projects at home required a personal computer with the software installed, though it was reasonably possible to complete the projects with the given class time if you were paying attention and/or you didn’t go overboard; I tend to do the latter). The use of ContentKeeper as a Wi-Fi blocker has legitimate uses (such as preventing students from seeing illicit content online or downloading malicious software), but it sometimes blocks websites that I try to access when researching how certain commands work (for this class). This can be annoying for students who do not have a VPN and/or a PC. It is imprudent to remove ContentKeeper since this may expose students to malware or other illicit content. If it is possible for the IT team to take steps to allow sites that provide documentation on how harmless commands work (for the purposes of computer science classes), this step could be taken. Otherwise, I do not have alternatives to suggest since an alternative could cause larger problems. . 5.3 reflection . I performed some further research into the matter since I’d rather be sure about my conclusions than make guesses in the dark. You’re going to need access to web.archive.org to access the content since some URLs have been taken down/become redirects. . HP published a response to this video stating that the facial tracking software functions by tracking the color contrast between the eyes and the upper cheek/nose area. As such, it is logical the tracking software fails for people with darker-colored skin since there is a decreased color contrast in this case. In a followup post, the makers of the video admitted that this was meant to be for humor. They were surprised that the video went viral. They believed that the issue is due to a glitch (not racism). . Of course this issue should be fixed since this would allow all to experience equal computer functionality. In order to have provided a better outcome, HP could have tested people with more diverse appearances, especially those people who would most strain the facial recognition technology (ie least color contrast; to ensure the technology works in the most cases possible). If this fails, then a different method of facial recognition is recommended. . 5.4 reflection . A potential crowdsource idea for this class could be a compilation of student code sorted by programming language, by project, and by functionality. This could potentially be used for students who are looking for examples or ways to implement desired functions. This may be implemented through a GitHub Repository published by the class instructors. | Del Norte can crowdsource computer science projects potentially by coming up with project ideas/requests (which could be posted on a school website after implementation). This website could ideally have a bug-reporting feature so that students can forward any issues to the developers of the code. This would ensure that final projects would function appropriately for all inputs (including extreme/unexpected inputs) | . 5.5 Reflection . Types of licenses Open Source MIT License: | . People who come into possession of the software can modify the software for private use or commercial use (the latter for money). People may also distribute the software freely. | The license notice must be attached to all copies of the software | There is no warranty on the software and the developer is not liable for any damages resulting from the software. - Creative Commons Zero v1.0 Universal | . | 5.6 Reflection . Some PII I’ve seen on Computer Science Principles projects include names, dates of birth, | My feelings about PII and personal exposure are as follows: I looked up my first and last name on Google, and I pulled up information about my father. This is logical because he shares my name and since he’s had more public accomplishments compared to me. The websites pulled up include his LinkedIn, the website of his financial/retirement planning firm, and his facebook account. | I have always felt discomfort whenever someone posts about me on social media. I believe that my experiences should be personal, not easily accessible to the eye of the public. I believe that my experiences should not serve to be public entertainment. But perhaps this is a fringe idea uncommon among the masses. | I only have one social media account (LinkedIn). At this point I’ve done nothing other than list my accomplishments on a cybersecurity team (since I heard LinkedIn is important for employment). I may have also put some other information on it (date of birth?). | . | Good passwords should be at least 14 characters long and include letters of both cases, numbers, and symbols (including spaces). They should not be based on words in any language. Switching out letters for symbols (ex: @ for a) is not recommended either since password cracking tools have been demonstrated to account for this. Bad passwords are missing one or more of these traits; re-used passwords are inherently bad since attackers who manage to compromise one account have effectively compromised all accounts by that point. There are a few forms of authentication that exist other than simple passwords. Multi-factor authentication often sends a text message or email to a different account that is used to authenticate. This should be used with care; multi-factor authentication could potentially expose other accounts, which if insecure, could be compromised. Multi-factor authentication also oten sends a 6-digit PIN, which could potentialy be brute-forced by attackers. | Biometric authentication is becoming increasingly prevalent. Many people say that biometric authentication is more secure than password authentication. Regardless of whether this is true, I would always be skeptical if I am told that an authentication system is infallibly secure. Of course biometric systems have vulnerabilities as well, so exercising care is crucial! | . | Symmetric encryption uses a single key to encrypt and decrypt the data sent over the Internet; asymmetric encryption uses a public key and a private key | | I’ve never fallen for a phishing scheme. I’ve been phished a few times though. There’s been one instance where an attacker on Discord texted me to get some Nitro (actually, I think it was a friend who had been compromised and the malware was configured to send itself to all the contacts of whoever it compromised). Of course the URL was fishy, so I didn’t fall for it. I wasn’t even interested in Nitro to begin with, so the phisher didn’t pick a good target. I’ve also been texted twice to renew my Netflix subscription. I don’t even have a Netflix account, so that attack was ineffective. |",
            "url": "https://leonard514.github.io/FastPage/notes/t5reflection",
            "relUrl": "/notes/t5reflection",
            "date": " • Jan 27, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Create Performance Task Grading",
            "content": "Alright, where to start? I got three weeks worth of work here. Apparently I’m supposed to grade 10 create performance task submissions and compare them to college board. I guess the following is below . Week number Submissions . Week 1 | Submissions 1-2 | . Week 2 | Submissions 3-6 | . Week 3 | Submissions 7-10 | . The rubric is attached for reference. There are also some prompts to be aware of. . Alright, now I’ll start Week 1 I guess . Week 1 Work . Submission 1 . Expect this to be a bit rough since this is my first one. I’m usually quite harsh, and I’m expecting College Board to be pretty lenient. Alright, let’s see what’s here. . Reporting Category | Student Score | Student Comments | College Board Score | Comments about College Board’s Score | . Program Purpose and Function | 0 | Video appropriately shows program input of triangle side lengths and outputs of trig values in neat table. The written response includes the inputs and outputs, a certain functionality of the code through the output (trig table and side ratios). It is difficult to tell if program purpose is confused with program function, though it seems it is. | 0 | Pretty much the same as what I said. The video demonstrates input and output, and the response appropriately describes input, output, and program functionality (but not program purpose). | . Data Abstraction | 1 | A list and its fulfilling of the programs purpose are clear. The list, however, is used to store potential outputs (namely the type of triangle), not inputs. The list is named appropriately. The data in the list is represented clearly. I’m going to assume using an output-storage list is not going to be a problem. | 1 | Includes two code segments, namely the data in the list and the data being accessed from the list. The list is named and the data is identified | . Managing Complexity | 1 | A list is shown as managing output complexity. The student posits that without the list, the types of triangles will have to be put in the return statements, meaning the types of triangles supported are not all in one place. This solution seems to be plausible, as does the use of the list. The student notes that with a list, modification of code is easier since the types of triangles are found in one place. | 0 | Putting all the outputs in one place is not management of complexity, especially since the return statements is a simple replacement. We’re looking for something different here. Perhaps I have an idea. The student never showed the code behind the trig table scheme, and though each value shown requires but a simple calculation, there are 18 outputs to manage. A list could probably be used to manage complexity in this instance. | . Procedural Abstraction | 1 | The code segments clearly show a student-developed procedure with three parameters (each are essential); the procedure is called soon after it is defined. The student identifies what the procedure does (outputs the ratio of the entered triangular sides) and connects the procedure to the program’s function, namely its output being required as part of the user-received output | 1 | The procedure is written and called, with three parameters. The functionality and contribution to the program is stated | . Algorithm Implementation | 0 | The student makes a line-by-line explanation of what the algorithm does, though there is no explanation of the overall function of each portion of code (in other words, each line is explained separately). This may make it difficult to understand the function of certain portions of the algorithm until Question 3d is reached. There is sequencing, selection (two if statements), and iteration (depending on if the triangular sides can be simplified). Unfortunately, when explaining the for loop in the code, the student claims that the index will decrease from the maximum of previously defined constants (A, B, and C), when in reality it will decrease from the minimum of those constants (uses the python min(A, B, C) command). Therefore, I cannot award the point even if there was a solid line-by-line explanation, because the code described does not match the description. | 1 | Looks like College Board wasn’t paying attention and missed the error. Under normal AP grading conditions where administrators are given little time to grade hundreds of exams, this would be somewhat understandable. However, it’s a little surprising that the scores don’t get reviewed before they’re posted as examples on the official website. | . Testing | 1 | This one is a bit difficult to work with. The student gives two different inputs and proceeds to state that the first conditional statement (which checks if the given integers are as simplified as possible) is checked for both of them. For the second call, the student also references the remainders conditional statement (in the for loop), which is executed since the first conditional statement failed to pass for the second call. The student is accurate to state that the first if statement is checked for both arguments, and technically part of the code is executed for both calls (that being the first conditional statement). I think I’ll let it slide since the way the algorithm treats the two inputs overall is different. | 1 | Two calls with different arguments are described, which result in different code segments being executed. The student identifies the output of each call. | . Kind of messy as expected. I guess it’s time for Round 2. . Submission 2 . Reporting Category | Student Score | Student Comments | College Board Score | Comments about College Board’s Score | . Program Purpose and Function | 1? | Response 3ai nails the purpose (entertainment). The video demonstrates the ability of the user to use a mouse to draw starting tiles, which then behave according to Conway’s game of life. The output is in the form of the changing tile patterns on the screen. The video does not demonstrate the keyboard input (space, p, r), though this is specified in the written response. I’ll take mouse input as a sufficient showing of input in the video. | 1 | Pretty much the same as what I said | . Data Abstraction | 1 | In blocky. Nice. OK, gotta look for that list. The student says there’s a startGrid, currentGrid, and nextGrid. This is an identification of the name of the lists, whose purpose (according to the written response) is to store the status of the 10800 cells on the screen using booleans (0 = dead; 1 = alive). The student says there are three lists to prevent overwriting issues as the program cycles through each generation. There are two code segments provided, and it is clear when the lists are being modified and how they are used to define program purpose. The definitions of the lists are not shown, probably since each list is 10800 elements long. However, the first procedure shows how the initial values of the elements in startGrid are set (through mouse input). | 1 | Similar to what I said, but only the first list startGrid is considered in scoring. Apparently College Board didn’t use the second program code segment since everything required (the list being used as part of fulfilling program purpose) was fulfilled in the first segment. | . Managing Complexity | 1 | The student highlights the need to manage 10800 cells. Managing 10800 variables is impractical, so a list must be used. The procedure is able to change the elements of the list from 0 to 1 or vice versa. | 1 | Same as what I said | . Procedural Abstraction | 1 | A procedure replaceList is defined in the first code segment and is called in other procedures. The procedure has two parameters which will be used to copy the contents of lists onto other list to save the grid positions. The student identified how the procedure will contribute to the functionality of the program. | 1 | In addition to what I said, College Board identified what the student said about the procedure contributing to functionality: it can store cells in a generation, copy them over to another list, and to recall previous generations. | . Algorithm Implementation | 0 | There is sequencing, selection (many if statements), and iteration (where one list is copied to another list). The student gives a general overview about how the algorithm works. However, there is not a detailed, step-by-step explanation. | 1 | No need for a line-by-line explanation. It seems an explanation based on segments of the code is sufficient, which in this case described nested if-else statements identifying which list will be copied from, and then which list will be copied to. | . Testing | 1 | Two call to replaceList are identified, one with parameters 0 and 1 (being current and replacement), and one with parameters 2 and 1. In both instances, the procedure checks the list being copied from, and the list being copied into. The results are identified (in the first call, the startGrid overrides the currentGrid; in the second call, the nextGrid overrides the currentGrid) | 1 | Pretty much the same, but College Board quoted the exact parts of the student response that met the criteria (as usual). The student elaborated on how the procedures would interact with the parameters. | . Week 2 Work . Submission 3 . Reporting Category | Student Score | Student Comments | College Board Score | Comments about College Board’s Score | . Program Purpose and Function | 0 | The video demonstrates input on a screen that appears to be a gaming console, with buttons which appear to be activated on-click (it’s clear a web browser is open, after all). There are several animals on the screen, and the student uses an on-screen keyboard (which is arranged in alphabetical order) to type the names of the animals that appeared on the screen using the buttons. The letters typed appears as output, as well as whether the student was right or wrong upon submission. In the written response, the student confuses input and output, as well as program functionality and program purpose (though both are present in the response) | 0 | Same as what I said | . Data Abstraction | 0 | There are two program code segments: one with the list animalImages with images of animals, and another segment with animalList but with the animal names in text form. For the sake of scoring, animalList will be considered. The code segments fail to show how the list fulfills the program’s purpose since only the list itself was provided, so the student already lost the point before the rest of the response. The student names the list animallist and claims the list contains both the animal names and the animal images, which is false. | 0 | College Board points out that the list is never used in the provided code. | . Managing Complexity | 0 | The student claims the list allows for storage of more than one variable, and that without the list, defining more variables will be necessary and make the code longer. With the small scale of this project, making more variables is not necessarily harder than making the list. It is unclear if the list manages complexity in the program. | 0 | The College Board did not seem to accept the response about defining more variables. | . Procedural Abstraction | 0 | The student has two program segments: one with the procedure evaluateGuess, and one segment where this procedure is called. The student describes what the procedure does (compare a user’s guess to the animals in the list and determine if it is correct). The student tries to state how the function contributes to the program, but this seems like a restatement of what the procedure does. | 0 | The College Board sees that the response is missing explanations about how the procedure contributes to overall functionality | . Algorithm Implementation | 0 | There is sequencing, selection, and iteration in the procedure. The student’s explanation about how the procedure works is even more generalized than that of Submission 2, in that the student fails to reference the code (relying on a general explanation of how it works). | 0 | The biggest emphasis about describing the algorithm is that someone else can recreate it. There are many aspects of the algorithm the student did not explain, including the sound effects and the output text. | . Testing | 1 | The student identifies two calls to the function dog and mouse, where the condition in each call is the same (if the inputted answer was one of the animals in the list). The outputs are different (the dog output was getting a point, whereas the mouse output was getting a strike), so the differing outputs may be sufficient for getting different code segments to execute. | 1 | Honestly there’s not too much to say about this. The student identified two arguments, the conditions checked, and the differing outputs… | . Submission 4 . Reporting Category | Student Score | Student Comments | College Board Score | Comments about College Board’s Score | . Program Purpose and Function | 1 | In the video, the student inputs words via keyboard in accordance with provided prompts. The student then sets a few presets regarding the poems that will be outputted, including how many poems there will be and if any articles will be included. The terminal outputs randomly-generated poems that consist of the inputted words. The response provides some program purpose (exploring creativity through expression of poetry) and elaborates on the function (poem generation) using the inputs of words (which output poems) | 1 | The video demonstrates input, output, and functionality, as does the written response. The written response also elaborates on program purpose | . Data Abstraction | 1 | The code segments include a defined list (with the stored data of user input). That list is then utilized in a procedure (where it is renamed due to parameter conventions). The list is named nounList (called wordList as a parameter of the procedure selectWord). The student identifies what data is in the list (nouns) | 1 | Same as I said. Changing the name of the list when passing it as a parameter is of importance. | . Managing Complexity | 1??? | The student manages the complexity of random generation of nouns. In Response 3biv, the student mentions the nouns must be in specific locations in the poem. This implies nouns must be randomly generated independently of other word types. The student posits that without a list, a difficult random variable selection scheme must be implemented consisting of if statements with conditions controlled by randomly generated integers (one if statement for each integer). The solution without the list is impractical, and the response points this out. | 1 | In addition to managing complexity, the hypothetical response to not using a list is taken seriously. | . Procedural Abstraction | 1 | There is a student-developed procedure createPoems with 4 parameters nList, vList, aList, and aSetting. This procedure is called during the output section of the code. The student identifies the contribution to the program’s function as compiling the poems based on the number requested and if the student requested articles. The student is able to describe what the procedure does:0 it makes a variable to count number of poems generated, makes an empty string, and uses conditional statements to generate poems with or without articles | 1 | The response has the procedure with 4 parameters, and it contribute to the overall function since it uses input | . Algorithm Implementation | 0 | A weakness in the student’s response is that the procedure createPoems depends on the procedures articlePoem and noArticlePoem, which are not defined within the given code segments. As such, replicating the code is impossible, and any replication attempts will likely be significantly different compared to the original code. | 1 | The response explaining how the segment works was fairly detailed. It appears creating the procedures called within a procedure is not required in recreating the algorithm, which is a bit strange. This might have something to do with limited response space. I guess I’ll take it. | . Testing | 1 | The student identifies two calls with different arguments; one call with articles and one call without articles. The student says the same conditional statement is checked (the one from response 3ci, which checks the aSetting), but different conditions passing cause different outputs. The first call will result in a poem output with articles, whereas the second call will result in a poem output without articles. The written response references line numbers that are missing in the code segment submissions. This may cause scoring discrepancies. | Pretty much the same as what I said |   | . Submission 5 . Reporting Category | Student Score | Student Comments | College Board Score | Comments about College Board’s Score | . Program Purpose and Function | 0 | The video shows some user input with buttons. The user interacts with drop-downs to pick two characters, and then click a button to see a winner. There is the output of the winner as well as the stats of each character. The written response appropriately identifies input, output, program function, but program purpose seems to be mistaken for program function. | 0 | I’m kind of running out of things to say here. The student said the program purpose was to find the winner in a fight between two Marvel characters, but this is clearly the function. | . Data Abstraction | 1 | JavaScript in blocky. Seems like someone used code.org. Regardless, there seems to be a list firstCharacterList, which seems to be overwritten by data from a pre-existing list characterPowers each time the user selects a new character. The written response identifies the list and where it is used (as a parameter in a procedure; the student doesn’t specify that the parameter name needs to be different from the list name). The response also identifies the data in the list (the stats of each character and the URL of an image) | 1 | Yeah. I guess this establishes that students don’t have to show the College Board the data to establish how data is stored in a list. Yeah, the grading is pretty lenient. | . Managing Complexity | 1 | The students states that using a list allows for condensing the amount of variables required to be defined, and also prevents the function from requiring too many parameters. The student states that if there wasn’t a list, a variable would need to be defined in place of each element of a list and the function would have many more parameters. In addition, the variables would have to be added to get the average score for each character. Using lists greatly simplifies the process. | 1 | Yep, reducing the number of parameters is managing complexity. | . Procedural Abstraction | 1 | The procedure has two parameters, which are two lists (each corresponding to the two characters), and the second code segment has the procedure called when the student clicks the Winner_Button. The student is able to identify what the procedure does (compares the average statistics of the two characters and changing the winner screen to depict the character with the higher average), or a tie if applicable. The student says this contributes to program function by determining the winner in a battle between the two characters (notice the overall context added here). | 1 | Yep, I guess just a tip about telling if a student talked about the procedure adding functionality to the program is stating what it does in context… | . Algorithm Implementation | 1 | The algorithm contains sequencing (lines to execute), iteration (a for loop used to add the sum of the character’s statistics by summing the relevant elements of each character’s corresponding lists), and selection (if statements which modify the winner screen based on which character has the higher average). The student makes a line-by-line explanation about how the procedure works, which may allow someone else to replicate the procedure if the data in the lists were given | 1 | College Board just copy-pasted the student’s response here. I guess they consider the procedure independently of everything else and intentionally overlook any dependencies (ex: list data, other procedures) which the developer might have to give to someone else before replication is possible. That’s probably due to space limitations in the response, which in turn is due to time limitations the AP admins have to grade all these responses. | . Testing | 1 | The student gives tests for two parameters: one call with Vision as the first character and Bishop as the second character, and the second call with Carnage as the first character and Venom as the second character. The student specifies the part of the conditional statement in the procedure that will be tested; for the first call, the first part (where the first character has a greater average stat) is executed, whereas for the second call, the third part of the conditional (associated with a tie) is executed. The appropriate outputs are then stated (a winner screen with Vision for the first call, and the tie screen for the second call) | 1 | Running out of things to say here. College Board pretty much says what I said about this point. I guess the only thing I really have to say is that they’re not too picky about grammar (but I’ll still make sure my responses are polished). | . This is starting to get a bit smoother now. . Submission 6 . Reporting Category | Student Score | Student Comments | College Board Score | Comments about College Board’s Score | . Program Purpose and Function | 1 | The video shows a game OCTORDLE where the student tries to guess the 8-letter word. Clicking on the turtle starts the game, where the student gets 6 guesses to type (input) the 8 letter word. After each attempt, the program outputs the word with highlighted letters; the green highlights are correct, while yellow highlighted letters are present in the word but misplaced (the words have unique letters). Red highlighted letters are not present in the word. If the student guesses correctly within 6 tries, there’s a win (otherwise it’s a loss). The written response has a program purpose of critical thinking skills. Nice. The student talks about the inputs of clicking the help button (for a guide) or a turtle (to start a game), as well as typing inputs for each guess. The output was each word with the colored highlights and a win/lose screen at the end of each game. The student then started to describe the sequence of events in the video (which I believe is not what students are supposed to do), so program functionality may not be explicitly stated. Grading this one may be tricky due to the unexpected response. I’ll just lift something directly off of College Board to help. “The function is the behavior of a program during execution and is often described by how a user interacts with it.” I guess describing the events of the video passes for program functionality since a user interacted with the program during the video. | 1 | Yeah, stating what happened in the video is a workable answer, especially since College Board is asking you to do the same thing twice (demonstrate inputs, outputs, and program functionality) | . Data Abstraction | 1 | The student identifies the list as guesses, which according to the first code segment is cleared when the game starts. Each answer is appended into guesses as they are inputted, and in the second program segment, it seems the length of the list is used as an index to check when the maximum number of incorrect guesses is exhausted (lose condition). The student says the data in the list represents all the user’s word inputs. It seems this list fulfills all criteria for Row 2, but how it is used has ramifications for Row 3. | 0 | Apparently the data in a list has to be accessed, so indexing lists don’t fulfill the criteria. | . Managing Complexity | 0 | The student states that without the list, each guess would have to be stored in a separate variable and that the 6 guess limit would fail to be enforced. However, it is easy to set an index variable that increases by 1 on each guess, meaning that there is an alternative which is actually easier to implement (since the index variable doesn’t store all the responses). It doesn’t seem like the responses stored in the list are utilized in any manner. | 0 | Index variables don’t manage complexity. The student also refers to a nonexistent list. | . Procedural Abstraction | 0????? | There are two code segments, one with the procedure isiscorrect? and one code segment where this procedure is called. The student describes its overall contribution to program functionality as a checker (if the correct word/letter positions are in each guess). It is difficult to tell if the point is met here, especially since it seems only the first sentence in 3.c.iii is relevant to the question. | 1 | Apparently, saying the algorithm is needed every time a user makes a guess is talking about the algorithm’s contribution to the program, perhaps by establishing its significance. I thought that statement was irrelevant at first, probably since I was used to ignoring statements like those on essays. This is different. I’ll be on the lookout for statements that establish significance in the future. | . Algorithm Implementation | 0 | There is appropriate sequencing (block of code), selection (when determining how color to highlight a word), and iteration (where each letter of a word is checked and highlighted). There are some issues with the explanation, namely that it claims that there is no output if there is an input of less than 9 letters (but if the input is 8 letters, the program apparently functions normally). It seems more accurate to say that the algorithm will not have output for inputs of at least 9 letters and accept any input less than 9 letters. Regardless, the explanation goes on to talk about the conditional statements assigning letter highlights and about how this is iterated for each of the 8 letters. It then talks about changing the screen upon winning or losing, and mentions running out of guesses. The number of guesses (6) is not mentioned in the description, which may cause deviation if someone made a full-blown knockoff of the official game (13 guesses). I could be picking on trivial matters. | 1 | I guess College Board failed to pay attention again. The conditional statement is certainly different from how it is described in the written response. The written response claims the statement will reject inputs less than 9 letters, when in reality it will reject inputs of at least 9 letters. | . Testing | 0 | This one is hard, namely because specific arguments are not given (rather, highly generalized arguments are given). The student has a call with a right letter in the right position and a second call with the right letter in the wrong position. Upon reviewing the call from 3c, it seems these aren’t actually calls since the correct form of argument is an entire 8-letter word. As such, even though different parts of the procedure are executed for each letter and the result of each execution on the letter highlighting differs (green in the first instance, yellow in the second instance), the student does not get a point in this row. | 0 | Yeah, College Board also noticed that these weren’t arguments. They did consider the other points separately, however. | . I wanted to find this program and test what happens when you input a word less than 8 letters long, and I found it here. I inputted the word break, and it seems that if the word runs out of letters then it just fills in the last space with copies of the last letter. There’s a few other quirks: . Inputting unknown characters will duplicate the previously-used letter on the display, though the program still detects when the true values of the inputs fail to match | Inputs greater than 8 characters will still count towards failed inputs | Inputting numbers will map them to the corresponding letters of the alphabet (1 is a, 2 is b) | . Week 3 Work . Submission 7 . Reporting Category | Student Score | Student Comments | College Board Score | Comments about College Board’s Score | . Program Purpose and Function | 1 | The video shows the student inputting keyboard commands into a terminal, which outputs a rock-paper-scissors prompt. If the student doesn’t take an option, the prompt is re-used until the student picks an option. The computer then chooses and option and may win, lose, or draw, after which a prompt allows the student to play again. In the written response, the student says the program was for entertainment and decision making. The user describes the function as the user picking rock, paper, or scissors, and the computer picking one. It’s a classic. The inputs are types as Rock, Paper, or Scissors, while the outputs are the results (win/lose/draw) | 1 | Not much else to say here. This may seem obvious, but printing text to the terminal is a form of output. | . Data Abstraction | 0 | A list called RPS is made (shown in code segment 1). The second code segment compares the variable yourPlay (implied to be user input) with cpuPlay (computer’s choice). The written response says the list RPS contains the three options which the computer can randomly select; unfortunately, the code segments don’t show a random element in the list being defined as cpuPlay, so this doesn’t get the point. | 0 | Yep, second code segment doesn’t show data being accessed from the list, even though it actually is in the program. The lesson here is to remember to upload the right segments of code. | . Managing Complexity | 0 | The code segments fail to show how the list is being used to manage complexity since it fails to show how it is used to assign a random element to cpuPlay. In addition, the proposed alternative, where the computer randomly generates a number between 1 and 4 exclusive (where the numbers become placeholders for each rock-paper-scissors option) can only result in 2 integers (2 and 3), so the simulation of rock-paper-scissors with this alternative fails. | 0 | In terms of managing complexity, randomly picking elements from a list doesn’t count. | . Procedural Abstraction | 0 | The first code segment includes the procedure rpsGame with parameter yourPlay. Sure enough, there is the randomization of the cpuPlay variable that was needed for the point in Rows 2 and 3. The second code segment demonstrates the procedure being called. The student describes what the procedure does (namely saving user input, which passes through a series of conditional statements resulting in output based on the user input and computer input). The closest statement found about how the procedure contributes to the overall program functionality is that it “allows for the program to execute smoothly.” I don’t know if this works. Probably not. | 0 | Yeah, that doesn’t work. Probably needs to imply something along the lines of the function being called many times. If the function is just called once, why did you define it? | . Algorithm Implementation | 0 | The program has plenty of sequencing and many conditional statements. No iteration in the form of for loops, however. The student describes the first parts of the programs clear enough, but is a bit vague when talking about all the conditional statements. Perhaps mentioning that they behave in a similar manner to rock-paper-scissors would have been sufficient. | 1 | Pay attention to recursive functions (which is essentially the entire procedure). The student can play the game again by responding yes, which essentially calls the function within itself. | . Testing | 1 | The student identifies two calls to the procedure: one where the argument was “Rock,” (with the computer choosing “Paper”) and a second call with argument “Paper” (with the computer choosing “Rock”). The student identified that a different conditional statement was satisfied and executed in each case. For call 1, there was a lose output, whereas for call 2, there was a win output. | 1 | A bit of a disclaimer, the computer’s choice is not an argument in the function. Honestly should be careful not to make a procedure where a randomly generated value becomes just as important as arguments inputted into the system. | . Submission 8 . Reporting Category | Student Score | Student Comments | College Board Score | Comments about College Board’s Score | . Program Purpose and Function | 1 | A code.org video project. Hangman. There’s lots of mouse input and clicking buttons. There’s also a space where the student types letters. The output comes either with the letter appearing on the screen or the lives decreasing by one. The student shows it’s possible to input special characters and more than one letter, but this will always lose a life. The written response says the program has a purpose of building vocabulary. In practice, this statement likely applies only to young children since the game supports 5-letter words. The response also demonstrates program functionality (where the user can input letters, and the program either outputs the letter or takes a life). The response demonstrates keyboard input for the letters and an output of a letter where it belongs in the word or the win/lose screen. | 1 | Yeah, program purpose can be pretty much anything here, no matter how qualified it might be. | . Data Abstraction | 1 | This one’s interesting. The student identifies the list as letOfGuessWord, which stores the letters that the users will guess. The first code segment seems to configure for the lives and the word used. A pre-existing list allWords is filtered for 5-letter words, which are appended to words5. A random 5-letter word (element) is selected, and each letter becomes an element in letOfGuessWord. This shows how data is stored. This data is utilized in a for loop which seems to check if the input (stored in letter) is the same as any of the letters. This shows how the data in the list is used to fulfill program purpose. | 1 | I don’t really have anything to say here. College Board said the same thing I said. | . Managing Complexity | 1? | The list in the program code segment is clearly used to manage complexity by splitting each of the 5-letter words into component letters (hangman players guess one letter at a time). The written response says that without a list, each letter would have to be stored in a separate variable and the variables will have to be looped through to check if the inputted letter matches a letter in the word. As far as I can see, This would cause repetition of commands, which proves that the list makes the program easier to maintain. | 1 | One part of managing complexity is scalability. If a word longer than 5 letters was ever implemented, the list would support longer words. | . Procedural Abstraction | 0? | There is a program code segment with the procedure guessWords with a parameter of letter. The procedure is called in the second code segment upon detecting a change of the value inside the input box. The written response says the function compares the letters of the random word to the inputted letter; if correct, the letter appears where it belongs, whereas if incorrect, the user loses a life. The closest response to how the procedure contributes to program functionality is that it “does most of the work.” This is difficult, since this statement does seem to establish a degree of significance but doesn’t imply the procedure is run repeatedly throughout a game or talk about how it contributes to program functionality. | 1 | This part gets a bit confusing. I guess the first sentence establishes appropriate context. | . Algorithm Implementation | 1 | There is sequencing in the lines of code; selection through if statements checking for a correct guess, an incorrect guess, a win condition, and a lose condition; and iteration in a for loop as the inputted letter is compared to each letter in the base word. The user describes setting the variable lives to 6; however, this happens outside of the procedure. The description is pretty detailed, though returning the check variable only occurs during a win condition. | 1 | Yep, this explanation is pretty detailed. I guess College Board doesn’t like looking for discrepancies, even if the scoring guidelines tells them to. | . Testing | 0 | This one’s weird. The student has calls with two arguments: one with 1 and one with h. In both cases, the student says the conditional statement tested was the if statement within the for loop, which compares the argument to all the letters within the word “hello” (the word generated by the computer). The student says the result of the first call is false since 1 is not in hello, whereas the result of the second call is true. However, these are not the output results (the result of the first call is losing a life; the result of the second call is the h being displayed in the first spot) | 1 | A result does not need to consist of output. It seems something as simple as changing a variable could be identified as a result | . Submission 9 . Reporting Category | Student Score | Student Comments | College Board Score | Comments about College Board’s Score | . Program Purpose and Function | 1 | The video shows user input in the form of interaction with a dropdown menu to see information about states in the U.S. The output comes in the form of state information, which includes population, area, and the capital city. Other information also becomes available via further mouse input. The written response says the program’s purpose is to help users learn information about the U.S. states, which could be used to memorize information. Function is identified as the user selecting a state and seeing a screen with information about the state. Input is identified as the selected state or extra forms of information (both from drop downs), while output is implicitly stated to be the corresponding information being displayed on the screen. | 1 | Yeah, this is about the only response the student did right. | . Data Abstraction | 0???? | The student identifies the list as stateList, and says the data in the list represents the state information the user will see on the information screens. In other words, this is all of the possible output text/images. The first code segment does not contain the list, whereas the second code segment shows a function where the length of the stateList is used as an index and seems to store the names of all of the states. Other lists are used to store the other forms of information. It seems the code segments were given in reverse order, and the contents of stateList are copied to list stateName, which is utilized in the first code segment to output information. There are other lists used in the first code segment, which makes the student’s claim (the list contains all of the information) inaccurate (since the list only contains state names) This is difficult to score because the code is formatted in an unexpected manner. | 0 | Yep, accurate descriptions about the data in the list is required. Also, a copied version of the list being used doesn’t count. | . Managing Complexity | 0 | The student states that without the list, “all the data would have to be coded independently.” It is unknown what this statement means, though the closest guess would be that hundreds of variables would have to be defined for each piece of information. | 0 | Yeah, the fact that I had to make assumptions shows that the student’s response was too general. | . Procedural Abstraction | 0 | The student-developed procedure updateScreen doesn’t have any explicit parameters, and it is not called in the second program code segment. The procedure is described as having a function of receiving the state input from the user and updating the screen with the correct information. It doesn’t seem to do the latter. | 0 | Also remember about the procedure contributing to program functionality (was absent in this response) | . Algorithm Implementation | 0 | The segment has a lot of sequencing and selection in the form of 52 conditional statements. Apparently the student can’t do iteration. The student points out the inefficiency of using 52 conditional statements while explaining how the algorithm works, but the description is detailed enough that someone might be able to recreate it. | 0 | The user description is missing how the indexing system works, so there’s a lack of detail | . Testing | 0 | The student identifies the function as stateInput, which actually seems to be a list. Regardless, the student says there’s a call to update the screen and a call for more information. This doesn’t seem to apply to the procedure in 3c, so this loses the point. The student’s conditions tested seem to mirror calls more closely than conditions, though the results seem to be correctly identified. | 0 | Output is not equal to the result of a procedure. I’ll have to learn that. | . Submission 10 . Reporting Category | Student Score | Student Comments | College Board Score | Comments about College Board’s Score | . Program Purpose and Function | 0 | The written response identifies the purpose as entertainment (it’s a game, after all). The described functions include the movement of the boat, the fish hook, and a score function, which keep track of the number of each type of fish caught. Described inputs are the a and d keys (output: the boat moves left/right) and the space (output: hook moves down). There is also the output of the total fish caught and the points earned at the end of the game. The video demonstrates the outputs of the boat’s movement and the fishhook, as well as the fish and points output at the end. It is impossible to distinguish keyboard inputs in the video. | 1 | Evidence of input (which is essentially output) satisfies this criteria, even if it is impossible to know what that input is. | . Data Abstraction | 1 | The list is identified as fishtypes, and is claimed to have the data of the amount of each type of fish that is caught. The second code segment shows this data being utilized as part of the code which outputs the number of each type of fish at the end of each game. From that code segment, it seems this list is actually similar to a python dictionary, in that each element stores both the type of fish (small/big/grand) and the number of that type of fish caught. The first code segment appears to show the functionality of increasing the number of fish caught for an element by 1 when a fish of that type is caught. This seems to pass. | 1 | Nothing much to say here, other than perhaps that naming conventions don’t matter here | . Managing Complexity | 1 | The list appears to appropriately manage program complexity by allowing for the use of a for loop (rather than writing out the same command 3 times with three different variables). The student says that without the list, multiple variables would be required for the type of fish and their amounts, which would lengthen the program. The student also points out that the list is more scalable (more practical for larger amounts of data) than this approach. This seems to pass. | 1 | Referencing scalability is probably one of the better ways to respond to this question, especially since College Board quoted it. | . Procedural Abstraction | 1 | The first code segment shows a student developed procedure clone movement (in blocky) with 5 parameters (two y-parameters, two x-parameters, and a return state parameter). The procedure is called for generating the various fish in the program. The student says the procedure determines where each fish appears and how far it can move. The student says this contributes to program functionality by making the game more challenging since the procedure randomizes fish speed and height. This may pass. | 1 | Running out of things to say here. I guess naming discrepancies in blocky don’t matter too much; College Board saw a function clone+movement+range whereas the student saw a function clone movement | . Algorithm Implementation | 1 | There is a program code segment with sequencing (lines of code), selection (which configures what happens when the fish is touching the hook), and iteration (which results in the conditional statement being checked until the fish is caught or the game is over). The explanation says the procedure begins by randomizing the starting position of a new fish. The student then describes the conditions that the loop will stop executing before describing the loop. The student then describes what happens inside the loop: a condition is tested, namely that the fish has reached the right side of the screen. If so, the fish is teleported to the left of the screen with a random height. If not, the fish moves a random distance. This seems sufficiently detailed. | 1 | Yeah… College Board said the same thing I said. | . Testing | 0 | The calls identified are actually executions of part of the procedure, rather than calls to the whole procedure. Regardless, the condition tested (if the sprite touches the right side of the screen) is accurate, as are the results. | 0 | The conditions tested have to correspond to the parameters/call of the procedure. Also, the code is not the result. | .",
            "url": "https://leonard514.github.io/FastPage/createtask/grading",
            "relUrl": "/createtask/grading",
            "date": " • Jan 20, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "3.9 and 3.11 Hacks Blog",
            "content": "Notes . Algorithms can be written multiple ways. | Sometimes different algorithms can achieve the same results, so it’s good to accept a diversity of approaches to a problem. | Algorithms can have their nuances, however. Minor changes in the code can yield major changes in the results. | Conditional expressions can be booleans, and vice-versa. | . Algorithms . Compare python code. Do they yield the same results? . print(&quot;What did you roll on the dice?&quot;) diceRoll = int(input()) if diceRoll &gt;= 4: print(&quot;Nice roll!&quot;) else: if diceRoll &gt;= 2: print(&quot;Meh... You can do better&quot;) else: print(&quot;That was not a great roll!&quot;) . print(&quot;What did you roll on the dice?&quot;) diceRoll = int(input()) if diceRoll &gt;= 4: print(&quot;Nice roll!&quot;) if diceRoll &gt;= 2: print(&quot;Meh... You can do better&quot;) if diceRoll &lt; 2: print(&quot;That was not a great roll!&quot;) . Notes . For inputs 4, 5, and 6, the first algorithm will only print Nice roll! since it fulfills the if condition of the roll being greater than 4; the else condition is ignored. | For inputs 4, 5, and 6, the second algorithm will print Nice roll! and also Meh… You can do better. This is because these rolls will not only satisfy the if condition for the former statement (the roll is at least 4), but also that of the latter statement (the roll is at least 2). | Given the nature of input programs, it is also possible to give negative inputs (which will be treated as less than 2), and integers greater than 6 (where the above notes on 4, 5, and 6 apply). It is also possible to enter strings and numbers with decimals, though this will output an error since the input is not an integer. | . The notes then gives a potential adjustment to code block 2 to correct the logic error . print(&quot;What did you roll on the dice?&quot;) diceRoll = int(input()) if diceRoll &gt;= 4: print(&quot;Nice roll!&quot;) if diceRoll &gt;= 2 and diceRoll &lt; 4: print(&quot;Meh... You can do better&quot;) if diceRoll &lt; 2: print(&quot;That was not a great roll!&quot;) . Conditionals and Booleans . Using AND and NOT operators can be helpful. The following two code blocks (pseudocode) are identical. . IF (isHoliday) { school⟵false } ELSE { IF(isWeekday) { school⟵true } ELSE { school⟵false } } . This checks if there is a holiday. If this condition is true, the school condition is false. If false, the else condition is executed with a nested if statement about there being a weekday. If true, school is true (and if not, false). . Using AND and NOT can reduce this to a single line of code: . school⟵((NOT (isHoliday)) AND (isWeekday)) . Using the AND operator means both conditions must be true to yield true. The following are the conditions: . isWeekday (set to True) | isHoliday (since there’s a not statement, the desired condition is False) If these are met, there’s school (as is logical) | . Practice 1 . Algorithms to sum all single-digit odd numbers. Do they work as intended? . sum⟵1 counter⟵3 REPEAT 4 TIMES { sum⟵sum + counter counter⟵counter + 2 } DISPLAY sum . sum⟵0 counter⟵9 REPEAT UNTIL counter &lt; 1 { sum⟵sum + counter counter⟵counter - 2 } DISPLAY sum . Algorithm 1 starts with 1 as a sum and 3 as a counter, the first two single-digit odd numbers. 4 times, the counter is added to the sum and is increased by 2. The sum is outputted. This yields 1 + 3 + 5 + 7 + 9 (the counter is added 4 times). This seems to work as intended. . | Algorithm 2 sets the initial sum to 0 and the counter to 9. Until the counter is less than one, the counter is added to the sum and decreases by 2. The sum is outputted. This yields 9 + 7 + 5 + 3 + 1, which is intended. . | . Using different algorithms to accomplish the same task can instill creativity within a developer, which may allow them to come up with solutions to novel problems later. . Notes 2 . Algorithms can be based off an idea and can be a combination/modification of existing algorithms | Iteration: Repeating associated lines of code a set number of times or until a certain condition is fulfilled | Selection: Code is run based on a condition; multiple options are often available. | . Example algorithm: Robots . . Need to move the robot forward, turn right, move forward, turn left… . Need to reach the goal . PROCEDURE movemntSeq(n) { REPEAT n TIMES { MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() } } movemntSeq(4) . Practice 2 . Display says . IF there’s a green tag = 25% off | If there’s a red tag = 60% off | 10% tax | . Choose algorithm with selection and iteration to determine correct cost of an item . Option A . DISPLAY (“What is the cost of the item?”) cost←INPUT () IF (greenTag) { cost ← 0.75 * Cost } IF (redTag) { cost ← 0.40 * Cost } cost ← 1.10 * cost . Option B . DISPLAY (What is the cost of the item) cost←INPUT () IF (greenTag) { cost ← 0.75 * Cost } IF (redTag) { cost ← 1.10 * cost } cost ← 0.40 * Cost . Notes . Option A: If there’s a green tag, cost decreases by 25%. If there’s a red tag, cost decreases by 60%. Regardless, the cost is increased by 10% (the tax) . | Option B: If there’s a green tag, cost decreases by 25%. If there’s a red tag, cost increases by 10%. Regardless, the cost is decreased by 60% . | . Option A works as intended . Notes 3 . Modifying existing code can ease the development process . | Algorithm: Process/rule set followed in calculations/problem solving (includes computers) . | . Robot Challenge! . Notes . The algorithm is programmed so that if the robot cannot move forward, it can move right | This will result in the robot getting stuck into a loop without reaching the goal | According to the notes, adding a left-turn option should fix this issue. The algorithm should be programmed so the robot turns left when it can. | . ### Notes 4 . Forms of search: . Sequential search: iterate through all elements in a list (one-by-one). Often what humans do in real-life. | Binary search: must arrange elements of list in order. The computer starts the search by splitting the list and comparing the middle value. It then does this again for each half of the list, so each search checks 2^(n-1) elements. Requires less searches to compare all the elements. | . Practice . 1) Which is a plausible way to pattern numbers for a binary search? a. [1,4,5,2,3] b. [24,22,23,28,30] c. [5,6,7,8,2] d. [1,2,3,4,5] . Note: Only Option D is in ascending order. Therefore, this option is correct. . 2) How many checks would it take to print 20 with sequential search? . [1, 3, 4, 5, 7, 8, 10 ,20] . It will take 8 searches to print 20, since 20 is the 8th entry of the list. Sequential search will reach this element last. . 3) How many checks will it take to print 30 using binary search? . [1, 2, 3, 4, 6, 8, 9, 11, 30] . Let’s use tables. Apparently there’s an even number of entries issue . I checked two simulations and they checked the item to the left of the middle for even numbers of elements. . Check number Numbers checked . 1 | 6 | . 2 | 2 and 9 | . 3 | 1, 3, 8, and 11 | . 4 | 4 and 30 | . It will take 4 checks to get 30 using binary search . 4) Using Binary Search how many checks would it take to find the word kiwi. . [Apple, Banana, Kiwi, Mango, Strawberry] . Note: Kiwi is the middle entry, so theoretically it will be found first (in one search). The entry “kiwi” will not be found since it’s not in the list (elements are case sensitive). Rap: I did this in-class. . Final Hacks . 1) Write this boolean in form of conditional statement (IF/ELSE) stayInside⟵((isCold) OR (isRaining)) . This is in pseudocode, so I’ll use pseudocode to be consistent. . IF(isCold) { stayInside ← True } ELSE { IF(isRaining) { stayInside ← True } ELSE { stayInside ← False } } . 2) Make an algorithm utilizing selection/iteration to represent a player’s turn (in a game). Parameters: . Each player gets 4 attempts for the highest number | For each attempt, use a random number generator to select random integer from 1 to 10 | After 4 attempts, the greatest number is the score. End the turn. | . I’ll use pseudocode again just because that’s the only programming language I’ve seen in the lesson. . PROCEDURE takeTurn() { score ← 0 REPEAT 4 TIMES { temp ← RANDOM(1, 10) IF (temp &gt; score) { score ← temp } } DISPLAY(score) RETURN(score) } . 3) Make an algorithm to make the arrow reach the gray square . . The only required movements are forward movement and right turns. This is easier than the example in the notes. . IF(CAN_MOVE(forward)) { MOVE_FORWARD() } ELSE { IF(CAN_MOVE(right)) { ROTATE_RIGHT() MOVE_FORWARD() } } . 4) Make a binary search tree of the list [1,2,3,4,6,9,11,69] . Even number of entries issue. Assume the entry to the left of the middle is selected. Here’s your png. . . 5) Explain how to find the number 69… . There are an even number of elements. According to two simulations I found, lists with even numbers of elements start with the element from the left of the middle. . For search 1, select 4. This splits the list into two portions. . The left portion has middle element 2 for search two. The right portion has 4 entries and must select the element left of the middle (9) for search 2. . For search 3, the left portion is split into two portions with one element each. Select 1 and 3. The right portion is split into two portions, one with a single element (6) and one with two elements (pick left element 11) . For search 4, 69 is selected. . 6) Make a diagram explaining how you found the list (using equations, not the tree) . I’ll assume this question is referring to element 69. This is a little bit confusing. Honestly this is just about the same thing as my response to (5), just being formatted in something akin to a flowchart . . 7) Arrange the strings in order used for binary search . [“store”, “Market”, “Walmart”, “Target”, “Ralphs”] . I’ll arrange alphabetically. I don’t know if this is supposed to be case-sensitive. . [“Market”, “Ralphs”, “store”, “Target”, “Walmart”] . Then I found Khan Academy and Princeton University and even Wikipedia and apparently I misunderstood binary search. The CollegeBoard makes those search trees to work with all possibilities, but not all the elements in the tree are actually searched in a single instance (only those leading to the desired element). The way binary search works is it compares the list’s element to a desired element. Say the desired element is greater than the element in the list. That element and all other elements are eliminated since they would surely not contain the entry. Repeat. 8) Explain why binary search is more efficient than sequential search. . Binary search is more efficient than sequential search since there are less required checks to find a given element of a list. This is because binary search eliminates around half of a list’s (nonmatching) elements per search, whereas sequential search eliminates one nonmatching element per search. . 9 (open question)) [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree . Note; The list is sorted in descending order. This is fine. . .",
            "url": "https://leonard514.github.io/FastPage/sprint/hacks5",
            "relUrl": "/sprint/hacks5",
            "date": " • Jan 6, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "3.16 Hacks Blog",
            "content": "Notes . Simulation = abstraction of complicated natural phenomena… in computers . Removes pedantic details, increasing the managibility of the situation | . Good for following reasons: . Safety (ex: stress-testing buildings/boats without endangering passengers) | Cutting Costs (may have potential to skip a physical prototype) | Reproducible: Due to the simplification of the abstraction (no confounding variables) | Making predictions | . Other notes . Reduced cost/risk comes with a trade-off of decreased accuracy compared to real-world situations. However, this deviation in conditions may make simulations suitable for situations where experiments aren’t. | Many random number generators aren’t actually random. They are meant to simulate imperfections (which may include air resistance influencing dice) | ex: not including weather in flight simluations, but instead tweaking speed and visibility options | . Techniques from the article . Making overarching assumptions about how much time a scan takes, how much time getting to the seller’s line, how much people need to buy tickets, etc. highly simplifies the simulation. | There are some functions (procedural abstraction) and some while loops and for loops (iteration) | There is selection (if statements) | . Final notes: . Simulations important as safety measures and are cheaper than building physical systems | There are some functions in which simulations are not required since they can be executed by simpler code (ex: finding the highest of a certain quantity) | . # Final Hacks . 3) What is not a reason to use a pseudo-random number generator when making a simulation? . A: To mock imperfections from the real world B: To save resources C: To make the simulation more accurate . Notes . Pseudo-random number generators are made to simulate real-world imperfections | Simulations are designed to save resources. Given pseudo-random number generators are needed in simulations, this may be a purpose of these generators | Simulations should ideally be as accurate as possible. However, pseudo-random number generators are simplifications. These may introduce inaccuracies to simulations. | . Option C is likely correct . 4) Which of the following is the least likely factor to be removed from a flight(air traffic) simulation for functionality? . A: Weather B: Other aircraft C: Imperfections on aircraft . The functionality of an aircraft will probably not be affected by other aircraft with the exception of two aircraft crashing into each other. That event is likely better served by a different, dedicated crash simulation. | Weather can significantly affect aircraft performance, especially wind and/or flying through clouds and turbulence. This is critical enough to make it to the simulation. | Imperfections of aircraft are likely to be simulated indirectly or not at all since they would have negligible effect on aircraft performance | . Option A is most likely correct . 5) What is not (usually) a difference between a experiment and a simulation? . A: Resources and time needed B: Factors considered C: Situation considered . Notes: . A simulation requires computational power. Experiments will usually require a lot of equipment (which may include a fully-built prototype). In addition, some prospective experiments will take time before the results can be fully attained. Meanwhile, the time inside simulations can be sped up. | Situations and Factors can be tested through both simulations and experiments. | . Option A is likely correct . 6) A car company needs to know how safe it’s customers will be if it’s new car crashes A: Simulation B: Experiment/calculation . A few notes: . An experiment would require constructing and destroying a fully functional prototype. No real lives will be threatened, however, as companies use dummies during crash tests. One prototype will be required for each test. These do occur in real life. | A simulation would require writing a computer program to simulate infinitely many crashes This will allow for more thorough safety information compared to experiments (specifically, testing more hazard variables while consuming less resources). This also occurs in real life. | . The most feasible option in this case is Option A (simulation) . 7) A environmental group wants an accurate guess on the impact the greenhouse effect will have on the environment A: Simulation B: Experiment/calculation . Option A (a simulation) would be most appropriate for this example. An experiment could have adverse effects on the climate (assuming the amount of greenhouse gasses released is substantial). Even if the greenhouse gasses have negligible environmental effects, it would be expensive to release a significant amount of gas in an experiment and it would be difficult to compare its effect since economies release high quantities of greenhouse gasses independently of the experiment. Meanwhile, the amount of greenhouse gasses in a simulation can be tightly controlled without potentially crippling the energy sector. . 9) A teacher want’s to find the average score from a final A: Simulation B: Experiment/calculation . Option B (a simple calculation) is most appropriate. This is because all the teacher needs to do to find the average score is to divide the sum of all final scores by the number of test takers. .",
            "url": "https://leonard514.github.io/FastPage/sprint/hacks7",
            "relUrl": "/sprint/hacks7",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "3.12 3.13 Hacks Blog",
            "content": "Lesson 3.12: Calling Procedures . Notes 1 . Procedure = group of commands (named) affected by parameter (input) Can be called a method or function; meant to be called during program execution (executes procedure before the next lines) | Return commands forcefully terminate procedure execution | . | . Example (CollegeBoard Pseudocode; this is robot stuff) . PROCEDURE detourRight() { ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_RIGHT() } . Practice 1 (Which is also 3.12 Hacks Part 1) . 1) Pick the best procedure based on a real-life calculation: average speed = total time / total distance . i) PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } ii) PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } iii) PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } . Notes . Option 1 has arguments for both parameters, distance and time, and divides distance by time appropriately in the display command. This is correct. | Option 2 has arguments for only distance. There is no way to input time into the procedure, so there may be issues with the execution. | Option 3 has arguments for both parameters, but divides time by distance. This is not the desired calculation. | . 2) See the given procedure in CollegeBoard Pseudocode . PROCEDURE heightenEmotions(myEmotion) { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) moreVolume ← UPPER(moreEnergy) RETURN moreVolume } . Context given: CONCAT concatenates two strings; UPPER converts string to uppercase only. Suppose the following was run: . heightenEmotions(“im mad”) . Will nothing be displayed? . This question is interesting because I cannot verify the existence of the command UPPER from the college board reference sheet. In fact, this resembles the upper() command from Python. For the purposes of the question, I’ll assume it exists and acts exactly as it does in Python (that is, it does not modify numbers, symbols, and spaces). . From the wording of the prompt “James Hunter then sees this line of code,” it is safe to interpret that the procedure was called after it was defined. As a result, it will execute normally. It will append 3 exclamation marks to the end of the im mad, make the letter characters all uppercase, and return this string to the caller. The procedure did not include any display commands, and there were no display commands after the code. Therefore, nothing will be displayed even though the code is running normally. . Answer: True. . 3) This procedure calculates carbon footprint given a set number of miles and set number of passengers for a flight. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 carbonPerFlight ← numMiles * CO2_PER_MILE carbonPerPassenger ← carbonPerFlight / numPassengers RETURN carbonPerPassenger } . This code will be used to calculate carbon footprint for one passenger on two flights: a 2451 mile flight with 118 passengers and a 3442 mile flight with 252 passengers. Which calculates the total foodprint? . 1) totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) 2) totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) 3) totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) 4) . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon . Note: The miles parameter goes first, while the passengers parameter goes second. None of the options swap these parameters. . Options 2 and 3 feature strange inputs of the parameters. The parameters must be inputted with the number of miles first, with a comma, a space, then the number of passengers. For syntax, the parameters may not be inputted any other way. As such, options 2 and 3 will not execute the procedure properly. . Options 1 and 4 input the correct corresponding number of miles and number of passengers into the corresponding flights and use the procedure and operators to get the total carbon footprint. Option 4 provides greater clarity as to which flight is responsible for the majority of the carbon footprint through the use of variables for each flight, but both options calculate total carbon footprints successfully. . Notes 2 . Procedures, like other lines of code, have the top lines executed first and the bottom lines executed last | . Practice 2 . Example: an item receives a 20% discount then an 8% tax. Find the final cost for an $80 item. . PROCEDURE applyDiscount (cost, percentDiscounted) { temp ← 100 - percentDiscounted temp ← temp / 100 cost ← cost * temp DISPLAY(cost) RETURN(cost) } PROCEDURE applytax(cost, percentTaxed) { temp ← 100 + percentTaxed temp ← temp / 100 cost ← cost * temp DISPLAY(cost) } . I fixed the display commands (previously python print() commands) and polished some variable names to ensure they correspond. . In this case, I would execute the commands in this order: . input ← applyDiscount(80, 20) applytax(input, 8) . Where input will be equivalent to the output of the first command (assuming I’m running these one-by-one in a console and not using a script). If I was to run this as a script, I would be required to add a RETURN(cost) command to end of the applyDiscount procedure. The temp variable that is set to the output of applyDiscount must be distinct from any variables used in the procedures (otherwise, the output will override those variables permanently). . The final cost of the item is $69.12 . Temperature: Use the procedure to convert 80 degrees Fahrenheit to Celsius . PROCEDURE convert_Fahrenheit(temperature) { Celsius ← temperature - 32 Celsius ← Celsius * 5/9 DISPLAY(Celsius) } . I polished up a few issues, including spelling and removing spaces from the procedure name. Anyways, execution should be simple. `convert_Fahrenheit(80)` This converts to 26.6666666... degrees celsius. # Lesson 3.13: Developing Procedures ### Notes 1 - Procedures can return values, execute statements, or both - Procedures should have descriptive yet concise names - Know potential parameters (input) There was an example I decided not to copy. I&#39;ll get on with the practice. ### Practice 1 1) Write a procedure to rotate a robot 180 degrees. Of course this is pseudocode, so I&#39;ll be sure to follow the syntax. . PROCEDURE rotateBack() { ROTATE_RIGHT() ROTATE_RIGHT() } . 2) Write a procedure to make the robot take a detour while moving left. . PROCEDURE leftDetour() { ROTATE_LEFT() MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() } . ### Notes 2 (I&#39;ll see what I can do with this) - Important to give each procedure a purpose. - Using procedures is known as procedural abstraction - Modularity: Separate a complicated program into simpler modules which can be re-used in varying parts of a program - Procedures can have multiple functions Example 1: Update a quiz grade based on a retake . PROCEDURE updateQuiz(quizAverage, currentScore, totalPoints) { tempAverage ← currentScore / totalPoints tempAverage ← tempAverage * 100 tempAverage ← round(tempAverage) IF(tempAverage &gt; quizAverage) { quizAverage ← tempAverage } RETURN(quizAverage) } . This procedure checks if a retake percentage is greater than the first percentage. If so, the quiz grade is updated. A few notes of interest: - The **round** command does not exist in the [CollegeBoard Pseudocode guide](https://apcentral.collegeboard.org/media/pdf/ap-computer-science-principles-exam-reference-sheet.pdf). For the purpuses of this exercise, I&#39;ll assume it functions equivalently to [Python&#39;s round()](https://www.w3schools.com/python/ref_func_round.asp). - There is a logic error in this function, where the new grade is rounded before being compared to the old grade. As such, two scores of 87.5% (for example) would result in the new quiz score being rounded to 88% and inflating grades by at most 0.5% when no performance improvement was observed. ### Practice 2 ![](/FastPage/images/fourweeksprint/zig.png &quot;The exercise&quot;) Given procedure: . PROCEDURE moveSanta() { move_left() move_forward() move_forward() move_right() move_right() move_forward() move_forward() move_left() move_left() move_forward() move_forward() move_right() } . Note: the commands **move_left(** and **move_right()** do not exist. I&#39;ll have to come up with a new procedure which accomplishes the intended movements. I&#39;ll then execute code under the assumption that reaching the goal terminates execution. . directionList ← [“r”, “l”, “r”] . PROCEDURE zigZag() { FOR EACH item IN directionList { IF(item = “r”) { REPEAT 2 TIMES { ROTATE_RIGHT() MOVE_FORWARD() MOVE_FORWARD() } } ELSE { REPEAT 2 TIMES { ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD() } } } } . ROTATE_LEFT() MOVE_FORWARD() zigZag() . This should start by rotating Santa left and moving him forward. The procedure has the character make L-shaped movements depending on the given directions. If the given direction is right, Santa will rotate right and move forward two times, which is effectively two spaces to the right and two spaces backward with perspective to the original direction. Having a left directional input works similarly, except all rotations are to the left. # Hackathon ![](/FastPage/images/fourweeksprint/procedure1.png &quot;Challenge 1&quot;) This looks like a challenge of making procedures for line courses without repeating **MOVE_FORWARD()** . PROCEDURE forwardMarch(n) { REPEAT n TIMES { MOVE_FORWARD() } } . forwardMarch(5) ROTATE_RIGHT() forwardMarch(3) . Yeah, **forwardMarch(n)** is pretty simplistic. It moves forward the amount of times you want to. Useful if you want to avoid repeating **MOVE_FORWARD()** nine times. For the next challenges including the hacks, I will re-paste **forwardMarch(n)** since it will probably be very useful. ![](/FastPage/images/fourweeksprint/procedure2.png &quot;Challenge 2&quot;) Here I&#39;ll paste my procedure and also try something else. I&#39;ll always assume the initial direction is up. . PROCEDURE forwardMarch(n) { REPEAT n TIMES { MOVE_FORWARD() } } PROCEDURE moveRight() { ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() } . moveRight() forwardMarch(5) moveRight() forwardMarch(3) ROTATE_LEFT() forwardMarch(2) . The **moveRight()** procedure does what you would think it does. It also preserves original directionality of the robot. Here comes a grade challenge. Update the quiz score with these variables: - Initial Score is 50% - Retake is 56 of 60 points This exercise is pretty much a repeat of the updating quiz scores procedure from the lesson. Given procedures are literally meant to be re-used in programs, I&#39;ll paste a procedure directly from my notes above (while getting rid of the rounding feature to remove logic errors). Kudos to CollegeBoard for making the procedure (yeah... it was in blocky, so they probably wrote it). . PROCEDURE updateQuiz(quizAverage, currentScore, totalPoints) { tempAverage ← currentScore / totalPoints tempAverage ← tempAverage * 100 IF(tempAverage &gt; quizAverage) { quizAverage ← tempAverage } RETURN(quizAverage) } . newScore ← updateQuiz(50, 56, 60) DISPLAY(newScore) . I explained this procedure in my notes # Final Hacks ### 3.12 Part 2: Basically pulling a bunch of old procedures from the first 3.12 practice but whatever 1) Find the output of the procedure (polished from the original for your convenience) . PROCEDURE find_a() { c ← 9 b ← 9 * 9 a ← b * c DISPLAY(a) } . Note: **c** is 9, and **b** is 9 times 9 or 81. **a** is **b** times **c**, or 9 times 81. This yields an output of 729. Note that the procedure was not called, however. 2) Find the output of the procedure (assuming it is called) . itemCost ← 173 tax ← 10 PROCEDURE applytax(cost, percentTaxed) { temp ← 100 + percentTaxed temp ← temp / 100 cost ← cost * temp DISPLAY(cost) } applytax(itemCost, tax) . Note: some variable names were changed to prevent conflicts. A line was also added to divide **temp** by 100 (second line in the procedure) to adjust percentages to decimals. What this procedure does is adds the percent tax to 100 and divides by 100 to get the decimal form. It then multiplies the item&#39;s cost by this number to get the final cost, which is displayed. In this case, this calculates a 10% tax/price increase on a $173 item. I also executed the procedure. Running this block of code [here](https://board.dan.onl/) yields an output of 190.3 3) (no prompt given, but I would assume it is) Convert 103 degrees Fahrenheit to Celsius using the given procedure . Temper ← 103 PROCEDURE convert_Fahrenheit(Temper) { Celsius ← Temper - 32 Celsius ← Celsius * 5 / 9 DISPLAY(Celsius) } convert_Fahrenheit(Temper) . This procedure is clearly meant to convert Fahrenheit to Celsius. It uses two facts: 0 degrees Celsius is 32 degrees Fahrenheit, and that a 5 degree increase in Celsius is a 9 degree increase in Fahrenheit. To answer the question, 103 degrees Fahrenheit is 39.44444444... degrees Celsius. ### Hacks 3.13 1) `Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game` Gotta love that sports jargon. Honestly this doesn&#39;t make too much sense to me. But in a generic sense, there&#39;s a rate and a competitive scenario. Update the top rate if it&#39;s beaten. . PROCEDURE updateTop(toprbyardspg, currentrbyards, totalGames) { temp ← currentrbyards / totalGames IF(temp &gt; toprbyardspg) { toprate ← temp RETURN(toprate) } } . rate ← updateTop(100, 1260, 12) DISPLAY(rate) . 2) Robot Problem 3 ![](/FastPage/images/fourweeksprint/homework2.png &quot;Challenge 3&quot;) Not bad. The course was made in such a manner that I can&#39;t just use **forwardMarch(n)** to cheese the puzzle. It&#39;s not the end of marching though, since I could easily condense left and right marching into their own commands. I&#39;ll assume the initial direction is up (since this is not self-evident). Once I set up three procedures, this becomes very easy. . PROCEDURE forwardMarch(n) { REPEAT n TIMES { MOVE_FORWARD() } } PROCEDURE rightMarch(n) { ROTATE_RIGHT() forwardMarch(n) ROTATE_LEFT() } PROCEDURE leftMarch(n) { ROTATE_LEFT() forwardMarch(n) ROTATE_RIGHT() } . rightMarch(1) forwardMarch(2) rightMarch(3) forwardMarch(2) LeftMarch(2) MOVE_FORWARD LeftMarch(2) . **RightMarch(n)** essentially moves right for the specified number of squares (as the parameter), and **LeftMarch(n)** does something similar... but to the left instead. Both preserve original directionality. 3) How to define procedures in [CollegeBoard Pseudocode](https://apcentral.collegeboard.org/media/pdf/ap-computer-science-principles-exam-reference-sheet.pdf)? Use a PROCEDURE name(param1, param2, param3)... I assume the PROCEDURE is case-sensitive. As far as I know, you can name them anything you want (functionally), though it is recommended to name them descriptively and concisely. Option A: PROCEDURE MYLIST Option B: PROCEDURE MyList Option C: procedure mylist Option C has issues since **procedure** is not in all-caps; commands are often in all-caps in CollegeBoard Pseudocode. Options A and B have a difference of capitalization (and quite frankly this doesn&#39;t make a difference functionally, though variable names and function names are case-sensitive). Usually, the capitalization of B is followed with actual variables, making the first letter of each word capital. However, all the procedure commands fail to define parameters (or specify there are none using **()**)... so in all technicality, none of the options are correct (though B is the closest to convention). 4) Final robot challenge ![](/FastPage/images/fourweeksprint/homework4.png &quot;Challenge 4&quot;) Someone decided to make a convenient, straight path to the goal. Why not use it? As always, I&#39;ll assume the initial direction is up. . PROCEDURE forwardMarch(n) { REPEAT n TIMES { MOVE_FORWARD() } } ROTATE_LEFT() MOVE_FORWARD() ROTATE_RIGHT() forwardMarch(6) ROTATE_LEFT() forwardMarch(2) . We’re all getting the hang of this by now. This is simpler than exercise 3 and nothing new has been introduced. That’s it for this one I guess… .",
            "url": "https://leonard514.github.io/FastPage/sprint/hacks6",
            "relUrl": "/sprint/hacks6",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 3 Sections 8, 10 Hacks .ipynb file",
            "content": "Exercise 1: Reverse List output . I tried to recycle a while loop from a previous assignment and learned that unlike for loops, while loops do not reset the index on each iteration. I guess that&#39;s part of the dynamic checking of the conditional statement. Regardless, here&#39;s a for loop: . list = [1, 2, 3, 4, 5] #Index is zero i = 0 # For loops reset the index on each iteration. I tried a while loop and found that while loops do not reset the index. # This sets the index to the last element, second to last element, etc. by substracting one and the index from the list&#39;s length. # and making this the new index. It then prints the corresponding element. for i in range(5): i = len(list) - 1 - i record = list[i] print(record) . 5 4 3 2 1 . Exercise 2: Bubble Sort . Here&#39;s something from Wikipedia (Dec 9 9:42 AM): . Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the input list element by element, comparing the current element with the one after it, swapping their values if needed. . OK, looks like I just need to make a for loop. If a given element is greater than the next element, I swap them (likely using temp variables to catalyze the assignment process) . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] print(list) for i in list: prev = -1 for i in list: print(&quot;element number &quot; +str(list[i])) print(&quot;This is &quot; +str(i)) print(&quot;Previous is &quot; +str(prev)) if i &lt; prev: print(&quot;Switch triggered&quot;) a = list.index(prev) b = list.index(i) print(&quot;a is &quot; + str(a)) print(&quot;b is &quot;+str(b)) print(str(list[a])) print(str(list[b])) # idea from https://stackoverflow.com/questions/2493920/how-to-switch-position-of-two-items-in-a-python-list list[a], list[b] = list[b], list[a] print(str(list[b])) print(str(list[a])) print(list) prev = list[b] else: prev = i print(&quot;final list is &quot; +str(list)) . [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] element number 0 This is 9 Previous is -1 element number 1 This is 8 Previous is 9 Switch triggered a is 0 b is 1 9 8 9 8 [8, 9, 4, 3, 5, 2, 6, 7, 1, 0] element number 5 This is 4 Previous is 9 Switch triggered a is 1 b is 2 9 4 9 4 [8, 4, 9, 3, 5, 2, 6, 7, 1, 0] element number 3 This is 3 Previous is 9 Switch triggered a is 2 b is 3 9 3 9 3 [8, 4, 3, 9, 5, 2, 6, 7, 1, 0] element number 2 This is 5 Previous is 9 Switch triggered a is 3 b is 4 9 5 9 5 [8, 4, 3, 5, 9, 2, 6, 7, 1, 0] element number 3 This is 2 Previous is 9 Switch triggered a is 4 b is 5 9 2 9 2 [8, 4, 3, 5, 2, 9, 6, 7, 1, 0] element number 6 This is 6 Previous is 9 Switch triggered a is 5 b is 6 9 6 9 6 [8, 4, 3, 5, 2, 6, 9, 7, 1, 0] element number 7 This is 7 Previous is 9 Switch triggered a is 6 b is 7 9 7 9 7 [8, 4, 3, 5, 2, 6, 7, 9, 1, 0] element number 4 This is 1 Previous is 9 Switch triggered a is 7 b is 8 9 1 9 1 [8, 4, 3, 5, 2, 6, 7, 1, 9, 0] element number 8 This is 0 Previous is 9 Switch triggered a is 8 b is 9 9 0 9 0 [8, 4, 3, 5, 2, 6, 7, 1, 0, 9] element number 0 This is 8 Previous is -1 element number 2 This is 4 Previous is 8 Switch triggered a is 0 b is 1 8 4 8 4 [4, 8, 3, 5, 2, 6, 7, 1, 0, 9] element number 5 This is 3 Previous is 8 Switch triggered a is 1 b is 2 8 3 8 3 [4, 3, 8, 5, 2, 6, 7, 1, 0, 9] element number 6 This is 5 Previous is 8 Switch triggered a is 2 b is 3 8 5 8 5 [4, 3, 5, 8, 2, 6, 7, 1, 0, 9] element number 5 This is 2 Previous is 8 Switch triggered a is 3 b is 4 8 2 8 2 [4, 3, 5, 2, 8, 6, 7, 1, 0, 9] element number 7 This is 6 Previous is 8 Switch triggered a is 4 b is 5 8 6 8 6 [4, 3, 5, 2, 6, 8, 7, 1, 0, 9] element number 1 This is 7 Previous is 8 Switch triggered a is 5 b is 6 8 7 8 7 [4, 3, 5, 2, 6, 7, 8, 1, 0, 9] element number 3 This is 1 Previous is 8 Switch triggered a is 6 b is 7 8 1 8 1 [4, 3, 5, 2, 6, 7, 1, 8, 0, 9] element number 4 This is 0 Previous is 8 Switch triggered a is 7 b is 8 8 0 8 0 [4, 3, 5, 2, 6, 7, 1, 0, 8, 9] element number 9 This is 9 Previous is 8 element number 6 This is 4 Previous is -1 element number 2 This is 3 Previous is 4 Switch triggered a is 0 b is 1 4 3 4 3 [3, 4, 5, 2, 6, 7, 1, 0, 8, 9] element number 7 This is 5 Previous is 4 element number 5 This is 2 Previous is 5 Switch triggered a is 2 b is 3 5 2 5 2 [3, 4, 2, 5, 6, 7, 1, 0, 8, 9] element number 1 This is 6 Previous is 5 element number 0 This is 7 Previous is 6 element number 4 This is 1 Previous is 7 Switch triggered a is 5 b is 6 7 1 7 1 [3, 4, 2, 5, 6, 1, 7, 0, 8, 9] element number 3 This is 0 Previous is 7 Switch triggered a is 6 b is 7 7 0 7 0 [3, 4, 2, 5, 6, 1, 0, 7, 8, 9] element number 8 This is 8 Previous is 7 element number 9 This is 9 Previous is 8 element number 5 This is 3 Previous is -1 element number 6 This is 4 Previous is 3 element number 2 This is 2 Previous is 4 Switch triggered a is 1 b is 2 4 2 4 2 [3, 2, 4, 5, 6, 1, 0, 7, 8, 9] element number 1 This is 5 Previous is 4 element number 0 This is 6 Previous is 5 element number 2 This is 1 Previous is 6 Switch triggered a is 4 b is 5 6 1 6 1 [3, 2, 4, 5, 1, 6, 0, 7, 8, 9] element number 3 This is 0 Previous is 6 Switch triggered a is 5 b is 6 6 0 6 0 [3, 2, 4, 5, 1, 0, 6, 7, 8, 9] element number 7 This is 7 Previous is 6 element number 8 This is 8 Previous is 7 element number 9 This is 9 Previous is 8 element number 5 This is 3 Previous is -1 element number 4 This is 2 Previous is 3 Switch triggered a is 0 b is 1 3 2 3 2 [2, 3, 4, 5, 1, 0, 6, 7, 8, 9] element number 1 This is 4 Previous is 3 element number 0 This is 5 Previous is 4 element number 3 This is 1 Previous is 5 Switch triggered a is 3 b is 4 5 1 5 1 [2, 3, 4, 1, 5, 0, 6, 7, 8, 9] element number 2 This is 0 Previous is 5 Switch triggered a is 4 b is 5 5 0 5 0 [2, 3, 4, 1, 0, 5, 6, 7, 8, 9] element number 6 This is 6 Previous is 5 element number 7 This is 7 Previous is 6 element number 8 This is 8 Previous is 7 element number 9 This is 9 Previous is 8 element number 4 This is 2 Previous is -1 element number 1 This is 3 Previous is 2 element number 0 This is 4 Previous is 3 element number 3 This is 1 Previous is 4 Switch triggered a is 2 b is 3 4 1 4 1 [2, 3, 1, 4, 0, 5, 6, 7, 8, 9] element number 2 This is 0 Previous is 4 Switch triggered a is 3 b is 4 4 0 4 0 [2, 3, 1, 0, 4, 5, 6, 7, 8, 9] element number 5 This is 5 Previous is 4 element number 6 This is 6 Previous is 5 element number 7 This is 7 Previous is 6 element number 8 This is 8 Previous is 7 element number 9 This is 9 Previous is 8 element number 1 This is 2 Previous is -1 element number 0 This is 3 Previous is 2 element number 3 This is 1 Previous is 3 Switch triggered a is 1 b is 2 3 1 3 1 [2, 1, 3, 0, 4, 5, 6, 7, 8, 9] element number 2 This is 0 Previous is 3 Switch triggered a is 2 b is 3 3 0 3 0 [2, 1, 0, 3, 4, 5, 6, 7, 8, 9] element number 4 This is 4 Previous is 3 element number 5 This is 5 Previous is 4 element number 6 This is 6 Previous is 5 element number 7 This is 7 Previous is 6 element number 8 This is 8 Previous is 7 element number 9 This is 9 Previous is 8 element number 0 This is 2 Previous is -1 element number 1 This is 1 Previous is 2 Switch triggered a is 0 b is 1 2 1 2 1 [1, 2, 0, 3, 4, 5, 6, 7, 8, 9] element number 1 This is 0 Previous is 2 Switch triggered a is 1 b is 2 2 0 2 0 [1, 0, 2, 3, 4, 5, 6, 7, 8, 9] element number 3 This is 3 Previous is 2 element number 4 This is 4 Previous is 3 element number 5 This is 5 Previous is 4 element number 6 This is 6 Previous is 5 element number 7 This is 7 Previous is 6 element number 8 This is 8 Previous is 7 element number 9 This is 9 Previous is 8 element number 0 This is 1 Previous is -1 element number 1 This is 0 Previous is 1 Switch triggered a is 0 b is 1 1 0 1 0 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] element number 2 This is 2 Previous is 1 element number 3 This is 3 Previous is 2 element number 4 This is 4 Previous is 3 element number 5 This is 5 Previous is 4 element number 6 This is 6 Previous is 5 element number 7 This is 7 Previous is 6 element number 8 This is 8 Previous is 7 element number 9 This is 9 Previous is 8 element number 0 This is 0 Previous is -1 element number 1 This is 1 Previous is 0 element number 2 This is 2 Previous is 1 element number 3 This is 3 Previous is 2 element number 4 This is 4 Previous is 3 element number 5 This is 5 Previous is 4 element number 6 This is 6 Previous is 5 element number 7 This is 7 Previous is 6 element number 8 This is 8 Previous is 7 element number 9 This is 9 Previous is 8 final list is [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] . Now quite frankly, this was a confusing process for myself. You may notice that my code is actually a for loop nested inside a for loop with an excess of print commands for debugging purposes. Here&#39;s what&#39;s going on. I&#39;ll explain the nested for loop first before explaining why it&#39;s necessary to nest it... since that will make sense later. . Before the nested for loop is created, the variable prev is set to negative one. I&#39;ll explain why that exists once I introduce the iteration. . For every element in the list, I print the element number, what the element is, and what the previous element is. This is helpful for debugging. For a reason I&#39;m not aware of, the element number tends to get bugged. But it&#39;s only debugging so it should be OK as long as I know what&#39;s going on (and with all the other commands functioning as necessary, it&#39;s not that hard) . I then use an if statement with the condition that the present element i is less than the previous element prev. prev was set to negative one initially since the first element in the list cannot be swapped with a previous element, and negative one will always cause the condition to be False. . In the first iteration, the else statement will always be executed, which sets the variable prev to i for use in the next iteration. . If the if condition is fulfilled, a print statement is executed to let me know that this happened. I then set variable a to the index of the previous element and b to the index of the current element. I print them for good measure, as well as the values of the corresponding elements. The next command switches the elements in the actual list (see the source in the comment). I then print the element values in opposite order (the values appearing in the same order verifies that the elements were switched). I then print the list to verify the swap, and then set prev to the value of the second element of the pair, which will be the first element of the next pair. . Now that I&#39;ve done a line-by-line explanation, I&#39;ll make a general summary of the functionality of the nested for loop. The nested for loop iterates through a list and swaps two elements if the first element is greater than the second. On one execution, the loop is very good at moving single elements to the other side of the list (as is the case with element of value 9). . However, elements of lesser value fall out of focus even if they are not in order. The original for loop was not nested and I was left with the problem of the element with value 8 being stuck at the beginning of my list (since I moved on from it in the first iteration of the loop). As such, I needed to find a way to execute this loop multiple times to move 8 up beside 9. I therefore nested this for loop inside another for loop that was to execute once for each element in the list. This guarantees the loop would execute enough times to move the greater-valued elements to the end of the list. I&#39;ll now give a condensed version of the code below . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] print(list) for i in list: prev = -1 for i in list: if i &lt; prev: a = list.index(prev) b = list.index(i) # idea from https://stackoverflow.com/questions/2493920/how-to-switch-position-of-two-items-in-a-python-list list[a], list[b] = list[b], list[a] prev = list[b] else: prev = i print(&quot;final list is &quot; +str(list)) . [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] final list is [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] .",
            "url": "https://leonard514.github.io/FastPage/jupyter/3%20week%20sprint/2022/12/31/3.8_3.10hack.html",
            "relUrl": "/jupyter/3%20week%20sprint/2022/12/31/3.8_3.10hack.html",
            "date": " • Dec 31, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Vocabulary Notes",
            "content": "Emma’s Work . Bits: A bit or a binary digit, is the smallest unit of data that a computer can process and store. A bit can be one of 2 physical states, such as either 0 or 1, yes or no, and true or false. . | Bytes: A byte is a unit of data that is eight bits long. It is used by computers to represent a character such as a letter or number symbol. . | Hexadecimal: Hexadecimal is a numbering system with base 16. There are 16 symbols or possible digit values from 0 to 9, followed by six alphabetic characters – A, B, C, D, E and F. It can be used to represent large numbers with fewer digits. . | Unsigned Integer: Numbers without + or - sign, only representing the magnitude not the direction. Used when we know that the value we are storing will always be non-negative ex: 1, 2, 3, 4 | . | Signed Integer: The default where the variable can hold positive or negative numbers ex: -1, 6, -29, 1000 | . | Floating Point: Positive or negative whole number with a decimal point. Used to represent real numbers and is written with a decimal point dividing the integer and fractional parts Ex. 1.23, 87.425, and -9039454.2, NOT 101, -3, 18203 | . | Boolean:Variable type that represents one of two values: True or False. | . a = 200 b = 33 If b &gt; a: print(“b is greater than a”) If a &gt; b: print(“a is greater than b”) . ASCII:Stands for American Standard Code for Information Interchange. ASCII was first created when all people wanted computers to be able to show was numbers, letters, punctuation, and non-printing commands(Enter, Delete, F1).. All ASCII encoded character can be represented by 1 byte, or 8 bits for a total of 2^8 = 127 different total characters. Ex. lowercase “h” character → 104 (D) → 01101000(B) | . | Unicode:today, people use emojis and new symbols like other languages and stuff and computers needed to be able to represent all that. Unicode is a new standard defining an association between characters and even more numbers. Each unicode character (utf8) is 4 bytes, or 32 bits, enough for 2^32 different characters. Most modern programming languages represent strings as utf8 encoded characters (hex) because people use these new symbols in their code, but old languages like C still associate either character type with a single byte integer Ex. “Hello” → U+0048 U+0065 U+006C U+006C U+006F | . | RGB:RGB (red, green, and blue) refers to a system for representing the colors to be used on a computer display.These 3 colors can be combined in various proportions to obtain any color in the visible spectrum. Ex. rgb(255, 0, 0) = red because red is set to its highest value (255), and the other two (green and blue) are set to 0. | . | Lossy:a technique that reduces file size by discarding less important information | Lossless: Every bit of data originally in a file remains after it is uncompressed, and all the information is restored. | . Sanika’s Work . Variables:An abstraction inside a program that holds a specific value or meaning defined by the programmer. . | Data Types: Integer- highScore (involves math, save as integer or numbers) | String- firstName (name is text, so it is a string) | Boolean- isSunny (2 options, true or false) | String- phoneNumber (no math, just numbers) | . | Arithmetic Operators: Plus indicated addition (a + b) | Minus indicates subtractions (a - b) | Asterisk indicated multiplication (a * b) | Slash indicated division (a / b) | . | Managing Complexity with Variables Lists: Allows you to complete a process for each value in the list, or store multiple values to one variable. | 2D Lists: Array within an array. You can pull single arrays through using index and variable commands. Ex: T = [[11, 12, 5, 2], [15, 6,10], [10, 8, 12, 5], [12,15,8,6]] | . | . | Dictionaries: Allows the storage or data keys and values (assigning a certain piece of data to fit the category it is assigned) . | Class: A particular data structure. . | Algorithms: An algorithm is a finite set of instructions that accomplish a specific task, us as humans, do algorithms on a daily basis. . | Sequence: A specific order a process is completed, which impacts the output. . | Selection: Programmer decides between 2 different functions . | Iteration: Repetition of a process For loop: repeats a section of code a set number of times | While loop: repearts a section of code an unknown number of times, until the code is told to break | . | Expression: A piece of syntax in coding | . Leonard’s Work . Comparison Operators Operators used in programming languages which compare two different values. These can often be used to set up statements which return a boolean value (true/false), which can be stored in variables. All examples below are in (Python)[https://docs.python.org/3/reference/expressions.html] and were checked using the bool() command, which returns the True/False output. | Operator | Function | True output example | False output example | Notes | |-|-|-|-|-| | == | Checks if two values are equal to each other | “Hrar” == “Hrar” ; 1 == 1.0 | “Hrar” == “hrar” ; 1 == 2 | If strings are compared, this is case-sensitive. Follows numerical equivalence if a float and integer is used. Cannot use leading zeros for integers/floats. | | != | Checks if two values are not equal to each other | “Hrar” != “hrar” ; 1 != 2 | “Hrar” != “Hrar” ; 1 != 1.0 | Similar to above | | &lt; | Checks if the left value is less than the right value | 1 &lt; 2 ; “zz” &lt; “hi” | 2 &lt; 1 ; “az” &lt; “hi” ; 2 &lt; 2 | If strings are compared, the string appearing last in alphabetical order is considered less. float(‘NaN’) and decimal.Decimal(‘NaN’) will yield false regardless of what they are compared to. | | &gt; | Checks if the left value is greater than the right value | 2 &gt; 1 ; “az” &gt; “hi” | 1 &gt; 2 ; “zz” &gt; “hi” ; 2 &gt; 2 | Similar to above | | &lt;= | Checks if the left value is less than or equal to the right value | 1 &lt;= 2 ; “zz” &lt;= ; “hi” ; 2 &lt;= 2 | 2 &lt;= 1 ; “az” &lt;= “hi” | Similar to above | | &gt;= | Checks if the left value is greater than or equal to the right value | 2 &gt;= 1 ; “az” &gt;= “hi” ; 2 &gt;= 2 | 1 &gt;= 2 ; “zz” &gt;= “hi” | Similar to above | | in/not in | Checks if the specified value is an element in the specified list. in returns true if the element is in the list; not in returns true if the element is not in the list. Example: List = [1, 3, 5, 7, 9, “hi”] | 1 in List ; 3 in List ; 5 in List ; “hi” in List ; “What” not in List ; “Why” not in List | 2 in List ; 4 in List ; 6 in List ; 9 not in List ; 7 not in List ; “Weird” in List | As usual, strings are case-sensitive. May be useful for conditional statements. | | . | Boolean Expressions and Selection The value of a boolean variable (True/False) can be used as conditions in selection (often known as if statements). The condition of the if statement is the boolean variable; if its value is True, the condition passes. A possible function of this is in Python code below | . | . # Assume the grade was calculated by a computer program # The bool command is here to make a boolean variable # In a larger computer program, the value was likely # generated by previous commands Grade = 89.49 isA = bool(Grade &gt;= 90) if isA: print(“Yay!”) else: print(“hmm”) . Output: hmm . Booleans Expressions and Iteration Certain forms of iteration (specifically while loops in Python) can use a boolean variable as a condition (similar to selection commands). As you may expect, the while loop executes commands until the value of the variable is false. In terms of a computer program, this could perhaps be used to execute commands critical for maintaining a certain process until that process is no longer needed. This could also potentially be used to periodically send notifications until a certain condition is met (ex: an assignment is submitted). Here’s some informal python code: | . | . num = 10 correct = bool(num &gt; 0) while correct: print(num) num = num - 1 correct = bool(num &gt; 0) . output: 10 9 8 7 6 5 4 3 2 1 . Truth Tables: A table for a logical operator (ex: AND, OR, XOR) containing each variable and all possible input and output results of that operator. | . AND TABLE: All inputs must be true to return output of true. . Input 1 Input 2 Output . False | False | False | . False | True | False | . True | False | False | . True | True | True | . OR TABLE: At least one input must be true to return output of true. . Input 1 Input 2 Output . False | False | False | . False | True | True | . True | False | True | . True | True | True | . XOR TABLE: Exactly one input must be true to return output of true. . Input 1 Input 2 Output . False | False | False | . False | True | True | . True | False | True | . True | True | False | . Characters The units which make up a string. These can be letters, numbers, special symbols (!@#$%^&amp;*), or even spaces. Regardless, if one types, each keystroke outputs one character. | Ex: “keyboard hi!!!” has 14 characters: 10 letters, three exclamation marks, and a space. | . | Strings A variable data type which consists of a combination of letters, numbers, and other special characters (ex: @#$%^&amp;*). They are seen inside quotation marks, and operators cannot affect any numbers in the string. stringVar = &quot;Hello World!&quot; . | “Hello World!” is a string | . | Length The number of elements in a list. Here’s an example in Python: numList = [1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1] . | This list has a length of 17 because it has 17 elements. Each element is separated by a comma. | . | Concatenation: the act of joining two strings into a single string. Often, these strings are printed to an output terminal/console. Here’s an example in pseudocode: | . concat(“tri”, “llion”) . This concatenates the strings “tri” and “llion”, making a new string “trillion”. . | Upper, Lower, Traversing Strings . The first two (upper and lower) seem to be referring to Python methods. They are quite simple. I think it would be easiest to explain with a demonstration: | . | . String = “WhYaReWeDoInGtHiS” print(string) print(string.upper()) print(string.lower()) . Output: WhYaReWeDoInGtHiS WHYAREWEDOINGTHIS whyarewedoingthis . Relatively intuitive. The upper() method changes all lowercase letters in a string to uppercase, while the lower() method does the opposite. A potential reason for this would be ensuring uniform case (especially of uppercase when making important headings like page/screen titles) . Traversing strings behaves highly similar to iterating elements in a list, except that instead of iterating through a list, it’s a string. Elements in a list are now the characters of a string. A potential application of this could be to search all strings for a specific substring. Here’s some example python code: | . #Very informative example here: #https://www.geeksforgeeks.org/iterate-over-characters-of-a-string-in-python/ String = “Thirty Trillion Dollars” for i in String: if i == “T” print(“T detected!”) . Output: T detected! T detected! . Python If, Elif, Else conditionals Python if statements execute associated lines of code if the if condition is satisfied. | If the if condition is not satisfied, an Elif statement is executed as fallback… with another condition and associated commands. | If all associated Elif conditions are not satisfied, there can be an else statement which unconditionally executes associated commands. input = input(“enter a string”) if input == “Hi”: print(“Hello World!”) print(“How are you doing today?”) elif input == “Why”: print(“That’s a good question to ask about everything that happens.”) elif input == “Who are you”: print(“I’m an anonymous guest. Pleased to meet you.”) else: print(“Have a great day!”) . | This code uses if statements and elif statements to return strings for three special inputs (“Hi,” “Why,” “Who are you”). If the input were any of those strings, the associated command would be executed. Otherwise, the command associated with the else statement (which prints “Have a great day!”) would be executed. | . | . Ishi’s Work . Nested Selection Statements: When a program can choose from many paths to lead to a result, think of flowcharts where one condition must be satisfied before another can be picked . | Python For/While loops with Range with List: There are two ways loops can be used one is with a range and the other is with a list. When using the range method a variable is iterated a set number of times based on the range (typically an integer value), while with the list method the loop is iterated based on the length of a list. . | . Range: . i = 0 while i &lt; 5: print(i + 1) i += 1 . Output: 1, 2, 3, 4, 5 . List: . list = [“a”, “b”, “c”] i = 0 while i&lt;len(list): print(list[i]) i = i + 1 . Output: a, b, c . Combining loops with conditionals to Break: Makes it so that the loop will stop as soon as a condition is met | Continue: A statement used in while and for loops which starts the code from the beginning, in the image below you can see how the “h” in “Python” was not printed since the continue statement skipped the print(letter) and made the code start from the beginning | . for letter in “python”: if letter == “n”: continue print(letter) . output: pytho . Procedural Abstraction: A model of what the code should do but it doen’t tell how to do it. It’s basically using a procedure to name the idea. . | Python Def: It defines a function and makes code simpler by allowing for the code in the function to be called . | Procedures: Code that doesn’t return a value but allows for a specific task to be completed . | Parameters: Values that are passed into functions when they are defined in addition(a + b), a and b will be given a value and that value is a parameter . | Return Values: Values that are outputed when a function is completed. An example of this was when we were using console.log(“message”) when testing in AppLab . | .",
            "url": "https://leonard514.github.io/FastPage/notes/vocab",
            "relUrl": "/notes/vocab",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "3.8 3.10 Hacks Blog",
            "content": "Practice Notes: Lesson 8 . 1) What is the counter variable and the condition? . for (var i = 10; i &gt; 0; i--) { println(i); } . The counter variable is i, which according to a web search keeps track of the number of times commands associated with the for loop are executed. This is essentially an index. . The condition that the for loop would keep running is that i &gt; 0 given that as long as this remains true, the for loop will keep executing. Keep in mind that every time the for loop executes, the value of the counter variable decreases by one. . 2) How many times will printIn be called? . for (var i = 1; i &lt;= 10; i++) { for (var j = 1; j &lt;= 10; j++) { printIn(i * j); } } . Not the best formatting… I’ll assume this second for loop is nested inside of the first for loop. . Both for loops will execute with the index starting at one and increasing by one each time until the index is over 10. Since the j for loop is nested inside the i for loop, printIn() will be executed 10 * 10 or 100 times. . 3) What is the initial value? What does the while loop check? . var numRabbits = 2; var numYears = 0; while (numRabbits &lt;= 100) { numRabbits += (numRabbits/2 * 30); numYears++; } . The initial value of the variable numRabbits is 2 simply because that’s what it was defined as on the first line. . The initial value of the variable numYears is 0 since this was how it was defined on the second line. . The while loop checks if the value of numRabbits is less than or equal to 100. If this condition is satisfied, the executed command will be executed. These commands will increase the variable of numRabbits by 15 times its original value (essentially multiplying its value by 16 due to the original value also being additively present) and will increase the variable numYears by 1. . Notes After Checking . Feel free to interpret the code in terms of the situation (ex: the loop will run if the population of rabbits is less than 100) | . Practice Notes: Lesson 10 . 1) What is the output? . { lst = [&quot;your&quot;, &quot;a&quot;, &quot;very&quot;, &quot;skilled&quot;, &quot;individual&quot;] lst.append(&quot;Person&quot;) lst.pop() lst.remove(&quot;your&quot;) lst.insert(0, &quot;you&#39;re&quot;) print(lst) } . Line 1 defines the list variable | Line 2 adds element “Person” to the end fo the list | Line 3 removes the final element from the list, reverting it to its original form | Line 4 removes element “your” from the list | Line 5 adds element “you’re” to index 0 of the list (first element in Python) | Line 6 prints the output: [“you’re”, “a”, “very”, “skilled”, “individual”] | . Checker’s note: I’ll have to test if using single quotes and double quotes for string elements in the same list is compatible. . 2) Using Lists . A sequence of children in order should be represented by a list with each of the children’s names in the list as string elements in order. | The number of animals in a zoo does not need a list; only an integer variable numAnimals is required. | A list would not be required to repeatedly derive a number because this falls under the function of iteration/loops. This is true unless perhaps each of those derivatives needed to be stored. In that case, a list with float/integer elements would be useful and an append command would be added to the loop. Any such list would be pointless, however, because the derivative of a number (constant) is zero. This would result in a list with many zeros. | Pairs of school classes and the grades of each class would need a special form of list, where each element is a dictionary. This dictionary would probably match the class (type and period) with a corresponding string element and the average grade with a float element. Each class would be one dictionary element in the list. | Note: The fourth part of this question was a little bit vague. I took a bit of creative liberty with it (usually class grades rather than classroom grades are averaged). After a check, it turns out the fourth part was a fourth and fifth part jammed together. . Part 4: Key value pairs of schools and quantities | . To be honest, I’m not sure what the context of the quantities and key value pairs in this question are. This question doesn’t really make too much sense to me so I can’t answer it. . Part 5: grades of a classroom | . This makes a bit more sense. It seems we want to have a collection of the grades of all the students in a classroom. A list would be appropriate to store the student’s grades. . 3) Find the missing line. This is pseudocode . { mgAmounts ← [50, 230, 63, 98, 80, 120, 71, 158, 41] bestAmounts ← [] mgPerDay ← 360 mgMin ← mgPerDay * 0.3 FOR EACH mgAmount IN mgAmounts { IF (mgAmount ≥ mgMin) { &lt;MISSING CODE&gt; } } } . INSERT(aList, i, value) inserts value at index i in aList. All INSERT commands in the answer choices have incorrect syntax (as they have only two arguments) . APPEND(aList, value) inserts value as the final position of aList. . Option B (which appends any mgAmount satisfying the condition of being less than 120 to bestAmounts) functions correctly. . 4) Find sevenWonders . { sevenWonders ← [&quot;Aurora&quot;, &quot;Grand Canyon&quot;, &quot;Great Barrier Reef&quot;, &quot;Guanabara Bay&quot;, &quot;Mount Everest&quot;, &quot;Parícutin&quot;, &quot;Victoria Falls&quot;] sevenWonders[4] ← &quot;Komodo&quot; sevenWonders[6] ← &quot;Table Mountain&quot; } . CollegeBoard pseudocode is 1-indexed (the first element of a list has index 1) . Replace 4th element with “Komodo” and 6th element with “Table Mountain” | . Answer: sevenWonders ← [“Aurora”, “Grand Canyon”, “Great Barrier Reef”, “Komodo”, “Mount Everest”, “Table Mountain”, “Victoria Falls”] . 5) Find the output . { lst = [12,3,4,5,14,6,1,234] lst.pop() lst.append(&#39;x&#39;) lst.insert(lst[0]) print(lst.pop()) print(lst) } . I initially though print(lst.pop()) would return an error. But according to some documentation, this actually returns None. . Otherwise, knowing list contents will involve incorporating the steps . Step 1: remove last element (234) from list | Step 2: append string ‘x’ to back of list | Step 3: This command is weird because you normally specify the index of insertion before what value is inserted. As a result, running this line gets a TypeError as seen below. Due to the error, the print commands are never executed or the output is never printed to terminal. | . . ANSWER: (no output) . Now I’m fairly certain that in-class someone argued there would be actual output. I’m willing to hold a contrary position due to me running the code in a .ipynb file. . New Question: Programs intended to display total hours. Do they work? . totalMins ← 0 durations ← [32, 56, 28, 27] FOR EACH duration IN durations { totalMins ← totalMins + duration } totalHours ← totalMins / 60 DISPLAY(totalHours) } . { totalMins ← 0 durations ← [32, 56, 28, 27] FOR EACH duration IN durations { totalMins ← totalMins + duration totalHours ← totalMins / 60 } DISPLAY(totalHours) } . Program one assigns totalMins and durations. In the for loop, it adds each element to totalMins. After the loop, it divides totalMins by 60 to get totalHours, then prints totalHours. This works as intended. . | Program two assigns variables in a similar manner to program one, but in the for loop, totalHours is also calculated (using the same formula as program one). This does yield the correct totalHours but totalHours is calculated 4 times in program 2 (as opposed to once in program 1) . | . Therefore, Answer is D . Javelin thrower writing code to track distance of throws from target. Complexity can be reduced. Choose the best. . { totalDistance ← 0 targetDistance ← 90 throw1 ← 85.2 DISPLAY(targetDistance - throw1) totalDistance ← totalDistance + throw1 throw2 ← 82.8 DISPLAY(targetDistance - throw2) totalDistance ← totalDistance + throw2 throw3 ← 87.3 DISPLAY(targetDistance - throw3) totalDistance ← totalDistance + throw3 avgDistance ← totalDistance / 3 DISPLAY(avgDistance) . A) . targetDistance ← 90 throws ← [85.2, 82.8, 87.3] totalDistance ← 0 FOR EACH throw IN throws { DISPLAY(targetDistance - throw) totalDistance ← totalDistance + throw } avgDistance ← totalDistance / LENGTH(throws) DISPLAY(avgDistance) . B) . targetDistance ← 90 throws ← [85.2, 82.8, 87.3] totalDistance ← 0 FOR EACH throw IN throws { DISPLAY(targetDistance - throw) totalDistance ← totalDistance + throw } avgDistance ← totalDistance / 3 DISPLAY(avgDistance) . C) . targetDistance ← 90 throws ← [85.2, 82.8, 87.3] totalDistance ← 0 FOR EACH throw IN throws { DISPLAY(targetDistance - throw) totalDistance ← totalDistance + throw avgDistance ← totalDistance / LENGTH(throws) } DISPLAY(avgDistance) . D) . targetDistance ← 90 throws ← [85.2, 82.8, 87.3] FOR EACH throw IN throws { totalDistance ← 0 DISPLAY(targetDistance - throw) totalDistance ← totalDistance + throw avgDistance ← totalDistance / LENGTH(throws) } DISPLAY(avgDistance) . E) . targetDistance ← 90 throws ← [85.2, 82.8, 87.3] FOR EACH throw IN throws { totalDistance ← 0 DISPLAY(targetDistance - throw) totalDistance ← totalDistance + throw } avgDistance ← totalDistance / LENGTH(throws) DISPLAY(avgDistance) . Option A is the best . Defines a list throws, targetDistance, and totalDistance | For each entry in throws, displays the difference between the throw’s distance and the target distance. Adds the throw’s distance to totalDistance | After the for loop, the avgDistance is taken by dividing total distance by the length of the list | . Option B is similar to A, except that the avgDistance is calculated by dividing 3. This is not as versatile as Option A (ie it doesn’t work for lists with lengths different than 3) . Options C and D recalculate the avgDistance on each execution of the for loop (with variations similar to A and B). This would produce the same result but is not as efficient. . Option E has a logic error which sets totalDistance equal to zero at the start of each execution of the for loop. This will result in the avgDistance being a third of the final element in the list, 87.3/3 = 29.1. This is unquestionably the worst option. . Hacks . MCQ Quiz . Question 9 was fun because I managed to prove that all three loops are actually possible! This was the one where a loop should be made to iterate until a user inputs ‘quit’ . I have selected the WHILE loops answer and the Recursive loops answer, which were both marked incorrect. I can rebut the claim these answers are incorrect since I have examples of both in python that actually function. The first is recursive (which was the first solution I came up with), and the second is a while loop. . They essentially do the exact same thing: for a list with integer elements 1 through 5, it checks if the index is less than the length; if so, it prints the corresponding element. It executes an opportunity to stop iterating through the list through checking the input for “quit” and executing return if it does. It also increases i by one for each execution and uses a conditional statement to make sure the index does not stray out of range and iteration can continue. . List = [1, 2, 3, 4, 5] def hrar(i): # makes sure index does not leave # range if i == 5: i = 0 # prints list elements. Honestly if # statement not needed since # commands executed to guard the index if i &lt; len(List): temp = List[i] print(temp) # allows user to exit iteration if input &quot;quit&quot; hi = input(&quot;Input quit to stop the code. This is case-sensitive&quot;) if (hi == &quot;quit&quot;): return # Iteration! hrar(i + 1) hrar(0) . This is the while loop. At first I thought this wouldn’t work since I believed the variable used in the comparison statement (hi) would fail to update… but apparently it works in my notebook file. . # Variables! List = [1, 2, 3, 4, 5] hi = &quot;hi&quot; i = 0 # Iteration! while hi != &quot;quit&quot;: # prints element corresponding to index, increases index if i &lt; len(List): temp = List[i] print(temp) i = i + 1 # Ensures index does not leave range if i == 5: i = 0 # Opportunity to terminate iteration hi = input(&quot;Input quit to stop the code. This is case-sensitive&quot;) . The intended answer, the for loop, was actually the hardest for me. I needed to come up with a way to prevent the loop from terminating. There was also lots of output errors whenever I changed the contents of the list. Nevertheless, I managed to find a method. However, it does not have infinite capacity; rather, it has a capacity unlikely to be exhausted by human means. . # Variables! List = [1, 2, 3, 4, 5] hi = &quot;hi&quot; # Has a finite but very high range. Doubt a # human is going to exhaust this. A computer might. for i in range(999999999999999): # i resets to 0, 1, 2, 3, 4, 5, 6... on each execution. # This prevents i from leaving the list range. mod = i % 5 i = mod # Prints list entry. If statement may not be required. if i &lt; len(List): temp = List[i] print(temp) # Gives an opportunity to terminate the iteration. # break is required since this is not a function. hi = input(&quot;Input quit to stop the code. This is case-sensitive&quot;) if (hi == &quot;quit&quot;): break . Coding Hacks: See the .ipynb file . ipynb file . Hack Flowchart: This is here . .",
            "url": "https://leonard514.github.io/FastPage/sprint/hacks4",
            "relUrl": "/sprint/hacks4",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Unit 3 Sections 5-7 Hacks .ipynb file",
            "content": "For hacks, make a copy of this notebook and answer the questions or complete the code, as described in comments. Additionally, blog about any missed questions, or what you learned from this lesson. . 3.5 Hacks . Binary Practice . Using psuedocode operators determine if the statements are true or false. The number type will be indicated in parentheses. . 1. 90(D) = 1000(B) . 1000 Binary = 0 + 0 + 0 + 8 = 8 Decimal . Answer: B. False . 2. 10(D) ≠ 0110(B) . 0110 Binary = 0 + 2 + 4 + 0 = 6 Decimal ≠ 10 Decimal . Answer: A. True . 3. 56(D) ≥ 111000(B) . 111000 Binary = 0 + 0 + 0 + 8 + 16 + 32 = 56 Decimal ≥ 56 Decimal . Answer: A. True . 3. 99(D) &lt; 1110011(B) . 1110011 Binary = 1 + 2 + 0 + 0 + 16 + 32 + 64 = 115 Decimal . 99 Decimal &lt; 115 Decimal . Decimal: A. True . Now, complete the binary truth tables . AND Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 0 | . 0 | 1 | 0 | . 0 | 0 | 0 | . OR Operator Value 1 Value 2 Result . 1 | 1 | 1 | . 1 | 0 | 1 | . 0 | 1 | 1 | . 0 | 0 | 0 | . Not operator Not Value Result . Not | 1 | 0 | . Not | 0 | 1 | . . Python Practice . # Practice with these statements print(20 == 20) # How can you change the operator to print a value of False? # Here&#39;s a simple way to change the value to false: print(20 &gt; 20) x = 30 y = 20 z = 10 print(x &gt; y + z) # How can this return true by only manipulating the operator? # The following change makes the statement true: print(x &gt; y - z) # Manipulate the variables x, y, and z to make the below statement return true x = x - z z = y print(x == z) . True False False True True . 3.6 Hacks . AP Prep . 1. What is displayed by this code? . result &lt;-- 75 | IF result &lt; 80 { DISPLAY(&quot;Please schedule a retake.&quot;) } | ELSE { DISPLAY(&quot;Nice job!&quot;) } | . Nice job! | Display | Please schedule a retake. | 75 | Answer: 3. Please Schedule a Retake . Result was set to 75. Since that value is less than 80, the if condition is satisfied. Therefore, its associated command, which prints &quot;Please schedule a retake&quot; to output, is executed. . 2. How is an if statement different from an if-else statement. . Extra words. | An if statement will only go through a process if a condition is met. An if-else statement will go through code no matter the conditions. | They are the exact same. | An if statement will go through the entire code segment every single time and the if-else statement is always used in an algorithm, no matter the conditions. | If statements and if-else statements are distinct, and their differences are not merely in what words are used. . Both if statements and if-else statements will execute commands if a condition is fulfilled. . In case of the condition not being met, the if statement does nothing, while the if-else statement executes commands associated with the else. . Therefore, the answer is 2. . 3. What would be most appropriate for this situation? Ben wants to check his bank account. If his car fuel is full, he will go to the bank. Otherwise, he will go home. If he goes to the bank, he will withdraw money only if his balance is above $1000. . Note that if the first condition (having a full car) is not fulfilled, a procedure is still executed (namely Ben goes home). Therefore, an if-else statement is procedurally appropriate. . Answer: 2. If-else statement . 4. What would be most appropriate for this situation? Luke wants to play basketball. If it is sunny outside he will go to the park to play basketball. . Note that if the condition (it being sunny outside) is not fulfilled, the procedural response is not specified. This is similar to an if statement, which does nothing if the condition is not met. . Answer: 1. If statement . Using Python . animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] for i in animals: if i == &quot;shark&quot;: # What boolean value does this statement cause? print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) else: print(i) print(&quot;This is information about the habitats of these animals:&quot;) for j in animals: if (j == &quot;lion&quot;) or (j == &quot;raven&quot;): print(&quot;The &quot; + j + &quot; is a desert animal&quot;) else: print(&quot;The &quot; + j + &quot; is not a desert animal&quot;) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . lion tiger wildebeest Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand! jellyfish blobfish raven This is information about the habitats of these animals: The lion is a desert animal The tiger is not a desert animal The wildebeest is not a desert animal The shark is not a desert animal The jellyfish is not a desert animal The blobfish is not a desert animal The raven is a desert animal . 3.7 Hacks . Exercise 1 . Create dictionaries for multiple food items, with the listed specifications Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes | Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes | Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes | . | Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal | . Menu = [ {&quot;Name&quot;: &quot;Chicken Alfredo&quot;, &quot;Meat&quot;: &quot;Chicken&quot;, &quot;PrepTime&quot;: 60}, {&quot;Name&quot;: &quot;Cheese Quesadilla&quot;, &quot;Meat&quot;: &quot;None&quot;, &quot;PrepTime&quot;: 10}, {&quot;Name&quot;: &quot;Beef Wellington&quot;, &quot;Meat&quot;: &quot;Beef&quot;, &quot;PrepTime&quot;: 150}, ] for entry in Menu: if entry[&quot;Meat&quot;] == &quot;None&quot;: if entry[&quot;PrepTime&quot;] &lt; 30: print(&quot;You have sufficient resources to make &quot; + entry[&quot;Name&quot;]) else: print(&quot;You do not have sufficient resources to make &quot; + entry[&quot;Name&quot;]) . You do not have sufficient resources to make Chicken Alfredo You have sufficient resources to make Cheese Quesadilla You do not have sufficient resources to make Beef Wellington . TypeError Traceback (most recent call last) /home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb Cell 11 in &lt;cell line: 29&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=26&#39;&gt;27&lt;/a&gt; lst.pop() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; lst.append(&#39;x&#39;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=28&#39;&gt;29&lt;/a&gt; lst.insert(lst[0]) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=30&#39;&gt;31&lt;/a&gt; print(lst.pop()) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=31&#39;&gt;32&lt;/a&gt; print(lst) TypeError: insert expected 2 arguments, got 1 . Exercise 2 . Make a flowchart(here is one we used) and write pseudocode for the following scenario. . Mr. Yeung would like to grade live reviews. | He wants to see if each student has at least 2 issues on their project. If they don&#39;t they receive a score of 2.0. | If they have at least 2 issues, check that they have completed at least 5 of their scrumboard tasks. | If they have completed 5 scrumboard tasks, give the student a 2.7. If they have not completed 5 scrumboard tasks, give them a score of 2.5. If they have completed more than 5 tasks, give them a score of 3.0. | How much would a student with 3 issues and 1 complete scrumboard task receive? | . Anyways, my flowchart is on the issue. Apparently my website hates me so I&#39;ll have to paste an image . . Anyways, the student with 3 issues fulfills the first if condition (has at least two issues), so the number of scrum tasks completed is checked. Since 1 is less than the minimum of 5 scrum tasks, this student gets a 2.5. . List = [[&#39;lizards&#39;, &#39;snakes&#39;, &#39;salamanders&#39;], [&#39;sharks&#39;, &#39;whales&#39;, &#39;fish&#39;], [&#39;lions&#39;, &#39;tigers&#39;, &#39;pumas&#39;]] for i in List: for j in i: print(j) . lizards snakes salamanders sharks whales fish lions tigers pumas . List = [1, 2, 3, 4, 5] def hrar(i): if i == 5: i = 0 if i &lt; len(List): temp = List[i] print(temp) hi = input(&quot;Input quit to stop the code. This is case-sensitive&quot;) if (hi == &quot;quit&quot;): return hrar(i + 1) hrar(0) . 1 2 3 . List = [1, 2, 3, 4, 5] hi = &quot;hi&quot; i = 0 while hi != &quot;quit&quot;: if i &lt; len(List): temp = List[i] print(temp) i = i + 1 if i == 5: i = 0 hi = input(&quot;Input quit to stop the code. This is case-sensitive&quot;) . 1 2 3 4 5 1 2 3 . List = [1, 2, 3, 4, 5] hi = &quot;hi&quot; for i in range(999999999999999): mod = i % 5 i = mod if i &lt; len(List): temp = List[i] print(temp) hi = input(&quot;Input quit to stop the code. This is case-sensitive&quot;) if (hi == &quot;quit&quot;): break . 1 2 111 4 5 1 2 111 4 5 1 2 111 4 5 1 2 111 . list = [1, 2, 3, 4, 5] #Defines while loop i = len(list) - 1 while i &gt; -1: #Ensures the first entry (where i = 0) is printed record = list[i] print(record) i -= -1 #Goes to previous entry (rather than next entry) . 5 . IndexError Traceback (most recent call last) /home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb Cell 18 in &lt;cell line: 5&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; i = len(list) - 1 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; while i &gt; -1: #Ensures the first entry (where i = 0) is printed -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; record = list[i] &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print(record) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb#X23sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; i -= -1 IndexError: list index out of range . print(&quot;What did you roll on the dice?&quot;) diceRoll = int(input()) if diceRoll &gt;= 4: print(&quot;Nice roll!&quot;) else: if diceRoll &gt;= 2: print(&quot;Meh... You can do better&quot;) else: print(&quot;That was not a great roll!&quot;) . What did you roll on the dice? . ValueError Traceback (most recent call last) /home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb Cell 19 in &lt;cell line: 2&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb#X24sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; print(&#34;What did you roll on the dice?&#34;) -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb#X24sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; diceRoll = int(input()) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb#X24sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; if diceRoll &gt;= 4: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/anonymous/computer-project/FastPage/_notebooks/2022-12-05-3.5-3.7hack.ipynb#X24sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; print(&#34;Nice roll!&#34;) ValueError: invalid literal for int() with base 10: &#39;2.3&#39; .",
            "url": "https://leonard514.github.io/FastPage/jupyter/3%20week%20sprint/2022/12/05/3.5-3.7hack.html",
            "relUrl": "/jupyter/3%20week%20sprint/2022/12/05/3.5-3.7hack.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "3 weeks sprint grades blog",
            "content": "I’ll start with a highly informative table. . Topics Relevant Files Grade . 3.1-3.2 | Hacks Markdown, Python .ipynb | 1/1 | . 3.3-3.4 | Hacks Markdown | 1/1 | . Now I’ll talk about some key takeaways . Topics 3.1-3.2 . Variable names should be concise yet sufficiently describe the purpose of the variable. For example, the variable name priceApples is descriptive enough to show its purpose: storing the price of apples | There are variable types which can be appropriately applied to different situations | Boolean variables are applied to binary, true and false situations (such as whether someone is hungry) | Integer/float variables are applied to situations involving numbers, especially those that can be altered by mathematical operations (addition, subtraction, etc.) | String variables are appropriate for storage of data (in words) or identification numbers where math is not typically applied. They are enclosed in quotation marks. | Variables can be assigned different ways in different programming languages. Here are some examples: | . CollegeBoard pseudocode . numApples ← 10 . Python . numApples = 10 . It is possible to assign the value of a variable to another variable. If the variable a value is assigned to already has a value, that value is typically overwritten. Here’s an example in pseudocode: | . data1 ← 10 data2 ← 25 data1 ← data2 . In this case, the final value of data1 would be 25 since the value of data2 overwrites that of data1 in the third line. . The last takeaway is that lists can be assigned as variables. These are often put in square brackets ([]) and the entries are separated by commas. The parts of the list are called elements and can exhibit the same data types as variables. | Each element in a list is assigned an index, a nonnegative integer which is associated with the element in future commands. | It is very important to note that different forms of indexing can exist between programming languages. CollegeBoard pseudocode assigns the first element in a list the index 1, while other languages (including Python) assign the first element the index 0. | . Topics 3.3-3.4 . Lines of code in a program are executed in a specific order. This pattern is known as sequencing. | Programs often incorporate selection, where associated lines of code are executed if a condition is satisfied. Often, a different set of commands will be executed if a condition is not satisfied. These most commonly take the form of if statements in python. | Sometimes, programs need to execute lines of code on multiple elements in a list. Instead of writing similar lines of code repetitively, an iteration strategy is used. This often consists of a loop (including for loops, while loops, and recursive functions) which executes associated commands on all items in a list or repeatedly until a certain condition is fulfilled (or is not fulfilled). . | There are various operators which can apply mathematical operations on integer/float variables. | Addition (+), Subtraction (-), multiplication (*), and division (/) are identical to the operations learned in arithmetic. | The modulus operator (seen as a % in Python) performs a division operation but outputs the remainder instead of the quotient. . | There are certain string-related commands in pseudocode that are not on the exam reference sheet. Their validity and syntax quirks are therefore uncertain. | substring(string, n, m) reads a given string (or string variable) and starts at the nth character of that string. It reads m characters from that point. This output can be assigned to a variable. | concat(string1, string2) essentially results in an output of string1string2 (in other words, the strings mashed together without any spaces). This output can be assigned to a variable. | .",
            "url": "https://leonard514.github.io/FastPage/sprint/grades",
            "relUrl": "/sprint/grades",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "3.5-3.7 Hacks Markdown",
            "content": "Section 1: Informal Practice . Topic 3.5 . Here’s some vocab (copy-pasted from site) . Boolean: binary variable with only two possible values, “true” or “false” . 1) What boolean value would result be? . a &lt;-- 19 b &lt;-- 28 result &lt;-- a = b . Answer: 2. False . The values of a and b (19 and 28 respectively) are not equal. Therefore, the statement a = b should return boolean value false. . 2) What boolean value would result be? . score &lt;-- 99 average &lt;-- 99 result &lt;-- score ≤ average . Answer: 1. True . The values of the variables score and average are equivalent and both 99. This satisfies the requirement for the operator less than or equal to and will therefore render the boolean result true. . 3) What boolean value would be displayed? . type &lt;-- &quot;dog&quot; training &lt;-- &quot;yes&quot; DISPLAY((NOT (type = &quot;dog&quot;)) AND (training = &quot;no&quot;)) . To check the boolean result displayed, each statement must be checked. Given that an AND operator is used, both statements must evaluate to true for the result to evaluate as true. . i) This NOT statement returns the opposite result that type = “dog” would usually output. Given that the string “dog” was indeed assigned to type, the usual output is true and the output after the NOT statement is false . Given the AND operator is used, there is no need to check the second statement. The final output will evaluate to false regardless of what the second statement’s result is. . Answer: 2. False . Note: The makers of this question believed that since training = “no” was a false statement, two false statements through an AND operator would yield true. Only two true statements will yield a final output of true. . Topic 3.6 . Here’s some vocab (copy-pasted from site) . Algorithm: Finite set of instructions that accomplish a specific task . Now here’s some questions. . 1) What value will be displayed? . rank &lt;-- &quot;titan&quot; hall &lt;-- 14 IF (rank = &quot;titan&quot;) { DISPLAY(&quot;You like Clash of Clans a lot.&quot;) } . Answer: 1. You like Clash of Clans a lot. . The string “titan” was assigned to the variable rank. The if condition in line 3 checks if the variable rank is equal to the string “titan”. Since it is, the associated command (DISPLAY(“You like Clash of Clans a lot.”)) is executed. The DISPLAY command prints to output the string enclosed in the parenthesis. . 2) What portion of the code will run? . class &lt;-- 33 cookies &lt;-- 25 IF (class &lt; cookies) { DISPLAY(&quot;Give out cookies today.&quot;) } ELSE { DISPLAY(&quot;Do not give out cookies today.&quot;) } . Answer: 2. The ELSE portion . The first two lines assign integers to the variables class and cookies. The IF statement has the condition that the value of class is less than that of cookies. Since the value of cookies is greater than that of class, the commands associated with the ELSE statement (rather than the IF statement) are executed. . Topic 3.7 . Here’s some vocab (copy-pasted from site) . Nested Conditional: A conditional statement inside a conditional statement . Here’s some practice questions . 1) Is this an example of a nested conditional? . space &lt;-- 90 download &lt;-- 20 IF (space &gt; download) { DISPLAY(&quot;File can be downloaded.&quot;) } . Answer: 2. No . There is only one conditional statement command (an IF statement) within this portion of code. The definition of a nested conditional, which has a conditional statement inside a conditional statement, requires at least two conditional statement commands. Therefore, it is impossible for this to be a nested conditional. . 2) What does this code display? . price &lt;-- 200 discount &lt;-- 65 IF (price &gt; 100) { IF (discount &gt; 50) { DISPLAY(&quot;You can buy this item.&quot;) } ELSE { DISPLAY(&quot;You cannot purchase this item.&quot;) } } . Answer: 3. You can buy this item . The variables price and discount are assigned 200 and 65, respectively. . The first if statement checks if the value of price is greater than 100. Since 200 is greater than 100, it executes a nested conditional that checks if discount is greater than 50. Since it is, it executes the associated command to display “You can buy this item.” . Note that for prices of 100 or less, the ELSE statement will be executed since the first conditional statement will not be fulfilled. This is likely a logic error. . Section 2: Hacks . Please see this notebook .",
            "url": "https://leonard514.github.io/FastPage/sprint/hacks3",
            "relUrl": "/sprint/hacks3",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "3.3-3.4 Hacks Blog",
            "content": "3.3 Hacks Part 1 . Label steps of sequence, selection, and iteration for the given examples (at least that’s how I interpreted the question) . Example 1: . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . I’ll outline some lines: . Assigns a list to numbers | Defines evens as an empty list | Uses a for loop to iterate through each element in numbers. Steps 4-5 repeated for each element in the list numbers. | Checks if an element’s value divided by 2 has a remainder of 0 (using modulus) | If the condition passes, this element is appended to evens | print the evens list. | There is sequencing for all lines in this case, since the lines of code are executed in a certain order. . Selection is largely seen in lines 4-5, where elements from numbers are conditionally appended to evens (elements with values that have a remainder of 0 when divided by 2 are appended.) . Iteration is seen in Line 3, where associated lines of code are executed for each element in a list. . Example 2 . i = 1 starString = &quot;*&quot; while i &lt;= 5: j = 1 while j &lt;= i: print (&quot;*&quot;, end= &quot;&quot;) j += 1 print () i += 1 . Here’s line by line explanation . Sets variable i to 1. This is likely an index. | makes a string variable starString with “*” | Will execute all associated lines of code while the index i is less than or equal to 5 | Sets variable j to 1. This is likely an index. j is reset to 1 each time line 3 is re-run | Will execute all associated lines of code while j is less than or equal to i. | Will print a “*”; the end= ““ prevents the print statement from creating a new line | Increases the index j by 1. Keep in mind this change is undone each time line 3 is run. | This print() statement essentially moves to a new line of code | Increases the index i by 1. | Sequencing is seen in all lines of code since they are executed in a certain order . Selection is not largely seen in the code . Iteration is seen in Line 3 (which will execute all associated lines below until i is greater than 5) and in Line 5 (which executes associated lines 6-7 until j is greater than i) . 3.3 Hacks Part 2 . 1) Given the code segment, give the values of a, b, c, and d . a ⟵ 7 b ⟵ 1 c ⟵ 3 d ⟵ 4 a ⟵ b b ⟵ c + d d ⟵ b . I’ll make a table of changes for each line | Line | Change | |-|-| | 1 | a is 7 | | 2 | b is 1 | | 3 | c is 3 | | 4 | d is 4 | | 5 | a is b (1) | | 6 | b is sum of c and d (7) | | 7 | d is b (7) | . a ⟵ 1 b ⟵ 7 c ⟵ 3 d ⟵ 7 . 2) Given the code segment: What are the values of hot and cold? . hot ⟵ true cold ⟵ false cold ⟵ hot hot ⟵ cold . After true was assigned to hot and false was assigned to cold, hot8 (true) was assigned to cold, making both true. Assigning cold to hot (true to true) has no effect, so both are true (Answer is 1) . 3) Make two code segments with at least 5 variable definitions. Provide the answer and explain reasoning . I think these are supposed to be sequencing challenges. OK here goes. For reference I’m doing these in Python. . var1 = 987 var2 = 121 var3 = 1337 var2 = var3 - 1211 var1 = var2 % 7 varsum = var1 + var2 + var3 print(varsum) . The first three lines are rather self explanatory. I assigned these variables some values. . Line 4 is simple enough. The new value of var2 is the value of var3 minus 1211, which is 1337 - 1211 = 126. I used a calculator to avoid arithmetic errors. . Line 5 involves taking the remainder of 126 divided by 7, since this is a modulus function. Oddly enough, 126/7 is exactly 18, so the value of 0 is assigned to var1. . Line 6 involves adding all the variables (taking into account their new values). This is as simple as 0 + 126 + 1337 = 1463. . Line 7 just prints the sum I calculated. . Well here comes another challenge, which I’ll do in pseudocode to demonstrate functionalities from 3.4 . bricks ← &quot;100 million&quot; milesDriven ← &quot;fifty thousand&quot; natlDebt ← &quot;thirty-one trillion dollars&quot; worldPop ← &quot;8 billion&quot; part1 ← substring(milesDriven, 1, 5) part2 ← substring(bricks, 5, 7) part3 ← substring(worldPop, 3, 7) wordSalad ← concat(part1, part2, part3, natlDebt) DISPLAY(wordSalad) . Lines 1-4 are simple enough. Assign some values to four variables. . Line 5 assigns the first 5 characters of milesDriven (which is “fifty”) to part1 . Line 6 assigns 7 characters from bricks to part2, starting with the fifth character from bricks. This is “million” . Line 7 assigns 7 characters from worldPop to part3, starting with the third character. This is “billion” . Line 8 is a monstrosity. It concatenates each of the part variables and the natlDebt variable. This is assigned to the wordSalad variable. . Line 9 outputs wordSalad, which is “fifty million billion thirty-one trillion dollars” . To be honest, I don’t know if it’s possible to run commands inside the concat parameters, so I assigned each of the substring commands its own variable. In fact, I didn’t find any of the substr or concat commands on the exam reference sheet, which is very peculiar. Of course that only resulted in my code failing to function on an online pseudocode tester. . Sequencing Challenge: Find num1 and num2 . num1 = 3 num2 = 1 num3 = 5 num1 = num2 + num3 num2 = num1 + num3 # num2 is now the new num1 + num3 . Lines 1-3 are just defining variables. | Line 4 assigns the sum of num2 and num3 to num1. The new value of num1 is 5 + 1 = 6. | Line 5 assigns the sum of num1 and num3 to num2. The new value of num2 is 6 + 5 = 11. | . 3.3 Hacks Part 3 . Looks like this doesn’t exist. . 3.4 Hacks . Test 1. Find the output. . firstName &lt;- &quot;Bob&quot; lastName &lt;- &quot;Smith&quot; var &lt;- substring(firstName, 1, 1) name &lt;- concat(lastName, var) email &lt;- concat(name, &quot;@gmail.com&quot;) DISPLAY(email) . Lines 1 and 2 assign values to the firstName and lastName. | Line 3 has a substring command, which starts at the first character of the value of firstName and moves one character. The result (which is B) is assigned to var. | Line 4 uses a concat command, which will concatenate (or chain) the inputs. It will take the lastName (Smith) and the var (B). The resulting string “SmithB” is assigned to name | Line 5 cocatenates the name variable and the string “@gmail.com” and assigns this to email. The value of email is “SmithB@gmail.com” (this is the answer by the way) | Line 6 prints the value of email to output. | . Test2. Find the output . word1 &lt;- &quot;computer&quot; word2 &lt;- &quot;textbooks&quot; length1 &lt;- len(word1)/2 length2 &lt;- len(word2)/3 first &lt;- substring(word1, 2, len1) second &lt;- substring(word2, len2+3, len2) newWord &lt;- concat(first, second) DISPLAY(newWord) . Lines 1 and 2 assign values to word1 and word2 | Line 3: the len command counts the number of characters in a string. There are 8 characters in the value of word1 (which is “computer”). This divided by 2 is 4, which is assigned to length1 | Line 4: There are 9 characters in the value of word2 (which is “textbooks”). This divided by 3 is 3, which is assigned to length2 -Line 5 takes a substring command of the value of word1, going from the second character and reading however many characters is the value of len1. Oops, this variable doesn’t exist! word1 &lt;- &quot;computer&quot; word2 &lt;- &quot;textbooks&quot; length1 &lt;- len(word1)/2 length2 &lt;- len(word2)/3 first &lt;- substring(word1, 2, length1) second &lt;- substring(word2, length2+3, length2) newWord &lt;- concat(first, second) DISPLAY(newWord) . | . -That’s better. The value of length1 is 4, so it will take 4 characters from “computer” starting from the second character. This will yield “ompu” which is assigned to first . Line 6 takes substring of word2 (which is “textbooks”), starting with the character corresponding to 3 more than length2, which is 6. It will then take the amount of characters equal to length2, which is 3. Therefore, “ook” will be assigned to second . | Line 7 will concatenate first and second, assigning this to newWord . | . -Line 8 prints newWord, which is ompuook. .",
            "url": "https://leonard514.github.io/FastPage/sprint/hacks2",
            "relUrl": "/sprint/hacks2",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "3.1-3.2 Hacks .ipynb file",
            "content": "Lists . Lists allow for data abstraction . Variables like strings, numbers, characters, and more can be bundled together | It could be empty from the start and you can add more variables as needed | If you set one list equal to another list, or transfer data from one list to another, the data will be completely replaced. | You can also append data from one list to another, keeping the old data and adding the new data. | . Key Vocabulary . list: a sequence of several variables grouped together | variable: a way of storing information in a computer program, which could later be changed, referenced, and used | data types: a set of values and operations on those values | abstract data types: a data type whose internal representation is hidden from the client | client: a program that uses a data type | objects: a structure that can take on a data-type value | Applications programming interface (API): which is a list of constructors and instance methods or operations, used to specify the behavior of an abstract data type | . Big Ideas . Lists can store any types of elements. | In all lists operations, if a list index is less than 1 or greater than the length of the list, an error message is made and the program will terminate. | Data abstraction provides a separation between the abstract properties of a data type and the concrete details of its representation. | 1. Your turn to interact, try it now! . Modify the list to change the length to 5. . languages_list = [] languages_list = [&quot;Python&quot;, &quot;C++&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;C#&quot;] . 2. Change the following code to print out the list. . languages_list = [] languages_list = [&quot;Python&quot;, &quot;C++&quot;, &quot;JavaScript&quot;] print(languages_list) . [&#39;Python&#39;, &#39;C++&#39;, &#39;JavaScript&#39;] . 3. Change the following code to print out only &quot;Python&quot; . languages_list = [] languages_list = [&quot;Python&quot;, &quot;C++&quot;, &quot;JavaScript&quot;] print(languages_list[0]) . Python . 4. Replace contents/data of listA with contents/data from listB. . Print listA out afterward . listA = [] listA = [1, 55, 8, 2, 76] listB = [] listB = [22, 7, 13] listA = listB print(listA) . [22, 7, 13] . 5. Make 2 lists: . a list of string data | a list of number data | the length of the each list is a minimum of 4 | change the names of the lists | . listStr = [&quot;hrar&quot;, &quot;hi&quot;, &quot;why&quot;, &quot;who&quot;, &quot;how&quot;, &quot;qwerty&quot;, &quot;billion trillion&quot;] listNum = [1, 2, 10813908, 2147483647, 1234, 876687] . 6. Combine the list to contain all of the data from both lists. . Hint! Use extend or append listStr = [&quot;hrar&quot;, &quot;hi&quot;, &quot;why&quot;, &quot;who&quot;, &quot;how&quot;, &quot;qwerty&quot;, &quot;billion trillion&quot;] listNum = [1, 2, 10813908, 2147483647, 1234, 876687] listComb = listStr + listNum print(listComb) . [&#39;hrar&#39;, &#39;hi&#39;, &#39;why&#39;, &#39;who&#39;, &#39;how&#39;, &#39;qwerty&#39;, &#39;billion trillion&#39;, 1, 2, 10813908, 2147483647, 1234, 876687] . A Little Bit on Binary . A type of positional number system, with the base of 2 and uses exponents within it. | It is represented in zeroes and ones, each different column, lightbulb, or place representing a different value. From the right it starts as 2^0 which equals 1, then 2^1 = 2, then 2^2 = 4, and so on | It connects with data abstraction because the more complex data, calculating the value, is represented in binary with base of 2, however it is simplified to only show combinations of the digits zero and one. | . . Binary Hacks . Convert these binary notation to decimal notation. (the way we normally count) . The binary number 111. Click for the answer! 7 | . The binary number 1011. Click for the answer! 11 | . The binary number 1101011. Click for the answer! 107 | . Convert the decimal notation to binary notation. (You can use the Binary Math from Mr. Yeung or the one you have) . 12 Click for the answer! 1100 | . 44 Click for the answer! 101100 | . 254 Click for the answer! 11111110 | . Extra Binary Hacks if you changed your bits to 24 . Convert decimal notation to binary notation. . 57345 Click for the answer! 1110000000000001 | . 16777215 Click for the answer! 111111111111111111111111 | . 11184810 Click for the answer! 101010101010101010101010 | . Convert the binary notation to decimal notation . 101011101010 Click for the answer! 2794 | . 10011100000 Click for the answer! 1248 | . 1101001000101000 Click for the answer! 53800 | . Homework/Hacks . Consider the following code segment: . scores1 &lt;- [89, 78, 92, 63, 95, 88] | scores2 &lt;- [92, 79, 97, 63] | scores1 &lt;- scores2 | . What are the contents of scores1 after the code segment is executed?: . [89, 78, 92, 63, 95, 88] | [89, 78, 92, 63, 95, 88, 92, 79, 97, 63] | [92, 79, 97, 63, 89, 78, 92, 63, 95, 88] | [92, 79, 97, 63] | Click for the answer! 4. Because the data is not being appended from scores2 into scores1. . Consider the following code segment: . listA &lt;- [&quot;Sam&quot;, &quot;Ann&quot;] | listB &lt;- [&quot;Jamal&quot;, &quot;Tamara&quot;] | listB &lt;- listA | listA &lt;- listB | . What are the contents of listA after the code segment is executed? . [&quot;Sam&quot;, &quot;Ann&quot;] | [&quot;Jamal&quot;, &quot;Tamara&quot;] | [&quot;Sam&quot;, &quot;Ann&quot;, &quot;Jamal&quot;, &quot;Tamara&quot;] | [&quot;Jamal&quot;, &quot;Tamara&quot;, &quot;Sam&quot;, &quot;Ann&quot;] | Click for the answer! 1. Because all of the data from listA &quot;Sam&quot; and &quot;Ann&quot; replace what is in listB. So if listB replaces what is in listA, &quot;Sam&quot; and &quot;Ann&quot; will still be the only data in that list. . What is the length of this list? [&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Purple&quot;] . 5 | 7 | 6 | 4 | Click for the answer! 3. The length of the list is 6. . What is the index number of &quot;Purple&quot; in this list? [&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Purple&quot;] . 7 | 0 | 6 | 5 | Click for the answer! 4. The index count starts at 0, making &quot;Red&quot; 0 and &quot;Purple&quot; index 5. . Which of the following types of data can be stored in a list? . Boolean | String | Float | All of the above | Click for the answer! 4. Any type of data can be stored within a list. A list can contain a mix of types of data. . Which of the following variables is a float? . Apples | -106.2 | 34 | True | Click for the answer! 2. A float is a decimal number. . If a list has a length of 24 items, what is the index number of the 17th item? . 21 | 17 | 16 | 69 | Click for the answer! 3. An index count starts at 0 so the index number of a variable is one less than it&#39;s spot in the length. . A variable is permanent and cannot be changed later on. . True | False | Click for the answer! 2. False. Variables can be changed later on in the code. . Which of the following is true about the list? [&quot;Apples&quot;, 42.0, &quot;Bananas&quot;, 0.5, &quot;Avocado&quot;, -902.2, &quot;Lychee&quot;, 6.9, &quot;Orange&quot;, 7.2] . The list has floats and string variable types. | The ratio of float variables to string variables is 2:1. | The length is 9. | The index of &quot;Avocado&quot; is 4. | All of the above | 1 and 4 | 1, 3, and 4 | Click for the answer! 6. The list has floats or decimals and strings, and the length is 10, the ratio of string to floats is 1:1, and the index number of &quot;Avocado&quot; is 4. .",
            "url": "https://leonard514.github.io/FastPage/jupyter/3%20week%20sprint/2022/11/28/3.2hack.html",
            "relUrl": "/jupyter/3%20week%20sprint/2022/11/28/3.2hack.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "3.1-3.2 Hacks Blog",
            "content": "3.1 Part 1 Hacks (copied from site) . Go through the following examples and with your table discuss the best variable name and the data type for each situation and stored variable: . You want to store the best price for apples: Use a variable called priceApples which will be an integer type (so that the price could be added to/subtracted from) | You are storing true or false in a variable that asks if the classroom is cold: use a boolean variable called isCold | How do you store the ID numbers for the students in the classroom: use a list variable called IDList and store the elements as strings. Here’s an example: | IDList = [&quot;1324978&quot;, &quot;1235478&quot;, &quot;1324890&quot;, &quot;1634890&quot;] . 3.1 Part 2 Hacks (copied from site) . Please note that some of this is redundant with the previous section. . 1) You want to store the number of apples in a shop. What is the best variable name and data type? . Answer: (1) numApples, integer . This name is fairly descriptive and also allows for addition/subtraction operations in case apples are purchased or imported into the store (therefore changing the number of apples) . 2) You are storing true or false in a variable that asks if the classroom is cold. What is the best variable name and data type? . Answer: (3) isCold, boolean . A true or false value describes the boolean type variable. In addition, the variable name is descriptive of what is being measured (namely if a classroom is cold) . 3) How do you store the ID numbers for the students in the classroom? Choose the best variable name and data type: . Answer: (1) IDnumber, string . the name IDnumber is concise and is descriptive of what value is being stored into the variable. Since math is not performed on ID numbers, a string variable is appropriate. Note that this variable is appropriate to store the ID numbers of single students only. If multiple ID numbers need to be stored, a list should be created with string elements of each ID number. . 4) Is itisRainingtodayinsandiego a better option than isRaining? . Answer: (1) No . The variable itisRainingtodayinsandiego is too long and affects readability of the program. isRaining is far more concise and is almost just as descriptive as the former variable name. If there must be boolean variables for the weather of multiple cities (for example, for a weather program), a more concise form of this variable could be isRainingSD, though at some point a dictionary or array could be used to match cities to their corresponding weather conditions. . 5) Which of the following types of data is best for a true or false question? . Answer: (1) Boolean . A boolean variable contains either a true value or a false value. . 6) What is the difference between an integer and string of numbers? . Answer: (4) An integer can be changed with addition and subtraction and a string is a set number or string of letters . The answer is relatively self-explanatory, though it’s worth it to note that strings can also be made of combinations of numbers and letters (or even special characters) . Practice Scenario 1 . Suppose that a variable should be created which notes the type of device a student brings to a class. This variable should be a string variable called deviceType. Here’s an example: . deviceType = Desktop . If device type for multiple students need to be noted, a list should be used instead (using string elements) . Practice Scenario 2 . Suppose that a variable representing a student’s class grade is required. Keep in mind that a student’s grade is made up of averaged scores from many assignments and possibly grade categories. In this case, a float/integer variable called Grade should be used. If the grades of multiple students need to be recorded, a dictionary/array may be required with the student names as string elements and the grades as float/integer elements. . Practice Scenario 3 . Review scenario 2. Take scenario 2 with the additional information of trying to evaluate if each student is passing the class. For an individual student, this would probably be a boolean variable called isPassing. In order to determine the value of the variable, an if statement will likely be used. In the case of using this variable for multiple students in the class, there will likely be boolean elements associated with each student and his/her grade in a dictionary/array, and a loop will likely be used. . 3.1 Part 3 Hacks . 1) Consider the following code segment: . currentScore ⟵ 10 highScore ⟵ currentscore currentScore ⟵ 7 DISPLAY(currentScore) . What will the currentScore and highScore be after running this code segment? . Answer: (3) currentScore will have a value of 7 after running the code segment, as the most recent line of code set the value of currentScore equal to 7 . Answer: (2) highScore will have a value of 10 because after the value of 10 was assigned to the variable currentScore, the value of currentScore was assigned to highScore. . 2) Consider the following code segment: . num1 ⟵ 4 num2 ⟵ 6 num1 ⟵ num 2 DISPLAY(num1) DISPLAY(num2) . What is displayed after running this code segment? . Answer: (4) 6 6 is displayed after running the code segment. After the value 4 was assigned to num1 and value 6 was assigned to num2, the value of num2 was assigned to num1. This makes both variable have a value of 6. Therefore, 6 6 is displayed. . 3) Consider the following code segment: . num1 ⟵ 25 num2 ⟵ 15 num3 ⟵ 30 num2 ⟵ num3 num3 ⟵ num1 num1 ⟵ num2 DISPLAY(num1) DISPLAY(num2) DISPLAY(num3) . What is displayed after running this code segment? . Answer: (2). After the corresponding values are assigned to the three number variables in the first three lines of code, the value of num3 is assigned to num2, making num2 have value 30. num1 is assigned to num3, making it have value 25. Then, num2 is assigned to num1, making num1 have value 30. Here are the new values: . num1⟵30 num2⟵30 num3⟵25 . With this information, the display commands will run and display num1, then num2, then num3. Therefore, 30 30 25 will be displayed. . 4) Consider the following code segment: . p ⟵ 10 q ⟵ 20 r ⟵ 30 s ⟵ 40 p ⟵ q q ⟵ r s ⟵ q r ⟵ p . What is the value of r as a result of running this code segment . Answer: (2) It is important to note that r is assigned the value of p at Line 8. p was assigned the original value of q at Line 5. Therefore, the value of r is 20. . 5) Consider the following code segment: . first ⟵ true second ⟵ false second ⟵ first first ⟵ second . Insert Question . Answer: (3). The first two lines assigns true to first and false to second. The third line assigns the value of first to second, making both variables have the value true. The fourth line assigns second to first, which does nothing. Therefore, both variables have value true. . 6) Consider the following code segment: . a ⟵ 10 b ⟵ 20 c ⟵ 30 d ⟵ 40 x ⟵ 20 b ⟵ x + b a ⟵ x + 1 d ⟵ c / d + 2 DISPLAY(a) DISPLAY(b) DISPLAY(c) DISPLAY(d) . What is displayed as a result of executing the code segment? . Answer: (). The first five lines assign values to the variables a, b, c, d, and x. Line 6 assigns the sum of x and b (which is 40) to b. Line 7 assigns the sum of x and 1 (which is 21) to a. Line 8 assigns the quotient of c and d plus 2 (which is technically (30/40) + 2 or 2.75) to d. . At this point I realized this question might be miswritten because the answers were printing values of 40 or 50 for d . Anyways, the actual display as far as I’m concerned should be 21 40 30 2.75 (unless I’m getting something wrong with the decimal display) . Now according to the answer key, line 8 should actually be written as c + d / 2. This would make the value of d equal to c plus half of d (30 + 20 = 50). This would make the value of d 50 and answer (1) . 3.2 Hacks . Please see the Jupyter Notebook upload to see my interactions. . Binary hacks . Binary 111 = (1 + 2 + 4) = decimal 7 | Binary 1011 = (1 + 2 + 0 + 8) = Decimal 11 | Binary 1101011 = (1 + 2 + 0 + 8 + 0 + 32 + 64) = Decimal 107 | Decimal 12 = (8 + 4 + 0 + 0) = Binary 1100 | Decimal 44 = (32 + 0 + 8 + 4 + 0 + 0) = 0010 1100 | Decimal 254 = (128 + 64 + 32 + 16 + 16 + 8 + 4 + 2 + 0) = 1111 1110 | 24-bit binary hacks . Decimal to Binary: At this point I’d need a program . 57345 decimal = | 16777215 decimal = | 11184810 decimal = | Binary to Decimal . Binary 101011101010 = (0 + 2 + 0 + 8 + 0 + 32 + 64 + 128 + 0 + 512 + 0 + 2048) = Decimal 2794 | Binary 10011100000 = (0 + 0 + 0 + 0 + 0 + 32 + 64 + 128 + 0 + 0 + 1024) = Decimal 1248 | Binary 1101001000101000 = (0 + 0 + 0 + 8 + 0 + 32 + 0 + 0 + 0 + 512 + 0 + 0 + 4096 + 0 + 16384 + 32768) = 53800 | Final Hacks . DISCLAIMER . I have some deviations from the provided answers for a few of these questions. Please do not blindly subtract points for these differences and read my reasoning. Thank you! . 1) Consider the following code segment: . scores1 ← [89, 78, 92, 63, 95, 88] scores2 ← [92, 79, 97, 63] scores1 ← scores2 . What are the contents of scores1 after the code segment is executed? . Answer: (4). Lines 1 and 2 set the values of the lists scores1 and scores2. Line 3 overrides the value of scores1 with that of scores2. Therefore, the list of scores1 is that of scores2, namely [92, 79, 97, 63] . 2) Consider the following code segment: . listA &lt;- [&quot;Sam&quot;, &quot;Ann&quot;] listB &lt;- [&quot;Jamal&quot;, &quot;Tamara&quot;] listB &lt;- listA listA &lt;- listB . What are the contents of listA after the code segment is executed? . Answer: (1). In a similar manner to Question 1, Lines 1 and 2 define listA and listB. In Line 3, ListA overrides ListB, making them both have the contents [“Sam”, “Ann”]. Therefore, Line 4 (where ListB overrides ListA) does nothing since the lists have the same contents. Therefore, the contents of ListA are [“Sam”, “Ann”] . 3) What is the length of this list? [&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Purple&quot;] . Answer: (3) The length of this list is 6 because there are 6 elements (which are apparently basic colors). Each element in the list can be distinguished because they are separated by commas. The elements are put in quotation marks, indicating that they are string elements. . 4) What is the index number of “Purple” in this list? [&quot;Red&quot;, &quot;Orange&quot;, &quot;Yellow&quot;, &quot;Green&quot;, &quot;Blue&quot;, &quot;Purple&quot;] . Answer: If CollegeBoard pseudocode is being followed (see page 3 of the pseudocode guide), the first element in a list has an index of 1. This is implied by the fact that there will be errors if an index less than 1 is used on a list operation. Therefore, the 6th element (which is “purple”) has an index of 6 and the answer is (3). Keep in mind that this may vary based on which programming language is used. . Now of course a well known example of this is the Python language, where the first element of a list has an index of 0. As such, the 6th element would have an index of 5 in Python and yield answer (4). . Now to prevent all this confusion, assign the list as a variable. Different languages have different syntaxes with defining lists, and these distinctions would make it more clear which rules to follow with indexing. . 5) Which of the following types of data can be stored in a list? . This one was tricky. I made some improvised code in python here. . isOnline = bool(1==2) aList = [1.1, 1.2, 1.3, 1.4, &quot;hrar&quot;, &quot;wow&quot;] print(aList) aList.extend(isOnline) print(aList) . I could not add a boolean variable to the list using extend commands, but having float data (1.1, 1.2) and strings printed just fine. Then I tried this: . isOnline = bool(1==2) aList = [1.1, 1.2, 1.3, 1.4, &quot;hrar&quot;, &quot;wow&quot;, bool(1==2)] print(aList) . Then the list printed just fine. Here’s output: [1.1, 1.2, 1.3, 1.4, &#39;hrar&#39;, &#39;wow&#39;, False]. This is probably an indication I didn’t use extend commands properly. . I’ll therefore answer with (4) . 6) Which of the following variables is a float? . Answer: (2). -106.2 is not an integer, but it is still a number (especially since it has decimals). This falls under the classification of float variables. A few statements about the other variables: . Apples could be a string variable if apples is the value of the variable. . 34 is an integer variable since it’s an integer. . True is the value of a Boolean variable, of which the other possible value is false. Boolean variables are the simplest variables and are binary. . 7) If a list has a length of 24 items, what is the index number of the 17th item? . Answer: If Python is being used, the first element in a list has an index of 0. Therefore, the 17th element has an index of 16 and the answer is (3). . If CollegeBoard pseudocode is being followed, the first element in a list has an index of 1. Therefore, the 17th element has an index of 17 and the answer is (2) . 8) A variable is permanent and cannot be changed later on. . Answer: (2). The values of existing variables can be changed in multiple ways. I’ll first mention that integer/float variables can have mathematical operations (ex: addition, subtraction, multiplication, and division) performed on them. These operations often change their values, and are crucial for the ability of programs to dynamically change numbers displayed (ex: displayed grades can be changed). Second, it is possible for an existing variable to be overwritten by another value. This often happens when one variable is copied onto another existing variable. . 9) Which of the following is true about the list? [&quot;Apples&quot;, 42.0, &quot;Bananas&quot;, 0.5, &quot;Avocado&quot;, -902.2, &quot;Lychee&quot;, 6.9, &quot;Orange&quot;, 7.2] . I’ll consider each of the four options one-by-one then come up with a final answer . i) There are strings in this list (assorted fruit) and some float elements ii) There are 5 string elements and 5 float elements. The ratio is 1:1. iii) There are 10 elements in the list, so the length is 10. iv) This one depends, and I’m not going to go over indexing differences between Python and pseudocode again since I already explained that twice. Here’s what I’ll say: . If Python is being used (which is probably what the makers of the question envisioned), “Avocado”, as the 5th element, has an index of 4. Therefore, the final answer is (6) . If CollegeBoard pseudocode is being used, “Avocado” has an index of 5. Therefore, the final answer is (1). .",
            "url": "https://leonard514.github.io/FastPage/sprint/hacks1",
            "relUrl": "/sprint/hacks1",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Binary Math (modified)",
            "content": "Binary Math with Conversions: RGB Edition . The button below will change color depending on your input. . Color Test Filler Text Filler Text . This uses the RGB (red green blue) color system, where each of these three colors has 256 intensities. This first system will determine the value of red. . Plus Binary Decimal Minus . +1 | 00000000 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://leonard514.github.io/FastPage/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "API Demo",
            "content": "import requests url = &quot;https://trivia-by-api-ninjas.p.rapidapi.com/v1/trivia&quot; querystring = {&quot;category&quot;:&quot;general&quot;,&quot;limit&quot;:&quot;7&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;d205112de0msh0d4deda4e76f24fp1d3d7fjsn2c684c769088&quot;, &quot;X-RapidAPI-Host&quot;: &quot;trivia-by-api-ninjas.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . [{&#34;category&#34;: &#34;general&#34;, &#34;question&#34;: &#34;Zoophobia is the fear of ______&#34;, &#34;answer&#34;: &#34;Animals&#34;}, {&#34;category&#34;: &#34;general&#34;, &#34;question&#34;: &#34;Pierre Augustine Caron de Baumarchais play what Opera based on it&#34;, &#34;answer&#34;: &#34;Barber Of Seville&#34;}, {&#34;category&#34;: &#34;general&#34;, &#34;question&#34;: &#34;Hang on Sloopy&#39; was the official rock song of which band&#34;, &#34;answer&#34;: &#34;Ohio&#34;}, {&#34;category&#34;: &#34;general&#34;, &#34;question&#34;: &#34;When is turkey traditionally eaten in america&#34;, &#34;answer&#34;: &#34;Thanksgiving&#34;}, {&#34;category&#34;: &#34;general&#34;, &#34;question&#34;: &#34;What was mozart&#39;s first name&#34;, &#34;answer&#34;: &#34;Wolfgang&#34;}, {&#34;category&#34;: &#34;general&#34;, &#34;question&#34;: &#34;In the film &#39;titanic&#39;, who did leonardo dicaprio and kate winslet play&#34;, &#34;answer&#34;: &#34;Jack&#34;}, {&#34;category&#34;: &#34;general&#34;, &#34;question&#34;: &#34;What was founded in the UK 1694 because of war with France&#34;, &#34;answer&#34;: &#34;Bank Of England&#34;}] .",
            "url": "https://leonard514.github.io/FastPage/scripts/api-test",
            "relUrl": "/scripts/api-test",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Apcsp Concept",
            "content": ". Full list of questions: . Math Qs . 1) &gt; This Greek mathmetician supposedly designed a system of mirrors to set enemy ships on fire. . 1. &gt; Archimedes . 2) &gt; The sum of the first three digits of this irrational number is equal to the third power of one less than the first digit. . 1. &gt; pi . 3) &gt; This German mathematician famously feuded with Isaac Newton over which of them created calculus . 1. &gt; Gottfried Wilhem Leibniz . 4) &gt; It isn’t pi, but this Greek letter is commonly used to denote change . 1. &gt; delta . 5) &gt; This type of sum is named after a mathematician who specialized in geometry . 1. &gt; Rienmann . 6) &gt; Nobel Prize winner John Nash famously suffered from this mental disorder throughout his life . 1. &gt; schizophrenia . 7) &gt; A type of ratio, this metal is known for its softness and luster. . 1. &gt; Gold . CompSci Qs . 1) &gt; JavaScript requires all commands to end with this character . 1. &gt; Semicolon (;) . 2) &gt; The creator of Python, Guido van Rossum, is Dutch. The capital of his home country is this city . 1. &gt; Amsterdam . 3) &gt; When a phrase is encased in quotation marks (“”), it is known as this . 1. &gt; String . 4) &gt; What is the system used to fetch web pages based on a URL (ex: google.com)? . 1. &gt; Domain Name System (DNS) . 5) &gt; How would you write an HTML comment with the content “Stores variables” (without quotes)? . 1. &gt; &lt; !-- Stores variables -- &gt; . . 6) &gt; Refer to the python code. What will be the final value of the variable count? Round to 3 decimal places. . 1. &gt; 1.618 . 7) &gt; Sharing a name with a fairy-like creature in European folklore, a collection of images put into a single image in JavaScript. . 1. &gt; sprite . Ireland Qs . 1) &gt; This staple crop of Ireland was famously over exported to Great Britain in the early 1900s, leading to a famine . 1. &gt; potatoes . 2) &gt; Saint Patrick is known for driving all of these from Ireland, a metaphor for the Celts that kidnapped him as a child . 1. &gt; snakes . 3) &gt; Lucky! This alternate name for clovers is a staple in modern imaginations of the leprechaun. . 1. &gt; shamrock . 4) &gt; Bells of Ireland are known for symbolizing this quality, a much desired trait for the hapless . 1. &gt; Good Luck . 5) &gt; Britian gained rule over Ireland in the Anglo-Saxon invasion in this year where Henry II and Louis VII made an alliance through the betrothal of their children . 1. &gt; 1169 . 6) &gt; #00FF00, #FFFFFF and #FFA500 is how you make the Irish flag in this color system . 1. &gt; hexadecimal . 7) &gt; Cathal Brugha was the first of these for Ireland and held this position for three years until his death in 1922 . 1. &gt; Prime Minister . Sports Qs . 1) &gt; In Soccer / Fútbol, which player has the most Ballen D’ors? . 1. &gt; Lionel Messi . 2) &gt; Who has the most touchdowns in NFL history? . 1. &gt; Jerry Rice . 3) &gt; Who won the 2018 Russia World Cup (Fútbol)? . 1. &gt; Russia . 4) &gt; Which two teams were in the 2021 NBA Finals? . 1. &gt; Milwaukee Bucks &amp; Phoenix Suns . 5) &gt; Out of his 61 professional fights, how many fights did Muhhamad Ali win? . 1. &gt; 56 . 6) &gt; Tom Hanks says “There’s no crying in baseball!” in this 1992 film . 1. &gt; A League of their Own . 7) &gt; The national sport of Pakistan, while not its most famous sport, was portrayed in the 2007 Bollywood film Chak de! India . 1. &gt; Field Hockey . Literature Qs . 1) &gt; The author of War of the Worlds and the Time Machine . 1. &gt; H. G. Wells . 2) &gt; The protagonists in the John Green novel The Fault in Our Stars tastelessly kiss where this Dutch girl hid with her family during the Holocaust. . 1. &gt; Anne Frank . 3) &gt; Ponyboy Curtis recites a poem by this man, who also wrote The Road Not Taken . 1. &gt; Robert Frost . 4) &gt; Khalil Gibran details his thoughts on society in his 1925 book named for this holy figure . 1. &gt; Prophet . 5) &gt; Mary Shelley’s 1816 Romantic novel The Modern Prometheus is said to have kickstarted this genre . 1. &gt; Science Fiction . 6) &gt; The protagonist of this novel exchanges emails with a fellow gay student at his school, and risks getting outed by one of his peers. It recieved a film adaptation in 2018 . 1. &gt; Simon vs the Homo Sapiens Agenda . 7) &gt; A chapter in this 1008 novel is completely blank to signify the death of the viewpoint character . 1. &gt; The Tale of Genji . Video Games Qs . 1) &gt; The creator of the Super Mario and Legend of Zelda franchises . 1. &gt; Shigeru Miyamoto . 2) &gt; A staple character in pop culture since his 1938 conception, he starred in a famously bad game on the Nintendo 64 in 1999 . 1. &gt; Superman . 3) &gt; The notoriously difficult final boss of this game, along with its soundtrack, has skyrocketed this game’s popularity. Name the 2015 indie game where a child falls into the land of monsters. . 1. &gt; Undertale . 4) &gt; This 1994 fully CGI show was infamously given a continuation in 2018 centered around video games . 1. &gt; ReBoot . 5) &gt; The long running Kamen Rider franchise aired a season based on video games this year, more widely known for a large amounts of celebrities, including Prince and Alan Rickman, dying . 1. &gt; 2016 . 6) &gt; The company Mojang, known for creating Minecraft, is based in this country, where one of its cities is the namesake for a condition where a captive identifies with their kidnapper . 1. &gt; Sweden . 7) &gt; This actor had a prominent role in the marketing for the known disappointment Cyberpunk 2077. They are better known for their role in Bill and Ted’s Excellent Adventure . 1. &gt; Keanu Reeves . Science Qs . 1) &gt; Neodymium, a metal used in super magnets, is an element in this group on the periodic table . 1. &gt; Lanthanides . 2) &gt; Cortisol is a hormone released by the brain when the body is undergoing this emotion . 1. &gt; stress . 3) &gt; Marble is a metamorphic rock that came from this sedimentary rock . 1. &gt; limestone . 4) &gt; Alfred Nobel, founder of the Nobel Prize, created this material used in construction and demolition . 1. &gt; dynamite . 5) &gt; This animal’s scientific name is the same word twice . 1. &gt; Western (Lowland) Gorilla 2. &gt; Red Fox 3. &gt; European Magpie 4. &gt; Red-footed Booby 5. &gt; European Badger 6. &gt; Common skunk/striped skunk 7. &gt; European Grass Snake 8. &gt; Eurasian Eagle Owl 9. &gt; Ocean Sunfish 10. &gt; Eurasian Otter 11. &gt; American Bison . 6) &gt; Alan Turing, the inventor of the computer, was a World War II code breaker for this country . 1. &gt; England . 7) &gt; Edward Jenner developed the smallpox vaccine after noticing the people who had contracted this disease never contracted smallpox . 1. &gt; Cowpox .",
            "url": "https://leonard514.github.io/FastPage/word/2022/10/10/APCSP-Concept.html",
            "relUrl": "/word/2022/10/10/APCSP-Concept.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "API Demo",
            "content": "import requests url = &quot;https://trivia-by-api-ninjas.p.rapidapi.com/v1/trivia&quot; querystring = {&quot;category&quot;:&quot;general&quot;,&quot;limit&quot;:&quot;7&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;d205112de0msh0d4deda4e76f24fp1d3d7fjsn2c684c769088&quot;, &quot;X-RapidAPI-Host&quot;: &quot;trivia-by-api-ninjas.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . [{&#34;category&#34;: &#34;general&#34;, &#34;question&#34;: &#34;Zoophobia is the fear of ______&#34;, &#34;answer&#34;: &#34;Animals&#34;}, {&#34;category&#34;: &#34;general&#34;, &#34;question&#34;: &#34;Pierre Augustine Caron de Baumarchais play what Opera based on it&#34;, &#34;answer&#34;: &#34;Barber Of Seville&#34;}, {&#34;category&#34;: &#34;general&#34;, &#34;question&#34;: &#34;Hang on Sloopy&#39; was the official rock song of which band&#34;, &#34;answer&#34;: &#34;Ohio&#34;}, {&#34;category&#34;: &#34;general&#34;, &#34;question&#34;: &#34;When is turkey traditionally eaten in america&#34;, &#34;answer&#34;: &#34;Thanksgiving&#34;}, {&#34;category&#34;: &#34;general&#34;, &#34;question&#34;: &#34;What was mozart&#39;s first name&#34;, &#34;answer&#34;: &#34;Wolfgang&#34;}, {&#34;category&#34;: &#34;general&#34;, &#34;question&#34;: &#34;In the film &#39;titanic&#39;, who did leonardo dicaprio and kate winslet play&#34;, &#34;answer&#34;: &#34;Jack&#34;}, {&#34;category&#34;: &#34;general&#34;, &#34;question&#34;: &#34;What was founded in the UK 1694 because of war with France&#34;, &#34;answer&#34;: &#34;Bank Of England&#34;}] . import requests url = &quot;https://trivia-by-api-ninjas.p.rapidapi.com/v1/trivia&quot; querystring = {&quot;category&quot;:&quot;historyholidays&quot;,&quot;limit&quot;:&quot;15&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;d205112de0msh0d4deda4e76f24fp1d3d7fjsn2c684c769088&quot;, &quot;X-RapidAPI-Host&quot;: &quot;trivia-by-api-ninjas.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . [{&#34;category&#34;: &#34;historyholidays&#34;, &#34;question&#34;: &#34;In which 1970&#39;s films does Dustin Hoffman play the character &#39; Lenny Bruce&#39; ? &#34;, &#34;answer&#34;: &#34;Lenny&#34;}, {&#34;category&#34;: &#34;historyholidays&#34;, &#34;question&#34;: &#34;James Dean died during the filming of which film in 1955? &#34;, &#34;answer&#34;: &#34;Giant&#34;}, {&#34;category&#34;: &#34;historyholidays&#34;, &#34;question&#34;: &#34;Who Directed The Original Halloween Movie &#34;, &#34;answer&#34;: &#34;John Carpenter&#34;}, {&#34;category&#34;: &#34;historyholidays&#34;, &#34;question&#34;: &#34;Good King Wenceslas was a 12th Century king of which country &#34;, &#34;answer&#34;: &#34;Bohemia&#34;}, {&#34;category&#34;: &#34;historyholidays&#34;, &#34;question&#34;: &#34;This word describes the Nazi annihilation of Jews.&#34;, &#34;answer&#34;: &#34;Holocaust&#34;}, {&#34;category&#34;: &#34;historyholidays&#34;, &#34;question&#34;: &#34;Who invented the wristwatch?&#34;, &#34;answer&#34;: &#34;Louis Cartier&#34;}, {&#34;category&#34;: &#34;historyholidays&#34;, &#34;question&#34;: &#34;In 1952. &#39;Elizabeth Becomes Queen&#39;. Who was her late father? &#34;, &#34;answer&#34;: &#34;George Vi&#34;}, {&#34;category&#34;: &#34;historyholidays&#34;, &#34;question&#34;: &#34;Which country blew up a Greenpeace ship in New Zealand?&#34;, &#34;answer&#34;: &#34;France&#34;}, {&#34;category&#34;: &#34;historyholidays&#34;, &#34;question&#34;: &#34;The Christmas period of 1813-14 saw the last what in London? &#34;, &#34;answer&#34;: &#34;Christmas Fair On a Frozen River Thames (known As a Frost Fair)&#34;}, {&#34;category&#34;: &#34;historyholidays&#34;, &#34;question&#34;: &#34;Who was &#34;The Mad Monk &#34;&#34;, &#34;answer&#34;: &#34;Rasputin&#34;}, {&#34;category&#34;: &#34;historyholidays&#34;, &#34;question&#34;: &#34;Which Footballer Was Sent home From The 1978 Football World Cup For Taking Illegal Substances &#34;, &#34;answer&#34;: &#34;Willie Johnston&#34;}, {&#34;category&#34;: &#34;historyholidays&#34;, &#34;question&#34;: &#34;In 1954 Roger Bannister achieved the worlds 1st Sub 4 min mile in what English County did this take place &#34;, &#34;answer&#34;: &#34;Oxforshire&#34;}, {&#34;category&#34;: &#34;historyholidays&#34;, &#34;question&#34;: &#34;Which 50&#39;s Movie features the Line &#39; I&#39;ll follow him around the Horn, and around the Norway Maelstrom, and around perditions flames&#39; &#34;, &#34;answer&#34;: &#34;Moby Dick&#34;}, {&#34;category&#34;: &#34;historyholidays&#34;, &#34;question&#34;: &#34;Which American Military Academt was established in 1802 on the Hudson river ?&#34;, &#34;answer&#34;: &#34;West Point&#34;}, {&#34;category&#34;: &#34;historyholidays&#34;, &#34;question&#34;: &#34;Name the original eight reindeer from the &#39;Twas the night Before Christmas&#39; poem. &#34;, &#34;answer&#34;: &#34;Comet, Cupid, Dasher, Dancer, Prancer, Vixen, Donner, Blitzen (or Dunder And Blixem)&#34;}] . import requests url = &quot;https://trivia-by-api-ninjas.p.rapidapi.com/v1/trivia&quot; querystring = {&quot;category&quot;:&quot;entertainment&quot;,&quot;limit&quot;:&quot;30&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;d205112de0msh0d4deda4e76f24fp1d3d7fjsn2c684c769088&quot;, &quot;X-RapidAPI-Host&quot;: &quot;trivia-by-api-ninjas.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . [{&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;What is the mother&#39;s name in Family Circus&#34;, &#34;answer&#34;: &#34;Thelma&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;What is the name of the Volkswagen in the film, &#34;The Love Bug &#34;?&#34;, &#34;answer&#34;: &#34;Herbie&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;Which band does Eddie Vedder with?&#34;, &#34;answer&#34;: &#34;Pearl Jam&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;Who produced &#39;Sgt Pepper&#39;s Lonely Hearts Club Band&#39;?&#34;, &#34;answer&#34;: &#34;George Martin&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;Was Shirley Temple 21, 25 or 29 when she made her last film?&#34;, &#34;answer&#34;: &#34;21&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;What was Lucy&#39;s maiden name on &#39;I Love Lucy&#39;?&#34;, &#34;answer&#34;: &#34;Mcgillicuddy&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;What is Peter Parker&#39;s secret identity?&#34;, &#34;answer&#34;: &#34;Spiderman&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;Who played the lead in the movie &#34;The Mask &#34;?&#34;, &#34;answer&#34;: &#34;Jim Carrey&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;Who sings &#39;Sweet Home Alabama&#39;?&#34;, &#34;answer&#34;: &#34;Lynyrd Skynyrd&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;What famous classical composer continued to compose great music after becoming deaf?&#34;, &#34;answer&#34;: &#34;Ludwig Van Beethoven&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;Which Elton John song was re-recorded as a requiem for Lady Diana Spencer?&#34;, &#34;answer&#34;: &#34;Candle In The Wind&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;In which film did Jay Leno play &#39;Mookie&#39;?&#34;, &#34;answer&#34;: &#34;American Hot Wax&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;Name Li&#39;l Abner&#39;s favorite Indian drink.&#34;, &#34;answer&#34;: &#34;Kickapoo Joy Juice&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;What did Hannibal Lecter like to eat with liver?&#34;, &#34;answer&#34;: &#34;Fava Beans&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;Who wrote the song &#39;Do They Know It&#39;s Christmas&#39; with Bob Geldof?&#34;, &#34;answer&#34;: &#34;Midge Ure&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;What was Elvis Presley&#39;s twin brother&#39;s name?&#34;, &#34;answer&#34;: &#34;Garon&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;In the film &#39;Home Alone&#39;, who played the baddies?&#34;, &#34;answer&#34;: &#34;Joe Pesci And Daniel Stern&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;What was Keanu Reeves&#39; first big film?&#34;, &#34;answer&#34;: &#34;Point Break&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;Who co-starred with Julie Andrews in &#34;Mary Poppins &#34;?&#34;, &#34;answer&#34;: &#34;Dick Van Dyke&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;Mentor of Titan had two children in the Marvel comics, Thanos and ___?&#34;, &#34;answer&#34;: &#34;Ero&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;Hanna-Barbera rose to fame by creating what duo for MGM?&#34;, &#34;answer&#34;: &#34;Tom And Jerry&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;What night club did Ricky work at on &#39;I Love Lucy&#39;?&#34;, &#34;answer&#34;: &#34;The Tropicana&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;Who played the mayor of the munchkins in &#39;The Wizard of Oz&#39;?&#34;, &#34;answer&#34;: &#34;Charlie Becker&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;The Who&#39;s rock musical stars Elton John. It&#39;s called ________.&#34;, &#34;answer&#34;: &#34;Tommy&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;Who was the original voice of Mickey Mouse?&#34;, &#34;answer&#34;: &#34;Walt Disney&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;What is Batman&#39;s butler Alfred&#39;s last name.&#34;, &#34;answer&#34;: &#34;Pennyworth&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;What song was originally &#39;Good Morning To You&#39; before the words were changed and it was published in 1935?&#34;, &#34;answer&#34;: &#34;Happy Birthday To You&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;What do the initials of the band NIN stand for?&#34;, &#34;answer&#34;: &#34;Nine Inch Nails&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;The theme tune for &#39;Monty Python&#39;s Flying Circus&#39; was written by which composer?&#34;, &#34;answer&#34;: &#34;John Philip Sousa&#34;}, {&#34;category&#34;: &#34;entertainment&#34;, &#34;question&#34;: &#34;Secret Identities: Jimmy Olson&#34;, &#34;answer&#34;: &#34;Elastic Lad&#34;}] .",
            "url": "https://leonard514.github.io/FastPage/scripts/api-test",
            "relUrl": "/scripts/api-test",
            "date": " • Oct 4, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is letter &quot; + str(i+1) + &quot; in the alphabet&quot;) i += 1 . The letter f is letter 6 in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) count = 1 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is letter &quot; + str(count) + &quot; in the alphabet&quot;) count += 1 . The letter y is letter 25 in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt;= 100 : numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . from tkinter.messagebox import YES menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;combo&quot;: 4.99, &quot;onion rings&quot;: 2.99, &quot;salad&quot;: 5.99, &quot;chicken nuggets&quot;: 3.25} #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times def inputcollect(): global total item = input(&quot;Please select an item from the menu&quot;) total = total + menu[str(item)] question = input(&quot;Do you want to order anything else (yes/no)?&quot;) if question == &quot;yes&quot;: inputcollect() else: return total total = 0 print(total) inputcollect() #code should add the price of the menu items selected by the user print(&quot;$&quot; + str(total)) . ModuleNotFoundError Traceback (most recent call last) Cell In [19], line 1 -&gt; 1 from tkinter.messagebox import YES 4 menu = {&#34;burger&#34;: 3.99, 5 &#34;fries&#34;: 1.99, 6 &#34;drink&#34;: 0.99, (...) 9 &#34;salad&#34;: 5.99, 10 &#34;chicken nuggets&#34;: 3.25} 13 #shows the user the menu and prompts them to select an item ModuleNotFoundError: No module named &#39;tkinter&#39; . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://leonard514.github.io/FastPage/notebooks/troubleshooting",
            "relUrl": "/notebooks/troubleshooting",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Week 5 Review Ticker",
            "content": "Hi! This is supplemental content for my Week 6 Review Ticket. I will first provide evidence I did the College Board MCQ. . . Second, I will present my website, which is not here. That’s a live presentation. .",
            "url": "https://leonard514.github.io/FastPage/notes/js_table",
            "relUrl": "/notes/js_table",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "A JavaScript Test!",
            "content": "Hi! Welcome to the JavaScript Test! Some basic stuff here. . console.log(&quot;Hello World!&quot;) . Hello World! . Yeah, that&#39;s basic. I need to try a Random number generator. This will actually be a test for part of my Night at the Museum concept, specifically the one where there&#39;s a 5% chance for any question to be doubled points. . // Makes a list, declares variables var rng var number rng = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]; // Fisher-Yates Shuffle, grabbed from https://bost.ocks.org/mike/shuffle/. Very useful. // In the theoretical jeopardy program, this script would be run every time // the user clicks on a question. function shuffle(rng) { var m = rng.length, t, i; // While there remain elements to shuffle… while (m) { // Pick a remaining element… i = Math.floor(Math.random() * m--); // And swap it with the current element. t = rng[m]; rng[m] = rng[i]; rng[i] = t; } return rng; } shuffle(rng) // sets number, prints values of variables to verify everything is working properly number = rng[11] console.log(rng) console.log(number) // This is the random number generator if (number == 10) { console.log(&quot;The number 10 was picked, in the Jeopardy this would be daily double&quot;) } else { console.log(&quot;The number 10 was not picked, this is no daily double&quot;) console.log(number) } . [ 19, 3, 13, 11, 15, 5, 14, 17, 16, 4, 1, 9, 20, 18, 10, 7, 8, 12, 2, 6 ] 9 The number 10 was not picked, this is no daily double 9 . A few things to talk about. First, variables must be declared in Java. This looks like . var rng var number rng = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]; . In this case, rng and number are declared. They do not have values yet. Then, I set rng equal to a list with all numbers from 1 to 20. Then I defined a function called shuffle, with the list as the parameter using function shuffle(rng) {. Here&#39;s what it does: . var m = rng.length, t, i; . This declares variables m, t, and i, and sets variable m equal to the number of entries in the list rng . while (m) . This executes associated commands on all items in the rng . i = Math.floor(Math.random() * m--); . This sets i equal to a value. Math.floor rounds any number down. Math.random() picks a random number between 0 and 1. And m-- decreases m by 1. Then: . t = rng[m]; rng[m] = rng[i]; rng[i] = t; . This sets t equal to the mth value of rng, then sets that equal to the ith value of rng, which is then set equal to t. . That&#39;s a little unclear, so I&#39;ll state that in simpler terms. This code goes to the back entry in the list and collects its value. Then, this entry is set equal to the entry randomly selected in the while loop. Then, the entry selected in the list is set equal to the former value of the last entry. Given that m-- is used for each entry, the loop effectively then repeats this process but for the second-to-last entry in the list, then the third-to-last, etc. . return rng; takes the value of the list outside the function, allowing it to be used in later commands. . number = rng[11] sets the variable number equal to the 11th entry in rng. It really doesn&#39;t matter which entry is picked since the list is randomized anyways. Then: . if (number == 10) { console.log(&quot;The number 10 was picked, in the Jeopardy project the given question would be daily double&quot;) } else { console.log(&quot;The number 10 was not picked, this is no daily double&quot;) console.log(number) } . The if statement: Essentially checks if the value of the variable number, or the 11th entry in rng, is equal to 10. Any number from 1 to 20 can be checked since all those numbers are in the list. If this is satisfied, it prints that the question in a jeopardy project would be a daily double. The function of this code is essentially a random number generator so that there&#39;s a 5% chance that a condition be satisfied. In the real jeopardy project, another command would be associated with the if statement which would double the value of a variable serving as the base number of points if a question is answered correctly. . If the condition is not satisfied, it prints that there will be no daily double. .",
            "url": "https://leonard514.github.io/FastPage/scripts/js_test",
            "relUrl": "/scripts/js_test",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Week 3 Create Performance Task",
            "content": "The Project Idea . My sister and I had this idea a while back of creating an app to monitor mental health. We didn’t make any progress, but the concept was fair. So I’ll have a go at it with the Create Performance Task. Here are a few ideas. . Providing a list of emergency numbers (I don’t know how a calling function would be able to work, especially since this is meant to be a PC program; the previous concept was a mobile program) | Log daily hours of sleep and display graphically (sleep is important for mental health!) | Log time/activities spent with family or friends | . Of course I need to check all the boxes, so I’ll do that real quick. All of this will be based on only one part of the program (the sleep data part), but the other parts will be in the final product as well. . Row 1: Program Purpose and Function . Take for example the log of the daily hours of sleep. . I would theoretically make a textbox for user input. This would have two pieces of information to input: the date and how much sleep (hours) was taken. . | This information would be outputted graphically. A possibility would have time represented on an x-axis and hours of sleep represented on the y-axis. Each day would be represented by a dot, and the dots will be connected with straight lines. . | The functionality is essentially that a user enters sleep data every day, and the program organizes the data so the user could more easily understand trends of sleep and get appropriate sleep accordingly. . | . Rows 2 and 3: Data Abstraction and Managing Complexity . Rows 2 and 3 will be answered with the same response (3b) on the exam, and they both have to do with lists… so I think it’s appropriate to group them here. The way this will play out (according to the present plan) will be very similar to the Python Lists and Dictionaries activity. . I will make a list of dictionaries named SleepData = [] . | Then using the user input, I will store the input into a list using append commands, with the date being stored in the Date portion of the entry and the number of sleep hours being stored in the Sleep_Hours portion of the entry. In order to append the data, the input would likely be stored in variables before they are used in append commands. . | I will then use a loop to iterate through each item in the list to display all of the days in which data is collected. . | Without a list of dictionaries, it would be very difficult to associate each day with the number of hours of sleep each day. Separate variables could possibly be made for each day and each number of hours of sleep, but the number of variables which would eventually build up would make the solution impractical… possibly unless the variables were stored in some separate file and then imported. Even then, a loop must be used to iterate through the variables, raising the question of whether this would be functionally equivalent to using a list but with greater complexity. . | . Therefore, use of a list is optimal in making output. . Rows 4, 5, and 6: Procedural Abstraction, Algorithm Implementation, and Testing . To output the results of the list graphically, a function would be required. This function would likely involve a for loop and commands required to graphically display the data. . | In order to pass the “two calls with different arguments” check in Row 6, I will make variations for how the data is displayed. There will be two forms of variations: . | . The way the data is displayed (by line graphs, bar graphs, by tables, etc.) | The amount of days for which data is displayed (for past week, for past month, for past 3 months, for past year, or all-time) | I don’t know what graphical displays would look like in terms of code, but in terms of tables I expect to see something functionally similar to the liquid syntax from Week 2. .",
            "url": "https://leonard514.github.io/FastPage/notes/performance_plan",
            "relUrl": "/notes/performance_plan",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Week 3 Javascript Quiz Blog",
            "content": "Below I describe the procedures that I and Abdullah took to make the quiz. We began with planning a topic, then made the actual questions. The questions are given with correct answers in bold. . Quiz Questions . 1) What is the capital of Iceland? a) Reykjavik b) Kopavogur c) Hafnarfjoerdur d) Akureyri 2) What is the capital of Brazil? a) Rio de Janerio b) Brasilia c) Sao Paulo d) Lisbon 3) What is the capital of Pakistan? a) Lahore b) Karachi c) Islamabad d) Mumbai . Coding . I should probably link the project first. . Full Code var correct = 0; onEvent(&quot;StartButton&quot;, &quot;click&quot;, function( ) { setScreen(&quot;Question1&quot;); }); onEvent(&quot;reykjavik&quot;, &quot;click&quot;, function __() { console.log(&quot;reykjavik clicked!&quot;); correct ++; console.log(correct); setScreen(&quot;Question2&quot;);}); onEvent(&quot;kopavogur&quot;, &quot;click&quot;, function __() { console.log(&quot;kopavogur clicked!&quot;); setScreen(&quot;Question2&quot;);}); onEvent(&quot;akureyri&quot;, &quot;click&quot;, function __() { console.log(&quot;akureyri clicked!&quot;); setScreen(&quot;Question2&quot;);}); onEvent(&quot;hafnarfjoedur&quot;, &quot;click&quot;, function __() { console.log(&quot;hafnarfjoedur clicked!&quot;); setScreen(&quot;Question2&quot;);}); onEvent(&quot;brasilia&quot;, &quot;click&quot;, function __() { console.log(&quot;brasilia clicked!&quot;); correct ++; console.log(correct); setScreen(&quot;Question3&quot;);}); onEvent(&quot;lisbon&quot;, &quot;click&quot;, function __() { console.log(&quot;lisbon clicked!&quot;); setScreen(&quot;Question3&quot;);}); onEvent(&quot;SaoPaulo&quot;, &quot;click&quot;, function __() { console.log(&quot;SaoPaulo clicked!&quot;); setScreen(&quot;Question3&quot;);}); onEvent(&quot;rio&quot;, &quot;click&quot;, function __() { console.log(&quot;rio clicked!&quot;); setScreen(&quot;Question3&quot;);}); onEvent(&quot;islamabad&quot;, &quot;click&quot;, function __() { console.log(&quot;islamabad clicked!&quot;); correct ++; console.log(correct); setScreen(&quot;Results&quot;);}); onEvent(&quot;karachi&quot;, &quot;click&quot;, function __() { console.log(&quot;karachi clicked!&quot;); setScreen(&quot;Results&quot;);}); onEvent(&quot;lahore&quot;, &quot;click&quot;, function __() { console.log(&quot;lahore clicked!&quot;); setScreen(&quot;Results&quot;);}); onEvent(&quot;mumbai&quot;, &quot;click&quot;, function __() { console.log(&quot;mumbai clicked!&quot;); setScreen(&quot;Results&quot;);}); console.log(correct); onEvent(&quot;Results&quot;, &quot;mouseover&quot;, function( ) { setText(&quot;scorereport&quot;, &quot;Congratulations!!! You got &quot; + ((correct + &quot;/3&quot;) + &quot; correct!!!&quot;)); }); We started coding the designs. code.org uses Javascript. We first defined a variable. . var correct = 0; . This command sets a variable correct to 0 . We then used the onEvent command to configure what happens when buttons or textboxes were clicked. A sample is visible below. . onEvent(&quot;StartButton&quot;, &quot;click&quot;, function( ) { setScreen(&quot;Question1&quot;); }); . Similar to if statements, loops, and other commands, onEvent has associated commands. . The first criteria of onEvent, StartButton, defines what object the command applies to. This is an app, so there are objects such as buttons, textboxes, and images. | The second criteria, click, determines the action which triggers the command. | The associated command is setScreen, which as implies sets the screen to the named screen (in this case Question1) | . There were many onEvent commands which were highly similar. . onEvent(&quot;reykjavik&quot;, &quot;click&quot;, function __() { console.log(&quot;reykjavik clicked!&quot;); correct ++; console.log(correct); setScreen(&quot;Question2&quot;);}); . This does a few more things. console.log prints the text inside the parenthesis and quotes to console. It can also print the value of a variable (in this case correct). This was extremely useful for debugging purposes, as I will elaborate on shortly. . correct ++ simply increases the value of the correct variable by 1. . I will now discuss the primary issue we encountered in the project. . setText(&quot;scorereport&quot;, (&quot;Congratulations!!! You got &quot; + correct) + &quot;/3&quot; + &quot; correct!!!&quot;); . This command was placed at the very end of our code. It essentially put the text into the textbox named scorereport Whenever we ran the code, we found that at the end the score was either 0 or undefined. . In order to figure out the issues, we used a command which was seen in the second onEvent command . console.log(correct); . Using this, we found that the variable correct was indeed increasing if the correct answers to the questions were selected. Therefore, the issue was that the last line of code was run before the quiz was even taken (when the variable correct was 0). To solve this issue, we made the setText command to be executed as part of an onEvent command. Here was the final version of the command. . onEvent(&quot;Results&quot;, &quot;mouseover&quot;, function( ) { setText(&quot;scorereport&quot;, &quot;Congratulations!!! You got &quot; + ((correct + &quot;/3&quot;) + &quot; correct!!!&quot;)); }); . The Results page was the final page where the score was displayed. The event was mouseover, which is essentially if the mouse is over the page. This made it so the command was executed only when the quiz taker entered the page, ensuring that the correct value for the number of correct answers was outputted. .",
            "url": "https://leonard514.github.io/FastPage/notes/javascript_quiz",
            "relUrl": "/notes/javascript_quiz",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Week 2 Review Ticket",
            "content": "Hi! . This is part of the Week 2 Review Ticket. If you came here, I hope you came here from the github issue. If not, please take a look right here. That being said, if you missed where the python is, it’s here! . Anyways, if you came from the github issue, you are probably here for the fastpages/web development part of the submission. That part of the submission is too complex to just stick a single link in the title without a dedicated post, so here’s to the changes! . Changes!!! . There are quite a few things in the HTML hacks that I have had previously for a while. In case you missed the tags and search pages: . Tags | Search | . My website has plenty of “time box fragments” (otherwise known as tables), including the one below. If you want to see a lot of tables, you should see my notes page. . Also, you probably noticed that my website has a different color scheme. Specifically, my top bar is black while the rest of the background is navy blue. I had to make quite a few customizations to an example dark mode file (as well as the default fastpages-styles.scss file) to change the colors of the background and the text to ensure a dark background and text with sufficient contrast. . I also had an adventure modifying the theme of my website. For notes about that adventure, click here.. I decided to remove the theme since it removed the top bar, making it harder to access the tags page. . Now, here’s a table of my daily progress . Date Activities completed . August 29 | First attempt at theme integration using _config.yml. The theme was not inputted correctly, breaking the CI task in fastpages and making it impossible to update the website. | . August 30 | Learned about dictionaries in a list in python. Added new information into the given list of dictionaries InfoDB, and demonstrated how to output list items backwards and in a random order. | . August 31 | Attempted to make a python quiz using a new list of dictionaries QuizDB, but got stuck due to various issues within the for loop and since I was appending my question/answer pairs to InfoDb instead of QuizDB. Also tried to append to a list using input and had trouble due to quotation issues. I eventually fixed the issue using f”{var_name}”, which allowed printing of any variable value inside the quotation marks. Also learned about how I inputted my website theme wrong in a lesson, and revised that. Had trouble customizing dark mode example code. | . September 1 | Was able to customize dark mode, making all parts of the website except the top bar navy blue (the top bar is the default dark-mode color) | . September 2 | Customized the text color to contrast sufficiently with the background. | . Remaining tasks . Figure out how to control site status (when it’s up and down) | .",
            "url": "https://leonard514.github.io/FastPage/submissions/Week_2_Submission",
            "relUrl": "/submissions/Week_2_Submission",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Python Loop Scripts!",
            "content": "Hi! . On this page I will demonstrate loops... again like I did on my python quiz. But first we have to make a dictionary within a list. This will store a lot of information.. Most of the variable names are self-explanatory... DOB stands for Date of Birth . InfoDb = [] # Append my info InfoDb.append({ &quot;FirstName&quot;: &quot;Leonard&quot;, &quot;LastName&quot;: &quot;Wright&quot;, &quot;DOB&quot;: &quot;December 13&quot;, &quot;Highest School&quot;: &quot;Del Norte High School&quot;, &quot;Favorite Course&quot;: &quot;AP Comp Sci Principles&quot;, &quot;Occupation&quot;: &quot;Student&quot;, &quot;Favorite Food&quot;: &quot;Panko Chicken&quot;, &quot;Favorite Color&quot;: &quot;Brown&quot;, &quot;Favorite Movie&quot;: &quot;Back to the Future&quot;, &quot;Favorite Activity&quot;: &quot;Experimenting with Computers&quot;, }) # Append my sister&#39;s info InfoDb.append({ &quot;FirstName&quot;: &quot;Lindsay&quot;, &quot;LastName&quot;: &quot;Wright&quot;, &quot;DOB&quot;: &quot;December 3&quot;, &quot;Highest School&quot;: &quot;Rice University&quot;, &quot;Favorite Course&quot;: &quot;Fluid Mechanics&quot;, &quot;Occupation&quot;: &quot;Student, Research Intern, Systems Engineer&quot;, &quot;Favorite Food&quot;: &quot;Wonton&quot;, &quot;Favorite Color&quot;: &quot;Green&quot;, &quot;Favorite Movie&quot;: &quot;The Martian&quot;, &quot;Favorite Activity&quot;: &quot;Hiking&quot;, }) # Appends my mother&#39;s info InfoDb.append({ &quot;FirstName&quot;: &quot;Marilyn&quot;, &quot;LastName&quot;: &quot;Wright&quot;, &quot;DOB&quot;: &quot;June 12&quot;, &quot;Highest School&quot;: &quot;San Beda Law School&quot;, &quot;Favorite Course&quot;: &quot;Constitutional Law&quot;, &quot;Occupation&quot;: &quot;Lawyer, Mother&quot;, &quot;Favorite Food&quot;: &quot;Rice&quot;, &quot;Favorite Color&quot;: &quot;Green&quot;, &quot;Favorite Movie&quot;: &quot;&quot;, &quot;Favorite Activity&quot;: &quot;&quot;, }) # Appends my father&#39;s info InfoDb.append({ &quot;FirstName&quot;: &quot;Leonard&quot;, &quot;LastName&quot;: &quot;Wright&quot;, &quot;DOB&quot;: &quot;June 24&quot;, &quot;Highest School&quot;: &quot;Cal State Fullerton&quot;, &quot;Favorite Course&quot;: &quot;Marketing&quot;, &quot;Occupation&quot;: &quot;CPA, Father&quot;, &quot;Favorite Food&quot;: &quot;Salmon&quot;, &quot;Favorite Color&quot;: &quot;Blue&quot;, &quot;Favorite Movie&quot;: &quot;Gone with the Wind&quot;, &quot;Favorite Activity&quot;: &quot;&quot;, }) # Appends a friend&#39;s info InfoDb.append({ &quot;FirstName&quot;: &quot;Kevin&quot;, &quot;LastName&quot;: &quot;Vu&quot;, &quot;DOB&quot;: &quot;November 2&quot;, &quot;Highest School&quot;: &quot;Del Norte High School&quot;, &quot;Favorite Course&quot;: &quot;&quot;, &quot;Occupation&quot;: &quot;student, &quot;, &quot;Favorite Food&quot;: &quot;&quot;, &quot;Favorite Color&quot;: &quot;&quot;, &quot;Favorite Movie&quot;: &quot;&quot;, &quot;Favorite Activity&quot;: &quot;&quot;, }) # Appends info of John Smith, a fictitious individual InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Smith&quot;, &quot;DOB&quot;: &quot;February 29&quot;, &quot;Highest School&quot;: &quot;UC San Diego&quot;, &quot;Favorite Course&quot;: &quot;Differential Calculus&quot;, &quot;Occupation&quot;: &quot;Professor&quot;, &quot;Favorite Food&quot;: &quot;Beef Stew&quot;, &quot;Favorite Color&quot;: &quot;Red&quot;, &quot;Favorite Movie&quot;: &quot;Star Wars: The Empire Strikes Back&quot;, &quot;Favorite Activity&quot;: &quot;Swimming&quot;, }) # We&#39;re not using the print command anymore because what it spits out is a mess. . Defining a function . Now that I have everything compiled into a nice dictionary, it&#39;s time to demonstrate the power of the loops. But before I do that, I&#39;ll define a function to make life easier. I&#39;ll name it print_data. That way, I can call print_data instead of having to re-type all of those print commands. . # This special d_rec parameter essentially references the dictionary we just created. def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) #these t print indents, which are usually inserted with a tab. print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Highest School:&quot;, d_rec[&quot;Highest School&quot;]) print(&quot; t&quot;, &quot;Occupation:&quot;, d_rec[&quot;Occupation&quot;]) print(&quot; t&quot;, &quot;Favorite Course:&quot;, d_rec[&quot;Favorite Course&quot;]) print(&quot; t&quot;, &quot;Favorite Food:&quot;, d_rec[&quot;Favorite Food&quot;]) print(&quot; t&quot;, &quot;Favorite Color:&quot;, d_rec[&quot;Favorite Color&quot;]) print(&quot; t&quot;, &quot;Favorite Movie:&quot;, d_rec[&quot;Favorite Movie&quot;]) print(&quot; t&quot;, &quot;Favorite Activity:&quot;, d_rec[&quot;Favorite Activity&quot;]) print() print() . The For Loop . Now that the function is defined, I can demonstrate the first loop: the for loop. . # It will execute this set of commands for each individual # who&#39;s information is stored in InfoDb # InfoDb is a dictionary in a list. def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: #index variable is &quot;record&quot; print_data(record) for_loop() . For loop output Leonard Wright Birth Day: December 13 Highest School: Del Norte High School Occupation: Student Favorite Course: AP Comp Sci Principles Favorite Food: Panko Chicken Favorite Color: Brown Favorite Movie: Back to the Future Favorite Activity: Experimenting with Computers Lindsay Wright Birth Day: December 3 Highest School: Rice University Occupation: Student, Research Intern, Systems Engineer Favorite Course: Fluid Mechanics Favorite Food: Wonton Favorite Color: Green Favorite Movie: The Martian Favorite Activity: Hiking Marilyn Wright Birth Day: June 12 Highest School: San Beda Law School Occupation: Lawyer, Mother Favorite Course: Constitutional Law Favorite Food: Rice Favorite Color: Green Favorite Movie: Favorite Activity: Leonard Wright Birth Day: June 24 Highest School: Cal State Fullerton Occupation: CPA, Father Favorite Course: Marketing Favorite Food: Salmon Favorite Color: Blue Favorite Movie: Gone with the Wind Favorite Activity: Kevin Vu Birth Day: November 2 Highest School: Del Norte High School Occupation: student, Favorite Course: Favorite Food: Favorite Color: Favorite Movie: Favorite Activity: John Smith Birth Day: February 29 Highest School: UC San Diego Occupation: Professor Favorite Course: Differential Calculus Favorite Food: Beef Stew Favorite Color: Red Favorite Movie: Star Wars: The Empire Strikes Back Favorite Activity: Swimming . I first define the for_loop function. It prints the string in parenthesis to the terminal. Then: . for record in InfoDb: . for has a function: it cycles through all items in a list, and for each cycle the commands associated with the loop are executed. Keep in mind that InfoDb is a list of dictionary entires, and the items in this list are each person (ex: Leonard Wright, Lindsay Wright), etc. . record serves as an index variable. Index variables can be named anything, but have a very specialized function. They work with a loop (whether this be a for loop, a while loop, or a recursive loop) to iterate through each item in a list. There is a nuance to index variables: they assign a value to each item in a list, but it starts counting from 0 rather than 1 (since 0 is the number with the least value). So the first entry in the list will be associated with 0, etc. This nuance will be important in explaining the while loop. . print_data(record) then prints the information of each user. Keep in mind the index variable record. . If you really want another example and explanation of a for loop, you should check out my first python quiz script. . The While Loop + Backwards output . You already saw the output of my for loop. I will now demonstrate a while loop while reversing the output of the list. . def while_loop(): print(&quot;While loop output n&quot;) i = len(InfoDb) - 1 #Starts on last entry while i &gt; -1: #Ensures the first entry (where i = 0) is printed record = InfoDb[i] print_data(record) i -= 1 #Goes to previous entry (rather than next entry) return while_loop() . While loop output John Smith Birth Day: February 29 Highest School: UC San Diego Occupation: Professor Favorite Course: Differential Calculus Favorite Food: Beef Stew Favorite Color: Red Favorite Movie: Star Wars: The Empire Strikes Back Favorite Activity: Swimming Kevin Vu Birth Day: November 2 Highest School: Del Norte High School Occupation: student, Favorite Course: Favorite Food: Favorite Color: Favorite Movie: Favorite Activity: Leonard Wright Birth Day: June 24 Highest School: Cal State Fullerton Occupation: CPA, Father Favorite Course: Marketing Favorite Food: Salmon Favorite Color: Blue Favorite Movie: Gone with the Wind Favorite Activity: Marilyn Wright Birth Day: June 12 Highest School: San Beda Law School Occupation: Lawyer, Mother Favorite Course: Constitutional Law Favorite Food: Rice Favorite Color: Green Favorite Movie: Favorite Activity: Lindsay Wright Birth Day: December 3 Highest School: Rice University Occupation: Student, Research Intern, Systems Engineer Favorite Course: Fluid Mechanics Favorite Food: Wonton Favorite Color: Green Favorite Movie: The Martian Favorite Activity: Hiking Leonard Wright Birth Day: December 13 Highest School: Del Norte High School Occupation: Student Favorite Course: AP Comp Sci Principles Favorite Food: Panko Chicken Favorite Color: Brown Favorite Movie: Back to the Future Favorite Activity: Experimenting with Computers . So we first define a function and print how there&#39;s output... . Then you notice that i is defined. The len(list_name) command will become the number of entries in the list named list_name. Now, let me paste the actual line. . i = len(InfoDb) - 1 . Noticed how I subtracted 1 from the len(InfoDb)? Well that&#39;s because the final entry in the list will have a value one less than the number of entries in the list, since the first entry is assigned a 0 instead of a 1. You will see that the next line of code takes this into account as well. This also means that we will print the final entry of the list first. . while i &gt; -1: . The while command will execute all associated commands as long as a statement is true. When iterating through lists, this typically involves setting the index variable (in this case, i) equal to a value, then adding a value until it reaches a value such that all entries in a list have been cycled through the commands. The condition is typically that i is less than or greater than a certain value. Now notice that my condition is that i is greater than negative one. This is because I want my first entry of the list, where i is set to 0, to print. Then, . record = InfoDb[i] print_data(record) i -= 1 . This makes a record variable, which is equal to entry i (whatever value i is for that execution cycle is). It then executes the print_data function on that entry of the list of dictionaries. Finally, the value of i decreases by 1. This ensures that the entry in the list before the previously printed entry is printed next. This essentially makes it so the entries are printed backwards. . Recursive Loops . Recursive loops are quite similar to while loops in terms of structure. What is interesting about them is that a function is defined, and the list of commands within the function includes the function. . Now, I will also try to do something fun. I will try to randomize the order which the entries in the list are printed. The nature of the command which randomizes entry order overrides the list the command is performed on. I wish to preserve the original list, so I&#39;ll make a copy of the original list. . import random # makes copy of InfoDb list InfoDb_random = InfoDb # randomizes order of entries in InfoDb_random random.shuffle(InfoDb_random) #The actual recursive loop starts here def recursive_loop(i): if i &lt; len(InfoDb_random): record = InfoDb_random[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Lindsay Wright Birth Day: December 3 Highest School: Rice University Occupation: Student, Research Intern, Systems Engineer Favorite Course: Fluid Mechanics Favorite Food: Wonton Favorite Color: Green Favorite Movie: The Martian Favorite Activity: Hiking Leonard Wright Birth Day: December 13 Highest School: Del Norte High School Occupation: Student Favorite Course: AP Comp Sci Principles Favorite Food: Panko Chicken Favorite Color: Brown Favorite Movie: Back to the Future Favorite Activity: Experimenting with Computers John Smith Birth Day: February 29 Highest School: UC San Diego Occupation: Professor Favorite Course: Differential Calculus Favorite Food: Beef Stew Favorite Color: Red Favorite Movie: Star Wars: The Empire Strikes Back Favorite Activity: Swimming Kevin Vu Birth Day: November 2 Highest School: Del Norte High School Occupation: student, Favorite Course: Favorite Food: Favorite Color: Favorite Movie: Favorite Activity: Marilyn Wright Birth Day: June 12 Highest School: San Beda Law School Occupation: Lawyer, Mother Favorite Course: Constitutional Law Favorite Food: Rice Favorite Color: Green Favorite Movie: Favorite Activity: Leonard Wright Birth Day: June 24 Highest School: Cal State Fullerton Occupation: CPA, Father Favorite Course: Marketing Favorite Food: Salmon Favorite Color: Blue Favorite Movie: Gone with the Wind Favorite Activity: . I hope the comments were enough to explain everything but the recursive loop. . def recursive_loop(i): if i &lt; len(InfoDb_random): record = InfoDb_random[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . In the first line, we define our recursive_loop. Notice that the parameter is the index variable, i | In the second line, we give an if statement. The condition is that i is less than the number of entries in the list InfoDb_random, or that not all entries in the list have been cycled through the loop. This should show you that we are cycling the entries in order of first, second, third... then last. Also remember that the order of entries of InfoDb_random are a randomized version of that of InfoDb. | Makes a record variable, which is set equal to the entry in the InfoDb_random list which is associated with the value of i | Executes the print_data function with record (or an entry in the list InfoDb_random) as the parameter | The function calls itself, essentially looping back to the top of the list of associated commands, but adding 1 to the index variable. | return stores all the output in the main script so that it can be used outside of the function | Then notice the recursive_loop(0). It tells the script to start with i=0, or essentially the first entry in InfoDb_random . Making a Quiz using a List of Dictionaries! . You probably saw my first python quiz. All the questions were collected onto a single list, which ultimately made that list a very long line. That&#39;s messy and disorganized. Let&#39;s use a list of dictionaries to make it more organized. But first, let&#39;s define the list, or the questions and answers... and the function, question_with_response. . import time, random #Makes a new list for our quiz QuizDB = [] #Appends all the quiz questions into our list. #This quiz will be a relatively simple geography quiz. #Notice that I use the database_name.append. QuizDB.append({ &quot;Country&quot;: &quot;Uruguay&quot;, &quot;Continent&quot;: &quot;South America&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;Austria&quot;, &quot;Continent&quot;: &quot;Europe&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;United Arab Emirates&quot;, &quot;Continent&quot;: &quot;Asia&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;Sweden&quot;, &quot;Continent&quot;: &quot;Europe&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;Tanzania&quot;, &quot;Continent&quot;: &quot;Africa&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;Yemen&quot;, &quot;Continent&quot;: &quot;Asia&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;Mauritania&quot;, &quot;Continent&quot;: &quot;Africa&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;Peru&quot;, &quot;Continent&quot;: &quot;South America&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;South Korea&quot;, &quot;Continent&quot;: &quot;Asia&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;Singapore&quot;, &quot;Continent&quot;: &quot;Asia&quot;, }) #Define question_with_response to give question prompts and collect input #As a reminder, print() prints the parameter (in parenthesis) into terminal def question_with_response(prompt): print(&quot;Question: What continent is &quot; + prompt + &quot; in?&quot;) msg = input() return msg . Then I&#39;ll make the quiz. . random.shuffle(QuizDB) #Define variables questions = 10 correct = 0 #I&#39;ll take some personal liberties with the initial prompt print(&quot;Hi! Welcome to my Python Geography quiz! Please capitalize the names of continents.&quot;) print(&quot;You got 15 nanoseconds to prepare for this quiz. Say yes!&quot;) #Disables input and output for 15 seconds. time.sleep(15) #Cycles through the quiz questions for i in QuizDB: rsp = question_with_response(i[&quot;Country&quot;]) if rsp == i[&quot;Continent&quot;]: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! The answer was&quot;, i[&quot;Continent&quot;]) #Calculates percent correct answers. percent = (correct/questions) * 100 #Prints accuracy of answers to terminal print(&quot;You scored &quot; + str(percent) + &#39;%!&#39;) . Hi! Welcome to my Python Geography quiz! Please capitalize the names of continents. You got 15 nanoseconds to prepare for this quiz. Say yes! Question: What continent is Singapore in? Asia Asia is correct! Question: What continent is Sweden in? Europe Europe is correct! Question: What continent is Yemen in? Asia Asia is correct! Question: What continent is South Korea in? Asia Asia is correct! Question: What continent is Uruguay in? South America South America is correct! Question: What continent is Mauritania in? Africa Africa is correct! Question: What continent is United Arab Emirates in? Asia Asia is correct! Question: What continent is Austria in? Europe Europe is correct! Question: What continent is Peru in? South America South America is correct! Question: What continent is Tanzania in? . I think the code that needs the most explaining here is the for loop. I&#39;ll bring it down here. . for i in QuizDB: rsp = question_with_response(i[&quot;Country&quot;]) if rsp == i[&quot;Continent&quot;]: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! The answer was&quot;, i[&quot;Continent&quot;]) . Line 1: For each entry in the list of dictionaries QuizDB, the associated commands will be executed | Make a rsp variable. It is set equal to the input garnered from the question_with_response function. Notice the parameter of question_with_response is i[&quot;country&quot;]. i is the index variable. For the current associated item in the list, the string associated with &quot;Country&quot; will be used as the parameter to question_with_response | An if statement with the condition that the input collected is equal to the string associated with &quot;Continent&quot; for that list. The string associated with &quot;Continent&quot; in this case is the correct answer, or the continent that the associated country is in. | If the condition is satisfied, then the fact that the answer was correct is outputted to the terminal and | The variable correct (which is the number of questions answered correctly) is increased by one | An else statement (if the if condition is not satisfied, associated commands are executed) | prints to the terminal that the question was answered incorrectly, and also shows the correct answer. | Append to a list with user input . There is one more thing I want to do for hacks, and that is appending to a list with user input. From my experience, collecting variables will be very helpful. I will be appending to the QuizDB list to make things simpler. Let me demonstrate below: . def append_input(): print(&quot;Do you want to add a new country/continent question? [y/n]&quot;) yesno = input() #Starts appending sequence if yesno == &quot;y&quot;: print() print (&quot;What country do you want to append?&quot;) country_app = input() print() print(&quot;What continent do you want to append?&quot;) continent_app = input() QuizDB.append({ &quot;Country&quot;: f&quot;{country_app}&quot;, &quot;Continent&quot;: f&quot;{continent_app}&quot;, }) print() append_input() #exits function if n is given elif yesno == &quot;n&quot;: return #Prevents issues if initial input was something other than y or n. #Re-executes the first command else: append_input() append_input() . Do you want to add a new country/continent question? [y/n] a Do you want to add a new country/continent question? [y/n] s Do you want to add a new country/continent question? [y/n] y What country do you want to append? United States What continent do you want to append? North America Do you want to add a new country/continent question? [y/n] y What country do you want to append? Japan What continent do you want to append? Asia Do you want to add a new country/continent question? [y/n] y What country do you want to append? Ukraine What continent do you want to append? Europe Do you want to add a new country/continent question? [y/n] y What country do you want to append? Mexico What continent do you want to append? Europe Do you want to add a new country/continent question? [y/n] y What country do you want to append? Atlantis What continent do you want to append? Atlantic Ocean Do you want to add a new country/continent question? [y/n] y What country do you want to append? Tennessee What continent do you want to append? United States Do you want to add a new country/continent question? [y/n] n . Notice that you can input anything into the list, including fictitious places or incorrect information. This python code does not know fact from fiction. It will just store whatever you give it. That&#39;s how it works. . Now, I didn&#39;t put comments on the part where the if statement is satisfied. I did that since that would lead to a bit of confusion with what the associated command are, etc. I&#39;ll paste the commands associated with the if condition right here . if yesno == &quot;y&quot;: print() print (&quot;What country do you want to append?&quot;) country_app = input() print() print(&quot;What continent do you want to append?&quot;) continent_app = input() QuizDB.append({ &quot;Country&quot;: f&quot;{country_app}&quot;, &quot;Continent&quot;: f&quot;{continent_app}&quot;, }) print() append_input() . Line 1 is the if statement itself. If a user wants to append questions, he/she would have given a y response. | The question of which country to input is then given in the terminal. | Line 4 collects this input and stores it as country_app. app is the first three letters of &quot;append.&quot; | The notice to input the continent is printed into the terminal. This input is collected as continent_app | The inputted information is appended into QuizDB. | Notice how Country is associated with f&quot;{country_app}&quot;. The f, or format command is essentially used to bypass all of those issues with quotation marks. This and the curly brackets allows the value of the input (instead of country_app as a string) to be stored into the dictionary. A similar process is used for continents. | Finally, the function append_input() calls itself again to give the user a chance to input another country/continent set. | . Now, to test to see that the information is actually appended, we will take the quiz... again! And see me &quot;mess up&quot; on all the questions I intentionally misconfigured. . random.shuffle(QuizDB) #Define variables questions = 0 correct = 0 #Cycles through the quiz questions for i in QuizDB: questions += 1 rsp = question_with_response(i[&quot;Country&quot;]) if rsp == i[&quot;Continent&quot;]: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! The answer was&quot;, i[&quot;Continent&quot;]) #Calculates percent correct answers. percent = (correct/questions) * 100 #Prints accuracy of answers to terminal print(&quot;You scored &quot; + str(percent) + &#39;%!&#39;) . Question: What continent is Tennessee in? North America North America is incorrect! The answer was United States Question: What continent is United States in? North America North America is correct! Question: What continent is Peru in? South America South America is correct! Question: What continent is South Korea in? Asia Asia is correct! Question: What continent is Mexico in? North America North America is incorrect! The answer was Europe Question: What continent is Yemen in? Asia Asia is correct! Question: What continent is Atlantis in? what what is incorrect! The answer was Atlantic Ocean Question: What continent is Singapore in? Asia Asia is correct! Question: What continent is Japan in? Asia Asia is correct! Question: What continent is Tanzania in? Africa Africa is correct! Question: What continent is United Arab Emirates in? Asia Asia is correct! Question: What continent is Sweden in? Europe Europe is correct! Question: What continent is Mauritania in? Africa Africa is correct! Question: What continent is Ukraine in? Europe Europe is correct! Question: What continent is Austria in? Europe Europe is correct! Question: What continent is Uruguay in? South America South America is correct! You scored 81.25%! . There was one notable change I made. I initially set the questions variable to 0, and automated the increase of the question variable. See the for loop: . for i in QuizDB: questions += 1 rsp = question_with_response(i[&quot;Country&quot;]) if rsp == i[&quot;Continent&quot;]: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! The answer was&quot;, i[&quot;Continent&quot;]) . Notice that the first command associated with the for loop is increasing the value of questions by 1. That way, the number of questions is automated and I don&#39;t have to count to make a pre-set value. .",
            "url": "https://leonard514.github.io/FastPage/scripts/loop_scripts",
            "relUrl": "/scripts/loop_scripts",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Week 1 Review Ticket",
            "content": "Hi! . This is part of the Week 1 Review Ticket. If you came here, I hope you came here from the github issue. If not, please take a look right here. That being said, if you missed where the python, bash, and personal development submission parts are, they are in this list! . Python! | Bash! | Personal Development! | . Anyways, if you came from the github issue, you are probably here for the fastpages/web development part of the submission. That part of the submission is too complex to just stick a single link in the title without a dedicated post, so here’s to the changes! . Changes!!! . If you go back to the homepage, you may notice that the majority of the posts have vanished (with the exception of some word files and the weekly review tickets). This is intentional. The posts column would be far too messy if every markdown page and every jupyter notebook file I uploaded to the site landed in the column. The way I did this was to add the hide: true option to the front matter of all of my notebooks and markdown files (with the exception of the review tickets). I also added that to word_front_matter.txt in the action files, but unfortunately it doesn’t want to cooperate with me. So there are word files in the posts column. Sorry about that. . But how will I find all of your posts and notebooks? Well, for that you can refer to the search page if you want to look up a specific phrase, or go to the tags page! The tags page will provide a much better framework for organizing all of my notebook files and markdown files. And of course if you really need to go back and view a file I used for submission, go to my issues page! I won’t close any issues until the year ends. . However, I still have to add what I did. If you looked at my python and bash hacks, those serve as the .ipynb jupyter notebook files I added to the site. I also have a very comprehensive notes page in the taskbar (notice it’s between the tags and about me pages). In addition, I added two markdown posts for my Calc BC Class. One has multiple images of some fundamental concepts, while the other is a guide for showing work (since there are a lot of nuances in that class). As for my word files, those come from my English class. There are: . Directions to writing an Op-Ed | An Op-Ed Rubric | . How come I didn’t put that many files here? Because I’m smart enough to realize that if I put any turned-in assignments here that there’s the risk of someone copying my work… and what happens afterwards is nasty. . Now, here’s a table of my daily progress . Date Activities completed . August 22 | Review Ticket shown | . August 23 | Sent email to Mr. Yeung about concerns in working in groups (a partner was taking up my time with needing help getting set up). He gave me some very helpful tips. During class, I also learned to open jupyter notebooks in a web browser. Took notes on the “good life” video very late in the night. | . August 24 | Started the python script at this point. Was a little confused. | . August 25 | Started the bash script. I was confused. Finished the python vocabulary notes and made my first for loop in the python quiz! Uploaded files for other courses into fastpages. | . August 26 | Removed an if statement in the tags page which excluded pages with the hide: true front matter (this was to organize my fast page). Uploaded files for other courses into fastpages. | . August 28 | Finished bash script test. Added comment functionality to the majority of my files. Dealt with issues in image integration of notebooks and word file issues (ongoing) | . Remaining tasks . Tags in word files (I do have the categories in the word front matter file, but it’s not working for some reason.) | .",
            "url": "https://leonard514.github.io/FastPage/submissions/Week_1_Submission",
            "relUrl": "/submissions/Week_1_Submission",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "BC Procedures",
            "content": "Gotta Knows . (Know them.)[https://leonard514.github.io/FastPage/classes/BC/gotta_know] . Writing your work: Arrows . When showing work, minimize arrows. Instead attempt to stick to a up to down model, then left to right. . Using methods taught in class . When solving a problem, you are only allowed to use methods taught in class. This is likely to avoid any misconceptions about those methods not covered yet, although this does turn many of the problems into a game of whether the concept is prohibited since it wasn’t covered or if it should be used since it’s being introduced. . Writing the domain . Write the domain in interval notation. So instead of using -1 &lt; x &lt; 1, use (-1,1). Do this even if a single value is excluded from the domain. For example, if x=1 is excluded from the domain, write as (-∞,1)u(1,∞). Also, you have to use the u. Writing (-∞,1),(1,∞) is incorrect notation… since that’s the way it was written. . Limits and grouping symbols . If there is addition/subtraction going on in the rule of the limit which is not modified by multiplication/division, there must be grouping symbols (parenthesis) around the entire rule. This is to ensure clarity of what function is taken to the limit. Outside of this, grouping symbols are optional. . Limits and known rules . If the rule of a limit is known, it should be written out in full form (ex: x+1) rather than in f(x) form. f(x) form is usually only OK when given a graph of that function. . One-sided limits . One sided limits should always have the +/- superscripts of whatever value x is approaching. . Direct Substitution fails due to division by zero: not indeterminate . If a direct substitution fails due to division by zero, and the numerator is not zero, do not skip ahead to Does not Exist (infinity or negative infinity). You must first take the left and right limits, and if the infinities have the opposite signs (like in 1/x), then the Does not Exist reasoning is actually that the left limit is not equal to the right limit. . Direct Substitution: infinity . If there is a limit as x approaches infinity, do not directly substitute infinity like it is a variable or a number, because it is neither of those. . Piecewise Functions: Conventions . When listing a piecewise function, the piece with the least domain is listed first, and the piece with the greatest domain last. As for the domains, there will always be a greater than/equal to, and never a less than/equal to. That is, the lower bound of the domain (if not negative infinity) is included, and the upper bound is excluded. Also, when stating the domain, x always has to be listed first if it is strictly less than a value or strictly greater than a value (ex: x &lt; 4, NOT 4 &gt; x). This is likely in place to establish consistency in defining piecewise functions. . Squeeze Theorem: Sign of appended functions . When using the squeeze theorem on a limit, any appended functions/actions (like x+1, or taking the reciprocal of all terms) must have their signs checked for the x being approached. . If the sign is negative, the inequality signs must be flipped in the first step, and in the second step the terms must be re-ordered from least to greatest. | Taking the reciprocal of all terms flips the inequality signs since the least term becomes the greatest (since it has the least denominator) and the greatest term becomes the least (with the greatest denominator). | If the sign of an appended function is zero, there must be two squeeze theorem sequences performed for approaching x from the left and right sides to account for the two sides of a limit (and the effect of signs on the inequality signs). | . Using a creative one . When there is two of the same term on the denominator, there is a creative one. The term functions as a 1 within the function and has a singular effect: creating a removeable discontinuity (hole) where x causes a 0/0. There is no “canceling” of terms since the terms still play a role. When the terms become one, write ones on them. . Using a unique creative one as part of a limit to infinity/negative infinity . When taking a limit to infinity/negative infinity and an indeterminate result is yielded(infinity over infinity… and the like), it is possible to multiply the entire rule by a unique creative one. Typically, this will involve multiplying both sides of the fraction by something like (1/x^2). There are special parameters, however. The denominator must not equal zero, and its limit must also exist. This essentially means in general cases, we multiply by (1/x^a), where a is the greatest power an x in the denominator is raised to. Occasionally, both sides of the fraction will be multiplied by (1/sqrt(x^2)) or some other root of a polynomial. This can happen if one side of the fraction is under a root (and the other isn’t). In this case, the side under the root can have x^2 divided as normal, but the other side of the fraction must take into account that sqrt(x^2) is the absolute value of x, which is a piecewise function. Any roots which start out being even roots but having odd powers at the end will deal with absolute value. The sign of that part of the creative one then depends on what x is approaching (can be positive/negative depending on which piece’s domain the value x is approaching falls on). . Now, what I haven’t seen yet is the x approaching the value of the piecewise function where x=0. It is very difficult to guess how I would be expected to react to this. It is likely I will be asked to go with the piece where the non-opposite function in the absolute value is so that I can follow conventions. . Limit of a composite function . There are times when you are asked to take the limit of f(g(x)) as x approaches c. There are two approaches you can take for this limit . Limit inside composite function: to use this strategy, you must first verify that g(x) is continuous at x=c, and that f(x) is continuous at x=g(c). If this works, then f(g(x)) is continuous and lim(f(g(x))) = f(lim(g(x))). If this is not the case, you must use a different method. The use of this different method is likely to prevent writing infinity/negative infinity as a number/variable, and/or to circumvent complications if there is a hole or if the function’s output at a certain point is not equal to the limit (in which case f may be undefined or output the wrong value, since this is a limit we’re taking (not where the function f is defined)) | Input-output method: this accounts for the fact that as the definition of a composite function f(g(x)), x serves as the input to g(x), and the output serves as the input to f(x), which then gives the final input. To do this, show a separate step where the limit of the inside function is taken (as x approaches c, g(x) approaches [value]). Then, take the limit as the inside function approaches the limit you calculated, and write out f(g(x)) as usual. That inside function is your input to f. Then, get your solution. | Definition of differentiability . Differentiability is not the same thing as continuity. Differentiability is defined as when the limit that serves as the definition of the derivative exists. Nothing more. .",
            "url": "https://leonard514.github.io/FastPage/classes/BC/procedures",
            "relUrl": "/classes/BC/procedures",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "BC Gotta Knows!",
            "content": "Special Trig Limits + Squeeze Theorem . . Continuity Definition . . Continuity Properties + Composite Continuity . . Differentiability Definition . .",
            "url": "https://leonard514.github.io/FastPage/classes/BC/gotta_know",
            "relUrl": "/classes/BC/gotta_know",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Bash Test Script!",
            "content": "Hi! Welcome to my first bash notebook. There will be two scripts featured here: An installation verification script and a github updating script. Below is the installation verification script. . Check Installation Script . # The bullet of updating a repository is addressed in the next script below #uses basic version commands echo Basic Python Installation Check python --version python2 --version echo &quot;&quot; echo &quot;&quot; #uses basic version commands echo Basic Conda Installation Check conda --version echo &quot;&quot; echo &quot;&quot; #uses basic version commands echo Basic Jupyter Installation check jupyter --version echo &quot;&quot; echo &quot;&quot; echo Basic Checks Complete echo &quot;&quot; #sets up variables to check conda installation. echo Check Conda Installation using Conda conda=&quot;conda&quot; checkconda=$(conda list | grep $conda) nconda=$(echo &quot;$checkconda&quot; | wc -l ) #checks if conda is there or if the grep command had output if [[ $nconda &gt; 0 ]]; then echo &quot;$conda found!&quot; echo &quot;&quot; echo &quot;&quot; echo &quot;$checkconda&quot; # If there&#39;s no conda... installs conda and exits the script so the base prompt appears. else echo &quot;$conda not found. Installing so the script doesn&#39;t break!&quot; echo &quot;&quot; echo &quot;&quot; cd /tmp wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh chmod +x Anaconda3-2022.05-Linux-x86_64.sh echo &quot;Make sure that you reply yes to the final prompt about the conda (the default is no).&quot; echo &quot;After this, the script will exit and you must reload Windows Subsystem Linux to make sure the base prompt is present.&quot; echo &quot;Then, run this script again.&quot; ./Anaconda3-2022.05-Linux-x86_64.sh exit fi echo &quot;&quot; echo &quot;&quot; #sets up variables to check jupyter installation with conda echo Check Jupyter Installation using Conda jupyter=&quot;jupyter&quot; checkjupyter=$(conda list | grep $jupyter) njupyter=$(echo &quot;$checkjupyter&quot; | wc -l ) #checks if jupyter is present if [[ $njupyter &gt; 0 ]]; then echo &quot;$jupyter found!&quot; echo &quot;&quot; echo &quot;&quot; echo &quot;$checkjupyter&quot; # jupyter not present, installs jupyter else echo &quot;$jupyter not found, installing&quot; echo &quot;&quot; echo &quot;&quot; conda install jupyter fi echo &quot;&quot; echo &quot;&quot; #sets up variables to check python with conda echo Check Python Installation using Conda python=&quot;python&quot; checkpython=$(conda list | grep $python) npython=$(echo &quot;$checkpython&quot; | wc -l) #checks if python is present if [[ $npython &gt; 0 ]]; then echo &quot;$python found!&quot; echo &quot;&quot; echo &quot;&quot; echo &quot;$checkpython&quot; # No python, installs python and related stuff else echo &quot;$python not found, installing!&quot; echo &quot;&quot; echo &quot;&quot; sudo apt install python2 python3 python3-pip pip install bash_kernel python -m bash_kernel.install conda list | grep $python jupyter kernelspec list fi . Basic Python Installation Check Python 3.9.12 Python 2.7.18 Basic Conda Installation Check conda 4.13.0 Basic Jupyter Installation check Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Basic Checks Complete Check Conda Installation using Conda conda found! # packages in environment at /home/leonardw48247/anaconda3: anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 Check Jupyter Installation using Conda jupyter found! jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 Check Python Installation using Conda python found! ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 msgpack-python 1.0.2 py39hff7bd54_1 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 . Github Script . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section for setting project directory, the folder where the repository will be imported, and importation of repository export project_dir=/mnt/c/project_repository export project=$project_dir/FastPage export project_repo=&quot;https://github.com/Leonard514/FastPage.git&quot; cd ~ # start in home directory # Conditional block to make a project directory... if it doesn&#39;t exist yet if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exist... making directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exist... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; # This is meant to export a local repository to GitHub (online) cd $project . Using conditional statement to create a project directory and project Directory /mnt/c/project_repository does not exist... making directory /mnt/c/project_repository Directory /mnt/c/project_repository exists. Directory /mnt/c/project_repository/FastPage does not exist... cloning https://github.com/Leonard514/FastPage.git Cloning into &#39;FastPage&#39;... remote: Enumerating objects: 1780, done. remote: Counting objects: 100% (1578/1578), done. remote: Compressing objects: 100% (606/606), done. remote: Total 1780 (delta 828), reused 1428 (delta 761), pack-reused 202 Receiving objects: 100% (1780/1780), 14.78 MiB | 13.10 MiB/s, done. Resolving deltas: 100% (858/858), done. Directory /mnt/c/project_repository/FastPage exists. . Slack Check Complete! . And this? Just to let you know I have slack installed. . # test for a kernel installation test=“python3” # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo “$check” else # less than zero echo “$check” fi . Still don&#39;t believe me? Well this should change your mind. .",
            "url": "https://leonard514.github.io/FastPage/scripts/bash_test",
            "relUrl": "/scripts/bash_test",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Writing An Op Ed Piece",
            "content": "Writing an Op-Ed Piece . Requirements: . - 400-800 words, typed, (Copy submitted to teacher must be double-spaced, MLA format) . - Due Tuesday 9/6 at midnight . - You must choose an actual newspaper/journal to submit your piece to. See theopedproject.org for a list of possibilities. Identify the specific publication that you are submitting to on your piece. . - Clearly defined subject matter that engages reader with opening . - Distinct and plausible recommendations for action and change (failure to do this will result in a full grade level dock) . - Acknowledgment of opposing point of view . - Vibrant word choice reflective of personal voice and writer’s ethos. . According to The Wall Street Journal: Your article should be a strong argument about an issue in the news. It should not be a response to a Journal article; that is a letter to the editor. So this means that you should choose something about which you are passionate. . Please visit http://www.theopedproject.org/ for further resources . According to Duke University: . - Track the news and jump at opportunities. . - Make a single point — well. . - Put your main point on top. . - Tell readers why they should care. . - Offer specific recommendations. . - Showing is better than discussing. . - Embrace your personal voice. . - Play up your personal connection to the readers. . - Use short sentences and paragraphs. . - Avoid jargon. . - Use the active voice. . - Avoid tedious rebuttals. . - Acknowledge the other side. . - Make your ending a winner. . - Relax and have fun. . - Don’t worry about the headline. . - Offer graphics. .",
            "url": "https://leonard514.github.io/FastPage/word/2022/08/25/Writing-an-Op-Ed-Piece.html",
            "relUrl": "/word/2022/08/25/Writing-an-Op-Ed-Piece.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Op Ed Rubric",
            "content": "Traits 6 . (A+) . 5 . (A-/B+) . 4 . (B) . 3 . (C) . 2 . (D) . 1 . (F) . . Ideas | Clearly stated insightful claim outlining argument with well chosen quotes from reputable sources. . Demonstrates a thorough critical understanding of the issue. Explores the topic thoughtfully, acknowledges opposing points of view, and makes excellent use of the rhetorical strategies discussed in class. . | Clear argument statement and necessary supporting quotations that are cited correctly. . Demonstrates critical understanding of the issue. Explores issues well, acknowledges opposing points of view and makes strong use of rhetorical strategies discussed in class. . | Clear claim statement but it may lack depth. May not always include best quotations or may use obvious quotations. Demonstrates clear understanding of the issue. Explores the issues of this topic, may have implicit acknowledgment of opposing points of view, and successfully uses rhetorical strategies discussed in class. | Claim statement is too broad. Quotations are minimal or poorly chosen. Demonstrates some understanding of the issue. Explores some issues, implicit or missing acknowledgment of opposing points of view, and makes some use of the rhetorical strategies discussed in class. | Claim statement is unclear or simple &amp;/ more quotations are needed. Understanding of issue is shallow or not clearly demonstrated. Implicit or missing acknowledgment of opposing points of view Makes very little use of rhetorical strategies discussed in class. | The essay needs a claim statement and details. Understanding of the issue/articles is extremely limited or nonexistent. No use of rhetorical strategies discusses in class. | . Organization | Response is coherent, well focused and logical. The response contains logical structure that guides the reader and a conclusion which insightfully summarizes argument presented. Includes distinct and plausible recommendations for action and change. Order of information presented is compelling to read. . | Response is focused and logical. The response contains topic sentences which guide the reader and a conclusion which summarizes the argument presented. Includes plausible recommendations for action and change. The order in which the information is presented is successful.. | Response is focused on argument. The response contains topic sentences that guide the reader and a conclusion which loosely summarizes the argument. Includes recommendations for action and change but may not be as specific or plausible. The order in which the information is presented is appropriate | Response is somewhat focused on the argument. The response contains topic sentences and a short or inadequate conclusion. Missing or underdeveloped recommendations for action and change. The order in which the information is presented may confuse the reader. | Response is poorly focused on the argument, if at all. Topic sentences that are present are poorly written and if conclusion is present it is weak. Missing or underdeveloped recommendations for action and change The order in which the information is presented is confusing. | Response lacks logical organization. Topic sentences are nonexistent/ a conclusion may be missing. Missing recommendations for action and change. | . Voice | Voice expresses interest &amp; complete understanding of topic. Engages reader with a reason to care through unique personal perspective evident through use of compelling ideas, engaging language, and relevant details. Appropriate for purpose &amp; audience. . | The voice expresses interest in and understanding of the topic. Shows personal connection to topic and audience. Uses some compelling engaging language to meet the purpose of the assignment. | The voice expresses interest but needs to show more understanding. While the voice does engage the reader, it lacks a consistent personal connection. Has some engaging language but could use more | The voice needs to be more interesting and express more understanding. Reader questions the personal connection of the author. Language is not vivid or engaging | The voice does not show and interest in or understanding of the topic. There is little, to no, personal connection to the author in the voice or writing. | The writer needs to understand how to create a voice. | . Word Choice | Reflects careful thinking about subject. Words are rich, colorful, &amp; precise. Uses specific details to show ideas instead of tell. Words energize writing. Language moves &amp; enlightens the reader. Vocabulary striking, varied. Strong active verbs dominate. Verb tense shifts are correct. | The word choice creates a clear message. Broad range of words that are carefully chosen. Word choices energize writing. Vocabulary varied. Active verbs throughout the essay. Verb tense shifts are correct. | The word choice is appropriate and functional. The words work but might not energize the writing. Attempts at colorful language may be overdone. May include some passive verbs. Verb tense mostly correct. | The word choice is too general and uses many familiar words and phrases. Expression is mundane. Words work but do not capture interest. Passive verbs and linking verbs may dominate. May include many verb tense errors. | Words are colorless, flat, imprecise. . Monotonous repetition. Images are fuzzy or absent. Many passive verbs and linking verbs. Many verb tense errors. . | Limited vocabulary. Words that do not fit text. Words imprecise, wrong. Vague language hides . meaning of message . | . Sentence Fluency | Sentences are skillfully written. Writer consistently uses a variety of sentences. The writing is natural and flows smoothly. Sentences begin with a variety of words. Relatable, accessible language. | The sentences are skillfully written. Writer consistently uses a variety of sentences, fewer than a 6. The writing is natural and flows smoothly. Sentences begin with a variety of words. | The writer uses some variety in sentences. Paper has some rough spots. Not all sentences begin the same. No sentence problems exist. More sentence variety needed. | Writer uses simple sentences. Some sentences are choppy or awkward, but most are smooth and clear. Sentences tend to begin the same. A few sentence problems need to be corrected. | Writer doesn&#39;t use much variety in sentences. Little to no use of linking words to connect sentences. Uses short, repetitive sentence patterns. Has many sentence problems. | The writer needs to learn how to construct sentences. | . Conventions | Grammar &amp; punctuation correct, &amp; copy is free of all errors. Writing is complex enough to show skill in using a wide-range of conventions. All citation are correct and present. Meets word count of 400-800 words. | The essay has one or two errors that do not interfere with the reader’s understanding. . All citation are correct and present. Meets word count of 400-800 words. | The essay has a few careless errors in punctuation and grammar. Most citations are correct and present. May not meet word count of 400-800 words. | The errors in the essay confuse the reader. Most citations are correct and present. May not meet word count of 400-800 words. | The number of errors makes the essay hard to read. Many errors with citations. May not meet word count of 400-800 words. | Help is needed to make corrections. Little to no citations present. May not meet word count of 400-800 words. | .",
            "url": "https://leonard514.github.io/FastPage/word/2022/08/25/Op-Ed-Rubric.html",
            "relUrl": "/word/2022/08/25/Op-Ed-Rubric.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Python Quiz Script!",
            "content": "Hi! I&#39;m here to show you my Python script. But first for the hacks... I got an image and a link. The link is for my vocab table, and the image is below. . . Ok, enough of that. I&#39;ll show you the code in its full beauty first, and if you need help understanding how any part of it works, I&#39;ll explain as thoroughly as I can. . import getpass, sys #defines question and answer: a prompt variable goes in the parenthesis. It essentially spits out user input. def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) #defines question_with_response: collects the questions from a list with prompt, prints it, collects input, and stores it. def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg #variables for number of questions and number of correct answers questions = 10 correct = 0 #initial prompt print(&#39;Hi &#39; + getpass.getuser()) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) #list of questions and answers. Also converts answer list into iteration so next command works. Question_list = [&quot;Is your answer input or output?&quot;, &quot;What command is used to include other functions that are developed?&quot;, &quot;What is the collection of these functions called?&quot;, &quot;What command was used to make the function that gave you this question?&quot;, &quot;what is Answer_list in iter(Answer_list)?&quot;, &quot;What command in this example is used to evaluate a response?&quot;,&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;, &quot;What type of text is the variable called &#39;correct&#39; in this script?&quot;, &quot;What is it called to print a string (as output) to terminal?&quot;, &quot;What is a group of commands defined under a name?&quot;] Answer_list = [&quot;input&quot;, &quot;import&quot;, &quot;library&quot;, &quot;def&quot;, &quot;parameter&quot;, &quot;if&quot;, &quot;expression&quot;, &quot;dynamic text&quot;, &quot;string concatenation&quot;, &quot;function&quot;] Answer_iter = iter(Answer_list) #cycles through this set of command for each set of question and answer. Also accepts correct answers and rejects bad answers. for i in Question_list: rsp = question_with_response(str(i)) if rsp == str(next(Answer_iter)): print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) #Calculates percent correct answers. percent = (correct/questions) * 100 #Prints accuracy of answers to terminal print(&quot;You scored &quot; + str(percent) + &#39;%!&#39;) . Hi leonardw48247 You will be asked 10 questions. Question: Are you ready to take a test? Answer: Question: Is your answer input or output? input is correct! Question: What command is used to include other functions that are developed? import is correct! Question: What is the collection of these functions called? library is correct! Question: What command was used to make the function that gave you this question? def is correct! Question: what is Answer_list in iter(Answer_list)? parameter is correct! Question: What command in this example is used to evaluate a response? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! Question: What type of text is the variable called &#39;correct&#39; in this script? expression is incorrect! Question: What is it called to print a string (as output) to terminal? string concatenation is correct! Question: What is a group of commands defined under a name? function is correct! You scored 90.0%! . Explanation Portion . Alright... where to start... oh, the import commands would be a good start! . import getpass, sys . This imports the functions getpass and sys into the script, making them executable. Where did those functions come from? They came from the libraries, which is essentially a collection of functions that comes with your python installation. Pretty neat!. Next, we got our own function. . def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) . On the first line, we got the def command, which defines our function. The function&#39;s name is question_and_answer (fairly intuitive since it asks you a question and requests for an answer), and there is a prompt in the parenthesis. This prompt is a variable, and whenever this function is called (this should look like question_and_answer(&quot;insert text here&quot;)), the variable prompt is set to whatever is within the parenthesis. The colon is there for syntax purposes and should be kept. | On the second line, the print() command is used. Within the parenthesis is &quot;Question: &quot; to ensure that a question prompt is printed when the file is executed, along with + prompt. The + concatenates/prints whatever text/string is stored in the prompt variable. The output to the terminal is Question: (prompt text here) | On the third line, a variable named msg is set equal to the result of the command input(). As the name implies, the function will collect user input and set it equal to a variable. This also means the script will pause when user input is being collected. | On the fourth line, the print() command is used again, this time with the string Answer: to proceed the text of the variable msg, which was set equal to the input on the third line. | . So to sum it up, this function collects an input string from a user and re-prints it to the terminal. Let&#39;s move on to the other function. . def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg . If you paid attention, the first three lines of this function question_with_response were very similar to the first three lines of the question_with_answer function. The last line is what we want to look at. The return command ends the execution of the function and sends the contents of msg to the main script in execution. The contents of msg can therefore be used outside the function. . questions = 10 correct = 0 . These are more variables. The variable questions lets Python know how many questions there are, because knowledge of how many questions there are is necessary for score calculation. correct, the number of correct answers, is 0 since no questions have been answered yet. . print(&#39;Hi &#39; + getpass.getuser()) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) . The first line prints to the prompt, and this is the first line of code executed. getpass.getuser() is linked to that function we imported at the beginning, and it essentially is a placeholder for the username of the person running the script. Might as well say hi and call the test-taker by his/her name! | The second line prints about being asked questions. str(questions) must be used to print the number of questions since questions is set equal to a number (it must be set equal to a string to print, and the str() command converts it into such). | The third line is our question_and_answer function from before! If you remember what it does, it prints out the prompt in the parenthesis, collects a user input, and prints that input into the prompt. | . Now for the next bit of code! . Question_list = [&quot;Is your answer input or output?&quot;, &quot;What command is used to include other functions that are developed?&quot;, &quot;What is the collection of these functions called?&quot;, &quot;What command was used to make the function that gave you this question?&quot;, &quot;what is Answer_list in iter(Answer_list)?&quot;, &quot;What command in this example is used to evaluate a response?&quot;,&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;, &quot;What type of text is the variable called &#39;correct&#39; in this script?&quot;, &quot;What is it called to print a string (as output) to terminal?&quot;, &quot;What is a group of commands defined under a name?&quot;] Answer_list = [&quot;input&quot;, &quot;import&quot;, &quot;library&quot;, &quot;def&quot;, &quot;parameter&quot;, &quot;if&quot;, &quot;expression&quot;, &quot;dynamic text&quot;, &quot;string concatenation&quot;, &quot;function&quot;] Answer_iter = iter(Answer_list) . The first two lines are relatively self-explanatory (though lengthy). I made a list called Question_list that has a list of all the questions of the quiz, and Answer_list has all the answers. The first items on the lists will be the ones to appear on the quiz first, but more on that later. The third line is less self-explanatory. I essentially converted my answer list into an iteration. Why would I do that? Well really it&#39;s because there&#39;s a command in the next bit of code that doesn&#39;t work if I don&#39;t convert the list into an iteration. That&#39;s just the way it is. Now it&#39;s time for the exciting part. . for i in Question_list: rsp = question_with_response(str(i)) if rsp == str(next(Answer_iter)): print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) . I know this is a lot to take in. Bear with me for a little while. . The first line is a for loop. The i is a variable used to count how many items are in the related list, Question_list, and how many times the commands within the for loop are executed. You could use any variable, though i is the most common (probably since the word &quot;iteration&quot; starts with an i, though I could be wrong). All commands connected to the for loop (which is this entire chunk of code) is executed once for every question in Question_List. Why would I want to do that? Let&#39;s move to Line 2. | In the second line, we set a rsp variable. We call the question_with_response function, which if you remember prints a question prompt and collects input, sending it to the main script. This input will be set equal to the rsp variable. Notice what is inside the function&#39;s parenthesis: str(i). Remember i is the variable from the for loop which is going over each question in Question_list. So every time this is executed, the prompt will be the next question in the list. | In the third line, there is an if statement. If the condition of the if statement is satisfied, any connected code is executed. In this case, the condition is that the input variable rsp is equal to... let&#39;s deconstruct that code. str(), as mentioned before, turns a number/value into a string. In my tests, the printing of the answer was being picky, so I used this command even though there&#39;s no numbers involved. | next(Answer_iter) is the way that the next answer on the list will be used every time the command is executed. next() moves on to the next item in the iteration whenever executed. For some reason, next() doesn&#39;t accept lists, which is why we made Answer_iter. | . | So back to what I was saying... the condition is that the input variable rsp be equivalent to the correct answer of the question in the prompt. If this condition is satisfied, appropriate code is executed for a correct answer: | In line 4, we print their input (still stored in rsp) and also that it&#39;s correct. | In line 5, we increase the correct variable by one since a correct answer was given. | Line 6 is else. If the condition of the if statement is not fulfilled, any code connected to the else statement is executed instead. That would mean getting a question wrong. | So line 7 prints that the input was incorrect. | . These 7 lines execute 10 times for the 10 questions. Doing this makes the code more concise than typing out the same commands 10 times in a script. Now, the rest of the script should be a breeze. . percent = (correct/questions) * 100 . This line, as implies, calculates the percentage of questions correctly answered. It takes the number of questions correctly answered and divides by total number of questions (these are all variables by the way, which are set equal to values/numbers), then multiplies by 100. This number is set equal to the percent variable. . print(&quot;You scored &quot; + str(percent) + &#39;%!&#39;) . This line prints the percent score. Keep in mind that since the variable percent has a numeric value that the str() command must be used to convert it to a string. . That&#39;s the end of the script! I hope you had a good time learning about how this works, and I hope you will use some of these techniques in your future work. .",
            "url": "https://leonard514.github.io/FastPage/scripts/python_quiz",
            "relUrl": "/scripts/python_quiz",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Week 0 Review Ticket",
            "content": "Hi! . This is a submission for the Tools/Equipment hack. If you want to see index.html, you might as well check out home. . Anyways, better start showing you my stuff. My main github is here. You were probably interested in seeing the insights page as well, so I’ll stick it in here. . Oh yeah, you also wanted to see me using VSCode, which is how I’m writing this page. . VSCODE . . Notebook . And then there’s my Jupyter notebook, which is found at this link. Yeah, I know it has the default title. Going to have to ask around to figure out how that stuff works. . Anyways that’s all the submission-related stuff, but I think it’s also a good idea to keep a journal… of what I’ve done, and what I have left to do. . Here is a table of my progress. . Date Activities completed . August 17 | Class started. Installed VSCode and the windows version of a bunch of programs (oops) | . August 18 | Installed Windows Subsystem Linux. Installed python, jupyter, anaconda, and a lot of other software the way I was supposed to do it. | . August 19 | Fastpages development begins. Created the repository and did basic edits | . August 21 (night) | Fastpages development continues with this post, index.html, and about me. Make the Jupyter notebook. Used VSCode with my fastpages development (including this page) | . Remaining tasks: . Refine the Jupyter Notebook (having a title, markdown integration) | Image integration working fine, although I need a way to control resolution (since some images are massive) | .",
            "url": "https://leonard514.github.io/FastPage/submissions/Week_0_Submission",
            "relUrl": "/submissions/Week_0_Submission",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "A Print Test Script!",
            "content": "print(&quot;Hello World!&quot;) print(&quot;But that&#39;s boring. Let&#39;s try something different&quot;) print(&quot;Supercalifragilisticexpialidocious!!!&quot;) print(&quot;Pneumonoultramicroscopicsilicovolcanoconiosis!!!&quot;) print(&quot;Now that&#39;s better.&quot;) . Hello World! But that&#39;s boring. Let&#39;s try something different Supercalifragilisticexpialidocious!!! Pneumonoultramicroscopicsilicovolcanoconiosis!!! Now that&#39;s better. .",
            "url": "https://leonard514.github.io/FastPage/scripts/print_test",
            "relUrl": "/scripts/print_test",
            "date": " • Aug 22, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Notes",
          "content": "Week 1 Focus and Habits Hack . Video Notes (includes 10 insights) . Origins . She sent a survey about what students thought about Yale culture; students are stressed about being in Yale and can’t enjoy pleasures or take advantage of opportunities | 40% of college students have greater than average stress, a third have severe depression, more than 40% have lack of hope, etc. | Santos therefore wanted to help using her knowledge in psychology (including positive psychology, where happy people are studied, and behavior change, to figure out how to change habits)… and made a course about it (Psychology and the good life) | 2 parts: positive psychology and the practice of the good life. To build this practice, rewiring habits became part of the syllabus (including gratitude, social connection, sleep, etc.) | No changes to syllabus upon submission, became popular | . Class Content: 10 insights . Happiness is controllable and can be improved (some is controlled by heritability, but not all) | Location of residence, salary, and other life circumstances matter less than we think (positive and negative events have a temporary impact on happiness). Therefore, removing the “bad stuff” isn’t the way to maximize happiness. | It is challenging (but possible) to become happier. This requires building daily habits that happy people have. The agile methodology, like the “Good Life” course, requires that habits be built. These habits will include having a daily standup meeting for planning and task delegation, maintaining issues for short-term tasks and the scrum board for organizing those tasks. This ensures that tasks are completed at a consistent pace in accordance with the agile methodology (Principle 8). GI Joe Fallacy: A cartoon claimed knowing a concept/skill is half the work, and that is false. The skill must also be put into practice, and that’s the majority of the work. | . | Intuitions about happiness can be inaccurate. The mind forecasts about what makes us happy (ex: salary, possessions), but increases in these things do not correlate with significant increases in happiness. | Happy people make time for social connections (spend more time with others). The agile framework would require working and with other people on computer projects. Communication in the agile framework requires in-person, face-to-face conversation (principle 6). This teamwork makes potential for social connections between effective group members, and this in turn may enhance happiness. | Helping others helps us (more than we expect) by making us happy. Helping others is integrated into the agile framework as when a student is having trouble with code, other group members can work with that student and teach how to fix the issue (this is also part of leadership skills) to help the group move along (Principle 4). This willingness to share help will ultimately lead to a better project and help with learning programming… along with the happiness along the way that comes with being helpful. | Make time for gratitude… daily. Happy people think/talk about the better people (rather than the annoying people). Writing down a list of good events daily increases happiness. It is also good to write a letter of gratitude and read it in-person to the person you are thanking. This reading of the letter connects the most with Agile Principle 6 (face-to-face conversation is the most effective mode of communication) | Healthy practice matter more than we think (exercise, sleep, etc.) Workouts has been shown to boost happiness for the day, while sleep deprivation significantly decreased happiness, some to depression levels. | Mindfulness (be in the present). Mindfulness is being aware of present sensory input (ex: how your feet feel when you stand, the room temperature, any sounds perceived, the color of your dish, etc.). More time spend in mindfulness is correlated with greater happiness, even compared to thinking about pleasant but non-present things. | Become wealthy… in terms of time. Time famine is being too busy… and time affluence is the opposite. People maximizing time affluence are happier. | Gratitude Note Experience . Letter to someone on campus . I wrote my letter to my teacher, Mr. Yeung. I was having a problem working with a group member, as I was helping him along every step of the way through setup. This left me with no time to do my own work in class. So I emailed him about the issue, and he told me to tell my partner three things: . Consult the blog/guide and read through the steps | If confused, ask me for help. Ask after 5 minutes of attempts to resolve the issue. | If I was too busy or didn’t know how to help, ask Mr. Yeung for help. | This allowed me to spend time during class working on my computer projects, and it also helped my partner gain some degree of independence during the learning process. I especially saw value in having group members consult a guide. This was very reassuring for me, especially since I tend to have anxiety during the early parts of a class (due to familiarization with class format and the like). So to thank him, I wrote him my letter. I already gave the letter to him at the time of writing, so I can’t copy the contents… but I can paraphrase from memory . In the letter, I thanked him for replying to the email, and told him all the good things that stemmed from this reply: having more time to work on the project, my partner being able to learn with a degree of independence (that is, not fully relying on my help), an understanding that I can refer confused group members to guides so I can continue to help in other ways, and a boost in my collaboration skills which will be important for college and the workforce. I also admitted that working in groups has been a challenge for me, and afterwards thanked him for helping me address it. . When I finished reading the letter to him, he told me he was glad to help with my issue. As far as I remember, the happiness I experienced was not a rush… but more deep inside, like a calm. This could have been my anxiety/stress dissipating. . During the next class, I thought of an application of his advice in a context outside of school. I know that the practice in groups I will get in this class will be invaluable in the future. . Letter to someone at home . I wrote my letter to my mother. I thanked her for helping me with an extracurricular activity last week, and I thanked her for helping me write an email about a concern with work in this class. She proceeded to give me all the credit for writing the email. I also thanked her for giving me good food and transporting me to school and other activities so that I can work with a clear mind, work in groups, and ask students and teachers for help with my work. I also thanked her for lending me her phone to ask my sister for help in AP Calculus BC, a tough course. I finally thanked her for her support in my efforts, especially any support that I haven’t given enough attention to. . My mother smiled and hugged me, and she asked why I was thanking her. When she asked if it was due to her help with improving my anxiety about this class (and other things), I nodded. . I felt it was nice that I made her happy by giving attention to everything she does to support me. Perhaps I can do this with other people as well. . NEW: Personal Goals (these are long-term) . Quit using grades as a measure of success, find some way to stop discrediting my own efforts | Get decent amounts of sleep while being able to do all my schoolwork | Be more open to talking with trusted individuals when seized with a major panic attack | Learn how to better work in groups | Remove the assumption that I can only trust myself to take responsibility | . Gratitude List . I thank my mother for patiently helping me improve for the past 17.75 years and helping me through all of my problems | I thank Mr. Yeung for helping me with advice in working with groups in this class | . Week 1 Python Vocab . Term Definition . Variable | An abstraction in a program that can hold one value/string at a time | . Command | A procedure executed by a computer/program | . Static text | Text within a program which does not change | . Dynamic text | Text within a program that does change, often due to inputs/outputs of various commands. Can be different depending on how a program is executed | . Output | The resulting text/values after a command is executed. This can be printed to a terminal using the print() command | . Input | A user answers a prompt with a string or other value. This is then often stored in a variable to be re-used later. | . Sequence of Code | Any code in which two or more lines are involved (ie, any code more complex than a single command) | . String | A sequence of characters/words, often enclosed in quotation marks | . Parameter | A variable which serves as input for a command/program | . function | Similar to a variable, but for commands. A function is defined with the def command (or other defining command), and afterwards the name of the function. The commands after the function name are then associated with the function throughout the entire script | . Procedural abstraction | Grouping a series of repeatedly-used commands | . library | a collection of code/functions that a program uses to optimize code execution. The program can refer to many parts of the library using importation commands to call certain functions/commands. | . String concatenation | When a string is printed to the terminal | . Python commands . Command Result . print(TEXT) | prints TEXT to the terminal | . def definition_name(commands here) | defines a function, which is a group of commands defined under a name | . definition_name(commands here) | execution of the function | . var_name = (input) | defines a variable based on input or as a predetermined value/string | . import | imports functions from a running environment | . if | if a specified condition is satisfied, the associated command(s) are run | . else | if the if condition is not satisfied, the command(s) associated with this are run instead | . list_name = [item1, item2, item3…] | Makes a list. Very useful if you are executing the same commands over and over and just want to modify an input. | . for | Does two things: cycles through a list, and executes a set of commands once for every item in that list. Each item in the list will be set equal to a variable (most commonly i) for input. | . iteration_name = iter(list_name) | Takes a list and turns it into an iteration (defining it as a variable). Required to run next. | . next(iteration) | Cycles to the next item in an iteration when executed… without re-executing any commands. | . Week 2 Python Terms Notes . Term Definition . Type | A form/variant of variable, being either a string (Ex: var = “john walked”), integer (ex: int = 18), float (ex: num = 100.0, notice the decimal), list (ex: cars = [SUV, sports car, sedan], notice square brackets), or a dictionary (includes curly brackets and several variables) | . Key | Another word for variable | . index | essentially the function of the common i variable in a for loop (cycles through entries in a list) | . Procedural Abstraction | Multiple HTML fragments &lt;html&gt;&lt;/html&gt; used, which are put together into a website | . Week 2 HTML Notes . Importing a Theme . Pictures say a thousand words. Therefore, I’ve integrated pictures to explain what’s going on with my site. . I attempted to integrate the midnight theme into my fastpages (at _config.yml). It looks like this: . . Upon uploading the modified _config.yml theme to my FastPage repository, I found out that there was no changes occurring. It was only some time later that I found that the CI task was consistently failing due to syntax errors in my _config.yml file. . . Every CI task was failing when I did the commit. The syntax error in _config.yml effectively made it impossible to update my website. It was then that I was told that I was not supposed to put midnight, but rather pages-themes/midnight@v0.2.0 in the remote theme configuration of _config.yml. Upon adding the fix, the CI tasks worked again. . . This fix was a success. The midnight theme was applied. I have some before/after images. . . . There is a very noteworthy change that comes with implementation of the midnight theme: the top bar of the website is removed. This top bar includes my most crucial pages (the search page, the tags page, this page, and my about me). Removal of easy access to the tags page is a special concern, since this serves as the backbone of organization for my website. As a result, the theme change is temporary. . Modifying dark mode . This one was interesting. I imported all the sample code, then had to modify it. The default code made the background of the website all-black, but something just wasn’t right. The top bar had the same color as the rest of the page. Therefore, I had two goals: . Make the color of the top bar different from the body | Define a second color to use. | Now of course the file in question was /sass/minima/dark-mode.scss. Now of course I had to define the second color first. I thought navy blue would fit, so I made a new color named navy-blue. Now the nice thing is that if you mouse-over the square of the color, a color picker opens up. That made changing the color very easy. . . Then I had to figure out how to make the top bar a different color. Since I wanted navy-blue to be my main color, I replaced all instances in the code where the background was dark-grey (the default color) with navy-blue. . . The last thing I had to do was figure out which parts of the page constituted the top bar. A little use of inspect element on my own page helped a lot. . . Using this, I found out that the site-header and site-nav parts of the site were in the top bar. So I set their background color to dark-grey. . . Tables in Liquid . I will not lie to you. This portion of the HTML hacks… with little sample code… was extremely difficult for me. It took me around 6 hours, searching through many websites… many reuploads of the page in question (which was index.html)… but onto the code… . . Now, what’s going on here? This is meant for the table on my front page index.html. . The first few lines are a bunch of HTML tags. The funny thing is, every time you make a tag (ex: &lt;table&gt;), you have to close it later (&lt;/table&gt;). So you got &lt;table&gt;, &lt;tr&gt; (which probably stands for “table row”), and &lt;th&gt; (likely “table heading,” appropriately named since the first row is bolded and has its own background color). Then we close everything. . This is where the liquid starts. It took forever for me to get this right… mostly because I tried many things. But so you don’t have to go through all that, I’ll just explain what’s in front of you. . In liquid, your commands must go in percents and curly braces. That’s how it was made. Now the reason why I’m not going to actually type out any percents and curly braces is because the website will immediately think I’m running actual code and return errors when I take my liberties. This would effectively make it impossible to update this page… so whenever you see a command assume they are in curly braces and percents. . assign = var_name makes a variable. But then you see assign Trimester = &quot;1; 1; 1&quot; | split: &#39;;&#39; Liquid has this funny thing about arrays, so in order to make one you have to put the whole thing in quotes, with each entry separated by a certain character… then you have to pipe it to a split command to tell liquid what character separates each entry (in this case, it was semicolon). I defined the other lists in a similar manner.. . Next is the for loop, which as a reminder executes all associated commands for each iteration. In this case, we get for i in (0..2). Conceptually, it’s not much different than the python for loops. It cycles through three values (0, 1, and 2), and executes the commands for each. It’s mostly the syntax that was a bother. You have to put the numbers in parenthesis, otherwise it just doesn’t work. You also separate the numbers with two periods. . We’ll then take a look at one of the associated commands. . &lt;tr&gt; &lt;td&gt;&lt;/td&gt; . This simply says that for each iteration (or cycle, the word I’ve used in my other posts so far), the item in the array associated with the value of the index variable will be used. Remember, the first item is associated with 0, the second item with 1, etc… in the Trimester list, the items are all 1. The other commands are similar to this one, except for the Week and Description lists instead. . Unlike python, we have to tell liquid where the for loop is going to end. Because apparently the tabbing scheme doesn’t cut it. That’s what endfor is for. . I guess there’s one last thing… I need to tell you where I got all this info from. . Assigning a variable (includes split command) | For loop syntax | . Yes, the second one is someone else’s submission. I personally think looking at someone else’s code is a bit of a grey area in terms of academic honesty, and straight up copying it is prohibited. But then again the syntax is a bit rigid, so there’s not an easy way to make code without the syntax matching up. So to make myself feel a bit better about using someone’s submission as a reference, you can see there are a few differences (this student referenced some variables placed in _config.yml… which I don’t see as a suitable place to store variables, so I placed them in the related code instead). Gotta give credit where credit is due. Because honestly, this is all the example code I got. Mr. Yeung told me the more important part of the class is understanding how the code works, so if you think the explanation above was fair, then I guess I might be doing this right. . Week 4 Collaboration Notes . Video 1: Why collaborate? . Facebook . Facebook Visit: a coworker’s son got the instructor in, and there are many meeting rooms and space to get together and collaborate. . Facebook owns social media entities, which requires collaboration . Main Point: Collaboration –&gt; computing innovation reflecting diversity of talents of designers . Includes program; can be physical (self-driving car), non-physical (computer programs) or concept | . Video Games . Super Mario Brothers (2 and 3) . SMB2 was a reskin of SMB. . Kensuke Tanabe made a vertical game with a collaborative element to the level design. Shigeru Miyamoto wanted horizontal game. They had a conflict. . SMB 2 had differing versions, which was either vertical or horizontal (but not both simultaneously) . | SMB 3 had both vertical and horizontal designs . | . Main point: Collaboration with diverse perspectives avoids bias . Practice . What are the benefits of collaborating with peers? . Answer: Effective collaboration produces computing innovations reflecting diversity of talents/perspectives of the designers . Key takeaways . Collaboration skills . Communication | Building a consensus | Negotiating | Resolving Conflicts | . Video 2: How to collaborate . Pair Programming . One (the driver) writes the program, the other (the observer) reviews each line of code as it’s typed | The observer is not a back-seat programmer who complains over every minor error of the driver. The observer just provides a different perspective | It is recommended for people to switch roles | . Think-Pair-Share . Student attempts problem individually | Student shares ideas with a partner | Students share results with class (or with a larger group) | Analogy: Play charades . Interpreting other player’s communications can be difficult, it may eventually make sense | Working independently is similar to playing charades | . Leaving Comments in the Code . Allows to communicate to other people what the code does | Makes sure you don’t forget what your code does | Allows to cite code segments from other sources | Cite media (audio/video) used from other sources | Mark which partner did what code | Clarify how the code works | If comments are not possible in the programming language, use a PDF or word editor . Tools for Collaboration . repl.it (multiplayer) | GitHub (repositories) | Shared documents/folders (Google Drive, media, etc.) | Asking friends/family/teachers to test programs, get feedback | . DISCLAIMER: Only collaborate with a partner for the Create Performance Task (not anyone else) . Key Takeaways . Consulting with other people is important for diverse perspectives . Prevents self-absorption into programming from getting in the way of seeing issues with programs | . Use online tools . Proof I did the MCQ . . Week 5 JavaScript Notes . there are “number” instead of integer . There are still functions and such, though they are defined with function instead . JSON (JavaScript Object Notation) allows for transmission of data (similar to Python lists and dictionaries) between files. A function can be used to put input into the data. The JSON makes the data a string . function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } . Can make an array using a variable like in Python, though making an array is significantly easier: . var var_name = [ new OBJECT(&quot;Param1&quot;, &quot;Param2&quot;, &quot;Param3&quot;, &quot;2022&quot;) ] . Output may not always be need, so use _toHTML. Use . var style = ( :display:inline-block;&quot; + &quot;border: 2 px solid grey;&quot; + ) . In for loops, the iteration variable must be defined with var . for (var row of compsci.classroom) { associated commands } . Week 5 Program Purpose/Function Notes . Video 1: Purpose of Computing Innovations . Purpose of computing innovations is for problem solving/creative expression | . Computing Innovations Ex: apps (games, social media), devices (computers, smart phones), systems (E-mail, cloud services) . Guiding Questions . Why do computing innovations exist | What problems (not negative, just an issue) are solved | What new things does the innovation allow us to do? | . Practice: Social media . Social media exists to allow for communication between close and distant individuals, both in terms of geography and in terms of relationships. This also provides easy access to a history of social activities | Social media addresses the issue of the speed and distance of communication between individuals. Specifically, communication is faster and can happen from longer geographical distance. | Social media allows for a more public form of communication where information spreads quickly. It also allows for approval/disapproval of opinions in a public space. | . Practice: E-commerce . E-commerce exists to allow for purchase of items which are not available over a short distance (specifically in a nearby retail store). This prevents the purchaser from having to travel long distances to pick up an item, which in term saves time and money. | This also allows ease of finding the best price for a certain item | E-commerce also helps with organizing products into a website, allowing customers to purchase products more quickly than in a physical store. | . Practice: Digital Assistant Device . Allows for easy web searches using voice rather than having to open up a web browser and type in a search query | Allows for easy automation of certain tasks at home without using hands; allows for multitasking, especially in situations like driving (ex: calling people while driving) | . Video 2: Input/Output . events provide input to a program, and events can be triggered by things like key presses | Input and output in variety of forms (text, audio, images, etc.) | . Programs accept many forms of input . Tactile (touch using keyboard, touchpads, mice) | audio (voice-controlled for digital assistant devices) | Visual | text (including numerical values) | Types of input devices accept . Smart phones have touch screens, buttons, voice-activated siri assistant, QR code scan/facial recognition, text | Laptop: mouse, trackpad, keyboards | Gaming Console: all the buttons, remote control | . How do programs receive input: . programs in an event-driven environment | events triggered by actions, which sends input | events = mouse clicks, screen taps, force touch, swipes, button clicks/press, keyboard entries, audio (voice-controlled smart device) | . What input accomplishes . Usually affects output (though if the device is powered off, input does nothing other than the power-on button) | Device outputs: visual, audio, tactile, text | ex: smartphone: visual (screen changes), audio (the sounds of the smart speaker), tactile (device vibrates); text (displayed on the screen) | ex: laptop: visual (what’s on the screen); audio (all the sounds); text (displayed on the screen) | ex: gaming console: remote vibrates on certain in-game events | . How program knows what to do by events . Actions trigger events (initiated by user or a program) | Program jumps to code associated with event, executes it –&gt; output/events triggered | . Program code not necessarily executed in order, they are executed as called . Video 3: Program/Code Function . Program = collection of program statements performing a specific task when executed | Code segment = collection of program statements, part of program | Program needs to collect variety of input | Behavior = how program functions during execution | Can be described broadly or by what program does and how it does it | . Programs . Program/software = collection of statements | Statement = 1 command | Group of statements = code segment | Code segments executed according to rules of programing language | Can be seen in text or with blocky | . Example code . min &lt;-- aList[1] FOR EACH item IN aList { IF (item &lt; min) { min &lt;-- item } } DISPLAY (&quot;The minimum number is in the list is&quot;) DISPLAY (min) . Arrow is an assignment, value of aList[1] assigned to min list groups together data . FOR EACH item IN aList: looks through each number, repeat associated commands . If the item is less than the minimum, then the item is the new minimum. After done for all elements, print the text . This program finds the minimum value in a list . Needs to work for a variety of lists | Out-of-order numbers, | negative numbers, | larger numbers (especially a problem with 32-bit integer limit), | decimals (some languages separate decimals from integers) | Can be put in larger program | . Describing code segments . Describe what it does so it could be re-used in a larger program | Include how it does what it does | Explain how it functions | Allows people to make it better | . Week 5 Agile Methodology Notes . Vocabulary: . Term Definition . Standup Meeting | Weekly planning meeting where the scrum team plans and assigns tasks, sets pacing, and sets priorities | . Scrum Master | Essentially a team manager. Responsible for managing the Scrum Board and assigning tasks | . Scrum Board | An organization table in GitHub Projects containing a list of tasks to be completed, common to-dos, and completed tasks. Helps with team organization | . DevOps | The main student responsible for deploying finished code to AWS, making sure that the team doesn’t push to GitHub at the same time, etc. | . Frontend Developer | Student that works with applications that users see; for example, the FastPages server or the group Flask server | . Backend Developer | Student working with code and server-side functions (including Python) which are not visible in a web browser | . Sprint | The period of time a team plans, completes, and deploys a project. Usually 2 weeks. | . 7 Important Skills . Creativity: Problem-Solving skills (including improvising, using skills outside the usual curriculum). Making connections/inferences | Critical thinking: thinking of ways to improve projects or thinking of potential pitfalls ahead of time. Aggressive problem-solving methodology | Communication: Addressing people with appropriate levels of vocabulary and taking feedback without offense | Leadership: Leaders do task delegation, teach group members about important concepts, and are always the ones to resolve conflict. | Teamwork: The primary component is trust in the other individuals. Also includes completing tasks while meeting checkpoints, all while exercising time management skills | Research: Does include searching the Internet, but also asking for help from team members or teachers | Technical understanding: Includes being knowledgeable about the software, and also being willing to learn about coding and troubleshooting. | Week 6 Program Design/Development Notes . Video 1 . Use a development process | Design program and user interface | . Program Development . Starts with an idea about what the purpose is | Developers follow steps in a plan | Steps can be changed based on what happens (good/bad) | Ex: AI (personal assistant): developers tried to figure out what they could do | Once project succeeded, newer projects tried to customize AI to users | Developers investigate the purpose/requirements of the program (what should be accomplished?) | Come up with constraints (what should not be done?) | Ex: personal assistant has no screen or button, only use voice commands | Ex: deadlines (time) | What does the user care about? | Investigate using surveys, interviews, public beta/released prototype, observations, etc. | Developers design program through | Brainstorming (review investigation results) | Storyboard what the program looks like, what the user would do | Plan user experience (how user interacts, output, etc.) | Make user interface | Make modules (program components developed separately, then integrated) | Have testing strategy | Developers then decide on requirements | Program behavior | Potential user interactions | Requirements outlined on specifications | Then prototyping, which is incremental to refine modules (small parts of the program) | Then lots of testing (test every step, at small and large scope) | Refine through testing, reflection, and feedback from other people | . Video 2 . Programs written by multiple groups; groups acknowledge code from other sources or developed collaboratively | Acknowledgements can be in the documentation . | Program is rarely individual, usually developed in teams | Individuals/teams work on different components | Each member deserves credit for the work in the documentation (with the contributions of each) (ex: asking a friend for help) | Also use comments for credit of code. If the language doesn’t allow comments, there needs to be a workaround | Allows the developers to know which people can fix what parts of the program | Also useful when users find bugs in the published version of the program | Developers also use code written by others (ex: making a second program re-using assets from a previous program) | The developers of that previous project should be given credit (similar to using a concrete detail in an essay) | Code is the intellectual property of the author | Documentation should include author’s name and source of recycled code (similar to bibliography) | . ##### Practice . Use of code segments from another person’s program require’s citing the author and source program. | Use of original code segments do not require a citation of the author | Use of an algorithm written by someone else requires citing the author and source program. | Use of code segments written in collaboration with others requires all collaborators to be cited. | . Video 3: Documentation . Documentation is description of code segment/program | Comments = in-program documentations | Document throughout development to help maintain correct programs . | Program Documentation purpose: | Describe the program | List specifications | Describe functions or code segments | Events with corresponding outputs | Program development, how other programs interact with that program | Cite authors | Documentation throughout development process | Beginning: specifications/purpose | During development: Tracking progress | After development: Explain development process, cite authors | Improves efficiency, improve ability to test/refine program, responding to bugs | . How to document while programs . Some languages offer commenting (developers write text that’s not executed) | Comments read by developer | If there’s no commenting, maybe copy code into txt document | . Examples . Python | . # this is a comment . Java | . // this is a comment /* this is also a comment */ /** this is documentation comment */ . Javascript, C/C++, Swift similar to Java . | XML/HTML; can be multi-line . | . &lt;!--This is a comment--&gt; . Applescript/Pascal | . (* THIS IS A COMMENT *) . Block-based languages (comments can be expanded/collapsed) | Scratch | MIT AppInventor | . Week 7 Troubleshooting Video Notes . Video 1: Identifying errors . 4 types . Logic error: mistake in algorithm causing unexpected behavior | Syntax error: rules of language not followed | Run-Time: Occurs during execution, special to each program languages | Overflow: Comptuer handles a number outside defined range of values | Errors are common enough to be part of the process. Programmers identify the type of errors. . Logic error ex: code segment intended to display letter grade corresponding to percentage | Grade represents percentage | A series of an if statements (ex: if grade &gt; 89; if grade &gt; 79) | Results in outputs of A, B, C, D for an A grade | . grade ← INPUT(&quot;Enter a grade&quot;) IF (grade &gt; 89) { DISPLAY (&quot;A&quot;)} IF (grade &gt; 79) { DISPLAY (&quot;B&quot;)} IF (grade &gt; 69) { DISPLAY (&quot;C&quot;)} IF (grade &gt; 59) { DISPLAY (&quot;D&quot;)} ELSE { DISPLAY (&quot;F&quot;)} . Syntax error: due to typos breaking rules of language | Program fails to run | Ex: forgetting colon/semicolon, parenthesis, curly braces, indents, quotes, defining variables | . grade ← INPUT(&quot;Enter a grade&quot;) IF (grade &gt; 89 { # needs closed parenthesis after 89 DISPLAY (&quot;A&quot;)} IF (grade &gt; 79) { DISPLAY (&quot;B&quot;) #needs closed curly brace IF (grade &gt; 69) { DISPLAY (&quot;C)} #needs close quotes after C IF (grade &gt; 59) { DISPLAY (&quot;D&quot;)} ELSE #needs open curly brace DISPLAY (&quot;F&quot;)} . Run-time error: program fails while running (crashes); “bugs” | Program runs initially but doesn’t finish processes | May result from division by zero or inappropriate data types (ex: number entered where there should be a word) | Inputs which are not numerical (strings) or using the wrong data type (integer, decimal, etc.) could result in run-time error below | . grade ← INPUT(&quot;Enter a grade&quot;) IF (grade &gt; 89) { DISPLAY (&quot;A&quot;)} IF (grade &gt; 79) { DISPLAY (&quot;B&quot;)} IF (grade &gt; 69) { DISPLAY (&quot;C&quot;)} IF (grade &gt; 59) { DISPLAY (&quot;D&quot;)} ELSE { DISPLAY (&quot;F&quot;)} . Overflow error: program has to perform calculation outside of defined range | Memory constraints make some numbers too large for programs to calculate | Ex: 4 digit calculator, calculator can display 9999. If 100*100 is calculated, that is 10000, but there’s no display room, so there’s an overflow error | . Video 2: Correcting Errors . Effective ways to correct errors: . Test Cases | Hand Tracing | Visualizations | Debuggers | Adding outputs | . Correcting syntax errors: Most Integrated Development Environments display info about syntax error (the line with the syntax error) . ex: bad input on line 2 in main.py | . Correcting logic errors (program runs but not as intended) . Use test cases | Example code below; use test cases like numbers 95, 82, 76, 61, 58… etc. | Use border cases (ex: 89.5 vs 89.4) | . grade ← INPUT(&quot;Enter a grade&quot;) IF (grade &gt; 89) { DISPLAY (&quot;A&quot;)} IF (grade &gt; 79) { DISPLAY (&quot;B&quot;)} IF (grade &gt; 69) { DISPLAY (&quot;C&quot;)} IF (grade &gt; 59) { DISPLAY (&quot;D&quot;)} ELSE { DISPLAY (&quot;F&quot;)} . Corrected code segment below | . grade ← INPUT(&quot;Enter a grade&quot;) IF (grade ≥ 89.5) { DISPLAY (&quot;A&quot;)} ELSE { IF (grade ≥ 79.5) { DISPLAY (&quot;B&quot;)} ELSE { IF (grade ≥ 69.5) { DISPLAY (&quot;C&quot;)} ELSE { IF (grade ≥ 59.5) { DISPLAY (&quot;D&quot;)} ELSE { DISPLAY (&quot;F&quot;)} } } } . Hand Tracing (for iteration/loops) | Write out values of variables in loop as it iterates | Useful for smaller segments; larger segments need debuggers | . list ← [2, -3, 5, 1, 10, 8] min ← list[1] index ← 1 REPEAT (LENGTH(list) - 1) TIMES{ IF (list[index] &lt; list[index + 1]) { min ← list[index] } index ← index + 1 } DISPLAY(min) . Table copied from video . min Index list[index] list[index + 1] . 2 | 1 | 2 | -3 | . 2 | 2 | -3 | 5 | . -3 | 3 | 5 | 1 | . -3 | 4 | 1 | 10 | . 1 | 5 | 10 | 8 | . 1 |   |   |   | . Algorithm displays list time number was less than next number in list | Test case [1, 4, 0, 3, 2] would not have found the issue | Correction: min &lt; list[index] rather than list[index] &lt; list[index + 1] | Repeat LENGTH(list) times . | Extra output statements | Removed once error corrected | Similar to hand tracing, though computer does the work . | IDEs can also use visualizations (graphs, images, colors; determine if program works) | Debuggers use program software, allowing the program to be tested during execution | . Video 3: Identifying inputs and expected outputs . Testing involves using inputs and expecting an output. Inputs may be used at the extremes, and deviations from expectations are used to improve code . | Planning for testing begin at the beginning of the process | Think about program specifications, know how program is working properly . | Specification list behaviors/events and outputs of the program | Inputs to be defined | . Example . list ← ? min ← list[1] index ← 1 REPEAT (LENGTH(list) - 1) TIMES { IF (list[index] &lt; list[index + 1]) { min ← list[index] } index ← index + 1 } DISPLAY(min) . The following lists will show the algorithm doesn’t work as intended: . [1, 2, 3, 4, 5] | . temp ← INPUT(&quot;Enter the temperature&quot;) IF (temp &lt; 32) { DISPLAY (&quot;Watch out for snow!&quot;)} ELSE { IF (temp &gt; 90) { DISPLAY (&quot;Turn on AC!&quot;)} ELSE { DISPLAY (&quot;Enjoy the weather.&quot;)} } . This should output “Watch out for snow!” for 32 degrees or less | Therefore, the algorithm does not work as intended for 32 degrees | . Influence of errors on program development . Once inputs and outputs are planned, there’s testing | Results used to improve code | Programmers and users test | Then programs released, bugs found, updates released | . MyAP MCQ 1.4 . This will be published the day of review to prevent compromise of integrity. If this is published beforehand, this is unintentional. . 1) score and penalty are positive integers. penalty is supposed to subtract from score, but score can’t be negative. . IF(score - penalty &lt; 0) { score ← score - penalty } ELSE { score ← 0 } . What change can be made so the code segment works? . Switch lines 3 and 7 | . 2) The procedure needs to return true if a list has only positive numbers, or else it returns false. . PROCEDURE allPositive(mylist) { index ← 1 len ← LENGTH(myList) REPEAT len TIMES { IF(myList[index] &gt; 0) { RETURN(true) } index ← index + 1 } RETURN(false) } . For which contents of myList doesthe procedure not return the result as intended? . RETURN will exit the procedure with the output in the parenthesis | Therefore, the first time a list encounters a positive number it will exit the procedure with a code of true, regardless of if any other numbers are negative. If no positive numbers are encountered, false is outputted. | Therefore, the list [-1, 0, 1] will show the procedure does not work as intended | . 3) Homework assignment has 10 questions . Number answers correct Grade . At least 9 | Check Plus | . 7-8 | Check | . Less than 7 | Check minus | . numCorrect is the number of correct answers. The code is supposed to display the grade . Which values of numCorrect makes the code fail to display intended grade? . Code checks if the grade is greater than 7 | If it is, it checks if it is at least 9. If so, then check plus is displayed. This works as intended | If not, check minus is displayed. According to this code, 8 will display check minus (it should be check) | Any grades of 7 or less get check. Therefore, grades of 0-6 get check even though they should get check minus . | Available MCQ answers: 8, 6 | . Week 8 Topic 4.1: The Internet . Video 1: How computing devices interact . Computers were at first room-sized (still room-sized around 1975) | Computers start decreasing in size (ex: PC, routers, sensors) | Collaboration was needed (using floppy disks was too hard) | Computers communicate through electrons (in binary) | Packets are used to communicate. Packets are small amounts of information, including source and destination | Computer systems (computers work together for purpose) joined in networks | Packet switching: A packet is spliced into fragment, which are sent along a network path | Routers help with packet switching and guide packets along their paths to destinations | Bandwidth: Maximum data that can be sent in fixed amount of time through a path/network (measured in bits/second) | . Vocabulary . Term Definition . Path | sequence of directly connected computing devices beginning at sender and ending at receiver | . Route | Process of finding a path from sender to receiver | . Computer System | Group of computing devices/programs working towards common purpose | . Computer Device | A physical artifact that can run a program (ex: computers, tablets, servers, routers, smart sensors) | . Bandwidth | Maximum amount of data that can be sent in a fixed amount of time | . Computer Network | Group of interconnected computing devices capable of sending/receiving data | . Video 2: Internet VS World Wide Web, Protocols, etc. . Packet Review . Packet = small amount of data sent over network (with source and destination information) | Protocol = set of rules specifying system behaviors | . Protocols written by Internet Engineering Task Force (IETF) . Made OSI (Open Systems Interconnect) model, connects through 7 layers -TCP (Transmission Control Protocol) - TCP/IP Model | . TCP/IP Model . Network Access Layer (Data link, Fiber, MAC, Ethernet cable, Network Internet Card, etc.) | Related to hardware | Each piece of hardware has a unique Media Access Control (MAC) address | Packets hop between NICs | Internet Layer (IP) | Packets have source and destination IPs, metadata, and MAC Addresses | Packets go through sequence of routers | Multiple paths are possible | Internet is scalable, can change size to meet demands | IP address required | IPv4 address has 4 octets, each 8 bits long | Has network bits and device bits; the 32 bits are shared between these two parts | Transport Layer (TCP/UDP) | TCP is stricter, does 3-way handshake | Think about “certified mail” - you learn when/if the recipient received the mail | UDP less strict, there’s no verification if the packet reached the destination | TCP only uses unicasts, UDP uses unicasts, multicasts, and broadcasts | Unicasts = 1 destination | Multicasts = multiple destinations (range of IP addresses) | Broadcasts = all computers in a LAN are destinations | Application Layer (HTTP, DNS) | DNS (Domain Name Service) is database mapping IP addresses to domain names (with languages) | uses .edu, .com, .org | World Wide Web is not the Internet, but rather linked datapages | Use HTTP (port 80) or HTTPS (port 443) to access web pages | . Scalability . Lowest layer = Local Area Network (LAN; home level or school level) | Multiple LANs make an Intranet; they communicate using Autonomous Systems (AS) controlled by Internet providers | The Internet is made up of Autonomous Systems | . The Process . Computer joins a network, gets IP address from DHCP (Dynamic Host Configuration Protocol) | URL (ex: ibm.com) is converted to IP using DNS | Packets sent to the router, which can send packets to other routers or web server | Use TCP or UDP | . Quiz!!! . Open standards and protocols do enable manufacturers/developers to build hardware/software that communicates with the Internet | IETF is a task force, but it doesn’t enforce laws to keep manufacturers out of the Internet. It writes protocols. | Routes are not necessarily determined in advance, so they can be flexible. | A protocol is an agreed-upon set of rules specifying system behaviors. | UDP does not guarantee transfers, though it is faster than TCP. | The World Wide Web is not the Internet. | HTTP is a protocol used by the World Wide Web. | . 3.14-3.15 Notes . 3.14: Libraries . Libraries are pre-existing code used to make programs | Procedures (or functions) are examples of re-used code | Procedures can be very long to read, so documentation is needed | Allows for knowledge about what procedure does and what parameters | Ex: calcAverage takes a list of integer values (representing grades), outputs the average | File containing such procedures (functions) are libraries | API (application program interface) gives specifications for how procedures in a library can be used. API is the documentation. | Common for large tech companies | Library example: Exam reference sheet | To calculate grade point average, a procedure called calcQuotient which takes two positive integers and returns their quotient is useful. | . Topic 3.15 Video 1: Random Values . Pseudocode: RANDOM(a, b) | Returns a random integer in [a, b] | Ex: RANDOM(1, 6) will return 1, 2, 3, 4, 5, 6 | Is discrete (gives one number at a time) | . Example 1: What is the possible range of results? . answ1 ← RANDOM(0, 2) answ2 ← RANDOM(1, 5) answ3 ← answ1 + answ2 . answ1 has minimum value 0; answ2 has minimum value of 1. Therefore the bottom of the range will be 1. . answ2 has maximum value 2; answ2 has maximum value of 5. Therefore the top of the range will be 5 + 2 = 7. . Therefore, the range of results is all integers in [1, 7] .",
          "url": "https://leonard514.github.io/FastPage/_pages/02_notes.html",
          "relUrl": "/_pages/02_notes.html",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "About Me",
          "content": "Hi! I’m Leonard Wright, and I am a student at Del Norte High School. This website is currently being maintained for AP Computer Science Principles. I do have some experience securing computers, and I guess this class will be more about learning to code code code!!! I hear we’ll be working in groups a lot in this class. I hope I can also learn about working with others in this class (I had a hard time with this in 11th grade, though recently I’ve learned a few things so hopefully things get better). I’ll need collaboration skills in college and the workforce anyways, so best to start practicing now. . Anyways other than that I guess I can mention I’m in Ms. Lanzi’s BC class (wish me luck). She does a good job with integrating group work into the course structure. That’s a plus since I could learn collaboration skills in that class as well as here. . I don’t know what else to say, I guess I’ll add more stuff here later .",
          "url": "https://leonard514.github.io/FastPage/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://leonard514.github.io/FastPage/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}