{
  
    
        "post0": {
            "title": "BC Gotta Knows!",
            "content": "Special Trig Limits + Squeeze Theorem . . Continuity Definition . . Continuity Properties + Composite Continuity . .",
            "url": "https://leonard514.github.io/FastPage/classes/BC/gotta_know",
            "relUrl": "/classes/BC/gotta_know",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Welcome to my Python Quiz Script.",
            "content": ". title: Python Quiz Script toc: True layout: post description: Python Quiz using lists, iterations, and for loops! categories: [Comp Sci, scripts, jupyter] permalink: /scripts/python_quiz . published: false . import getpass, sys #Imports stuff necessary to run the script def question_and_answer(prompt): #defines question and answer: a prompt variable goes in the parenthesis print(&quot;Question: &quot; + prompt) msg = input() #input is mapped to the msg variable print(&quot;Answer: &quot; + msg) #the input is spat back out of the terminal def question_with_response(prompt): #defines question_with_response: collects the questions with prompt print(&quot;Question: &quot; + prompt) #prints the question msg = input() #input collection of user in answering quiz question return msg questions = 10 correct = 0 print(&#39;Hi &#39; + getpass.getuser()) #getpass.getuser() gets the username; print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) #lots of printing here question_and_answer(&quot;Are you ready to take a test?&quot;) #the question_and_answer function is called, which as a reminder spits out whatever the user inputted. Question_list = [&quot;Is your answer input or output?&quot;, &quot;What command is used to include other functions that are developed?&quot;, &quot;What is the collection of these functions called?&quot;, &quot;What command was used to make the function that gave you this question?&quot;, &quot;what is Answer_list in iter(Answer_list)?&quot;, &quot;What command in this example is used to evaluate a response?&quot;,&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;, &quot;What type of text is the variable called &#39;correct&#39; in this script?&quot;, &quot;What is it called to print a string (as output) to terminal?&quot;, &quot;What is a group of commands defined under a name?&quot;] #Big list of the questions, very long. Answer_list = [&quot;input&quot;, &quot;import&quot;, &quot;library&quot;, &quot;def&quot;, &quot;parameter&quot;, &quot;if&quot;, &quot;expression&quot;, &quot;dynamic text&quot;, &quot;string concatenation&quot;, &quot;function&quot;] #List of the answers! Answer_iter = iter(Answer_list) #creates iteration to cycle through for answers. for i in Question_list: #cycles the questions from the list, repeats question commands after each question until the end. rsp = question_with_response(str(i)) #a rsp variable is made to collect input for the question. We also see the question_with_response function being called. str(i) prints the question. if rsp == str(next(Answer_iter)): #this checks if the correct answer is provided. The str part ensures the answer in the list is outputted (not to terminal) to check if it matched the input answer. The next command is what cycles through my iteration, Answer_cycle print(rsp + &quot; is correct!&quot;) #Tells the test-taker that he/she answered correctly. correct += 1 #adds one to the correct answer counter else: print(rsp + &quot; is incorrect!&quot;) percent = (correct/questions) * 100 #Calculates percent correct answers. print(&quot;You scored &quot; + str(percent) + &#39;%!&#39;) #Prints accuracy of answers to terminal . Hi leonardw48247 You will be asked 10 questions. Question: Are you ready to take a test? Answer: Question: Is your answer input or output? input is correct! Question: What command is used to include other functions that are developed? import is correct! Question: What is the collection of these functions called? library is correct! Question: What command was used to make the function that gave you this question? def is correct! Question: what is Answer_list in iter(Answer_list)? parameter is correct! Question: What command in this example is used to evaluate a response? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! Question: What type of text is the variable called &#39;correct&#39; in this script? expression is incorrect! Question: What is it called to print a string (as output) to terminal? string concatenation is correct! Question: What is a group of commands defined under a name? function is correct! You scored 90.0%! . Explanation Portion . Alright... where to start... oh, the import commands would be a good start! . import getpass, sys . This imports the functions getpass and sys into the script, making them executable. Where did those functions come from? They came from the libraries, which is essentially a collection of functions that comes with your python installation. Pretty neat!. Next, we got our own function. . def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) . On the first line, we got the def command, which defines our function. The function&#39;s name is question_and_answer (fairly intuitive since it asks you a question and requests for an answer), and there is a prompt in the parenthesis. This prompt is a variable, and whenever this function is called (this should look like question_and_answer(&quot;insert text here&quot;)), the variable prompt is set to whatever is within the parenthesis. The colon is there for syntax purposes and should be kept. | On the second line, the print() command is used. Within the parenthesis is &quot;Question: &quot; to ensure that a question prompt is printed when the file is executed, along with + prompt. The + concatenates/prints whatever text/string is stored in the prompt variable. The output to the terminal is Question: (prompt text here) | On the third line, a variable named msg is set equal to the result of the command input(). As the name implies, the function will collect user input and set it equal to a variable. This also means the script will pause when user input is being collected. | On the fourth line, the print() command is used again, this time with the string Answer: to proceed the text of the variable msg, which was set equal to the input on the third line. | . So to sum it up, this function collects an input string from a user and re-prints it to the terminal. Let&#39;s move on to the other function. . def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg . If you paid attention, the first three lines of this function question_with_response were very similar to the first three lines of the question_with_answer function. The last line is what we want to look at. The return command ends the execution of the function and sends the contents of msg to the main script in execution. The contents of msg can therefore be used outside the function. . questions = 10 correct = 0 . These are more variables. The variable questions lets Python know how many questions there are, because knowledge of how many questions there are is necessary for score calculation. correct, the number of correct answers, is 0 since no questions have been answered yet. . print(&#39;Hi &#39; + getpass.getuser()) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) . The first line prints to the prompt, and this is the first line of code executed. getpass.getuser() is linked to that function we imported at the beginning, and it essentially is a placeholder for the username of the person running the script. Might as well say hi and call the test-taker by his/her name! | The second line prints about being asked questions. str(questions) must be used to print the number of questions since questions is set equal to a number (it must be set equal to a string to print, and the str() command converts it into such). | The third line is our question_and_answer function from before! If you remember what it does, it prints out the prompt in the parenthesis, collects a user input, and prints that input into the prompt. | . Now for the next bit of code! . Question_list = [&quot;Is your answer input or output?&quot;, &quot;What command is used to include other functions that are developed?&quot;, &quot;What is the collection of these functions called?&quot;, &quot;What command was used to make the function that gave you this question?&quot;, &quot;what is Answer_list in iter(Answer_list)?&quot;, &quot;What command in this example is used to evaluate a response?&quot;,&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;, &quot;What type of text is the variable called &#39;correct&#39; in this script?&quot;, &quot;What is it called to print a string (as output) to terminal?&quot;, &quot;What is a group of commands defined under a name?&quot;] Answer_list = [&quot;input&quot;, &quot;import&quot;, &quot;library&quot;, &quot;def&quot;, &quot;parameter&quot;, &quot;if&quot;, &quot;expression&quot;, &quot;dynamic text&quot;, &quot;string concatenation&quot;, &quot;function&quot;] Answer_iter = iter(Answer_list) . The first two lines are relatively self-explanatory (though lengthy). I made a list called Question_list that has a list of all the questions of the quiz, and Answer_list has all the answers. The first items on the lists will be the ones to appear on the quiz first, but more on that later. The third line is less self-explanatory. I essentially converted my answer list into an iteration. Why would I do that? Well really it&#39;s because there&#39;s a command in the next bit of code that doesn&#39;t work if I don&#39;t convert the list into an iteration. That&#39;s just the way it is. Now it&#39;s time for the exciting part. . for i in Question_list: rsp = question_with_response(str(i)) if rsp == str(next(Answer_iter)): print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) . I know this is a lot to take in. Bear with me for a little while. . The first line is a for loop. The i is a variable used to count how many items are in the related list, Question_list, and how many times the commands within the for loop are executed. You could use any variable, though i is the most common (probably since the word &quot;iteration&quot; starts with an i, though I could be wrong). All commands connected to the for loop (which is this entire chunk of code) is executed once for every question in Question_List. Why would I want to do that? Let&#39;s move to Line 2. | In the second line, we set a rsp variable. We call the question_with_response function, which if you remember prints a question prompt and collects input, sending it to the main script. This input will be set equal to the rsp variable. Notice what is inside the function&#39;s parenthesis: str(i). Remember i is the variable from the for loop which is going over each question in Question_list. So every time this is executed, the prompt will be the next question in the list. | In the third line, there is an if statement. If the condition of the if statement is satisfied, any connected code is executed. In this case, the condition is that the input variable rsp is equal to... let&#39;s deconstruct that code. str(), as mentioned before, turns a number/value into a string. In my tests, the printing of the answer was being picky, so I used this command even though there&#39;s no numbers involved. | next(Answer_iter) is the way that the next answer on the list will be used every time the command is executed. next() moves on to the next item in the iteration whenever executed. For some reason, next() doesn&#39;t accept lists, which is why we made Answer_iter. | . | So back to what I was saying... the condition is that the input variable rsp be equivalent to the correct answer of the question in the prompt. If this condition is satisfied, appropriate code is executed for a correct answer: | In line 4, we print their input (still stored in rsp) and also that it&#39;s correct. | In line 5, we increase the correct variable by one since a correct answer was given. | Line 6 is else. If the condition of the if statement is not fulfilled, any code connected to the else statement is executed instead. That would mean getting a question wrong. | So line 7 prints that the input was incorrect. | . These 7 lines execute 10 times for the 10 questions. Doing this makes the code more concise than typing out the same commands 10 times in a script. Now, the rest of the script should be a breeze. . percent = (correct/questions) * 100 . This line, as implies, calculates the percentage of questions correctly answered. It takes the number of questions correctly answered and divides by total number of questions (these are all variables by the way, which are set equal to values/numbers), then multiplies by 100. This number is set equal to the percent variable. . print(&quot;You scored &quot; + str(percent) + &#39;%!&#39;) . This line prints the percent score. Keep in mind that since the variable percent has a numeric value that the str() command must be used to convert it to a string. . That&#39;s the end of the script! I hope you had a good time learning about how this works, and I hope you will use some of these techniques in your future work. .",
            "url": "https://leonard514.github.io/FastPage/2022/08/24/Python-Quiz.html",
            "relUrl": "/2022/08/24/Python-Quiz.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Tools/Equipment Submission",
            "content": "Hi! . This is a submission for the Tools/Equipment hack. If you want to see index.html, you might as well check out home. . Anyways, better start showing you my stuff. My main github is here. You were probably interested in seeing the insights page as well, so I’ll stick it in here. . Oh yeah, you also wanted to see me using VSCode, which is how I’m writing this page. . VSCODE . . Notebook . And then there’s my Jupyter notebook, which is found at this link. Yeah, I know it has the default title. Going to have to ask around to figure out how that stuff works. . Anyways that’s all the submission-related stuff, but I think it’s also a good idea to keep a journal… of what I’ve done, and what I have left to do. . Here is a table of my progress. . Date Activities completed . August 17 | Class started. Installed VSCode and the windows version of a bunch of programs (oops) | . August 18 | Installed Windows Subsystem Linux. Installed python, jupyter, anaconda, and a lot of other software the way I was supposed to do it. | . August 19 | Fastpages development begins. Created the repository and did basic edits | . August 21 (night) | Fastpages development continues with this post, index.html, and about me. Make the Jupyter notebook. Used VSCode with my fastpages development (including this page) | . Remaining tasks: . Refine the Jupyter Notebook (having a title, markdown integration) | Image integration working fine, although I need a way to control resolution (since some images are massive) | .",
            "url": "https://leonard514.github.io/FastPage/submissions/Week_0_Submission",
            "relUrl": "/submissions/Week_0_Submission",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "A Print Test Script",
            "content": "print(&quot;Hello World!&quot;) print(&quot;But that&#39;s boring. Let&#39;s try something different&quot;) print(&quot;Supercalifragilisticexpialidocious!!!&quot;) print(&quot;Pneumonoultramicroscopicsilicovolcanoconiosis!!!&quot;) print(&quot;Now that&#39;s better.&quot;) . Hello World! But that&#39;s boring. Let&#39;s try something different Supercalifragilisticexpialidocious!!! Pneumonoultramicroscopicsilicovolcanoconiosis!!! Now that&#39;s better. .",
            "url": "https://leonard514.github.io/FastPage/scripts/first_jupyter_notebook",
            "relUrl": "/scripts/first_jupyter_notebook",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Print_test",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# A Print Test Script! n”, “&gt;A basic script as a test… with some fun-sized words. n”, “ n”, “- title: A Print Test Script n”, “- toc: false n”, “- layout: post n”, “- description: Print test script! n”, “- categories: [scripts, jupyter, Comp Sci] n”, “- permalink: /scripts/first_jupyter_notebook n” ] }, { “cell_type”: “code”, “execution_count”: 4, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Hello World! n”, “But that’s boring. Let’s try something different n”, “Supercalifragilisticexpialidocious!!! n”, “Pneumonoultramicroscopicsilicovolcanoconiosis!!! n”, “Now that’s better. n” ] } ], “source”: [ “print(&quot;Hello World!&quot;) n”, “ n”, “print(&quot;But that’s boring. Let’s try something different&quot;) n”, “ n”, “print(&quot;Supercalifragilisticexpialidocious!!!&quot;) n”, “ n”, “print(&quot;Pneumonoultramicroscopicsilicovolcanoconiosis!!!&quot;) n”, “ n”, “print(&quot;Now that’s better.&quot;)” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3 (ipykernel)”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.9.12” }, “vscode”: { “interpreter”: { “hash”: “a6b2548ad65db808429227da51ec7f39b8650a8bf07402b465400f480f8a04a2” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://leonard514.github.io/FastPage/2022/08/22/print_test.ipynb",
            "relUrl": "/2022/08/22/print_test.ipynb",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://leonard514.github.io/FastPage/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://leonard514.github.io/FastPage/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Notes",
          "content": "Week 1 Focus and Habits Hack (WIP) . Video Notes (includes 10 insights) . Origins . She sent a survey about what students thought about Yale culture; students are stressed about being in Yale and can’t enjoy pleasures or take advantage of opportunities | 40% of college students have greater than average stress, a third have severe depression, more than 40% have lack of hope, etc. | Santos therefore wanted to help using her knowledge in psychology (including positive psychology, where happy people are studied, and behavior change, to figure out how to change habits)… and made a course about it (Psychology and the good life) | 2 parts: positive psychology and the practice of the good life. To build this practice, rewiring habits became part of the syllabus (including gratitude, social connection, sleep, etc.) | No changes to syllabus upon submission, became popular | . Class Content: 10 insights . Happiness is controllable and can be improved (some is controlled by heritability, but not all) | Location of residence, salary, and other life circumstances matter less than we think (positive and negative events have a temporary impact on happiness). Therefore, removing the “bad stuff” isn’t the way to maximize happiness. | It is challenging (but possible) to become happier. This requires building daily habits that happy people have. The agile methodology, like the “Good Life” course, requires that habits be built. These habits will include having a daily standup meeting for planning and task delegation, maintaining issues for short-term tasks and the scrum board for organizing those tasks. This ensures that tasks are completed at a consistent pace in accordance with the agile methodology (Principle 8). GI Joe Fallacy: A cartoon claimed knowing a concept/skill is half the work, and that is false. The skill must also be put into practice, and that’s the majority of the work. | . | Intuitions about happiness can be inaccurate. The mind forecasts about what makes us happy (ex: salary, possessions), but increases in these things do not correlate with significant increases in happiness. | Happy people make time for social connections (spend more time with others). The agile framework would require working and with other people on computer projects. Communication in the agile framework requires in-person, face-to-face conversation (principle 6). This teamwork makes potential for social connections between effective group members, and this in turn may enhance happiness. | Helping others helps us (more than we expect) by making us happy. Helping others is integrated into the agile framework as when a student is having trouble with code, other group members can work with that student and teach how to fix the issue (this is also part of leadership skills) to help the group move along (Principle 4). This willingness to share help will ultimately lead to a better project and help with learning programming… along with the happiness along the way that comes with being helpful. | Make time for gratitude… daily. Happy people think/talk about the better people (rather than the annoying people). Writing down a list of good events daily increases happiness. It is also good to write a letter of gratitude and read it in-person to the person you are thanking. This reading of the letter connects the most with Agile Principle 6 (face-to-face conversation is the most effective mode of communication) | Healthy practice matter more than we think (exercise, sleep, etc.) Workouts has been shown to boost happiness for the day, while sleep deprivation significantly decreased happiness, some to depression levels. | Mindfulness (be in the present). Mindfulness is being aware of present sensory input (ex: how your feet feel when you stand, the room temperature, any sounds perceived, the color of your dish, etc.). More time spend in mindfulness is correlated with greater happiness, even compared to thinking about pleasant but non-present things. | Become wealthy… in terms of time. Time famine is being too busy… and time affluence is the opposite. People maximizing time affluence are happier. | Gratitude Note Experience (WIP) . Letter to someone on campus . I wrote my letter to my teacher, Mr. Yeung. I was having a problem working with a group member, as I was helping him along every step of the way through setup. This left me with no time to do my own work in class. So I emailed him about the issue, and he told me to tell my partner three things: . Consult the blog/guide and read through the steps | If confused, ask me for help. Ask after 5 minutes of attempts to resolve the issue. | If I was too busy or didn’t know how to help, ask Mr. Yeung for help. | This allowed me to spend time during class working on my computer projects, and it also helped my partner gain some degree of independence during the learning process. I especially saw value in having group members consult a guide. This was very reassuring for me, especially since I tend to have anxiety during the early parts of a class (due to familiarization with class format and the like). So to thank him, I wrote him my letter. I already gave the letter to him at the time of writing, so I can’t copy the contents… but I can paraphrase from memory . In the letter, I thanked him for replying to the email, and told him all the good things that stemmed from this reply: having more time to work on the project, my partner being able to learn with a degree of independence (that is, not fully relying on my help), an understanding that I can refer confused group members to guides so I can continue to help in other ways, and a boost in my collaboration skills which will be important for college and the workforce. I also admitted that working in groups has been a challenge for me, and afterwards thanked him for helping me address it. . When I finished reading the letter to him, he told me he was glad to help with my issue. As far as I remember, the happiness I experienced was not a rush… but more deep inside, like a calm. This could have been my anxiety/stress dissipating. . During the next class, I thought of an application of his advice in a context outside of school. I know that the practice in groups I will get in this class will be invaluable in the future. . Letter to someone at home . I wrote my letter to my mother. I thanked her for helping me with an extracurricular activity last week, and I thanked her for helping me write an email about a concern with work in this class. She proceeded to give me all the credit for writing the email. I also thanked her for giving me good food and transporting me to school and other activities so that I can work with a clear mind, work in groups, and ask students and teachers for help with my work. I also thanked her for lending me her phone to ask my sister for help in AP Calculus BC, a tough course. I finally thanked her for her support in my efforts, especially any support that I haven’t given enough attention to. . My mother smiled and hugged me, and she asked why I was thanking her. When she asked if it was due to her help with improving my anxiety about this class (and other things), I nodded. . I felt it was nice that I made her happy by giving attention to everything she does to support me. Perhaps I can do this with other people as well. . Week 1 Python Vocab . | .",
          "url": "https://leonard514.github.io/FastPage/_pages/02_notes.html",
          "relUrl": "/_pages/02_notes.html",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "About Me",
          "content": "Hi! I’m Leonard Wright, and I am a student at Del Norte High School. This website is currently being maintained for AP Computer Science Principles. I do have some experience securing computers, and I guess this class will be more about learning to code code code!!! I hear we’ll be working in groups a lot in this class. I hope I can also learn about working with others in this class (I had a hard time with this in 11th grade, though recently I’ve learned a few things so hopefully things get better). I’ll need collaboration skills in college and the workforce anyways, so best to start practicing now. . Anyways other than that I guess I can mention I’m in Ms. Lanzi’s BC class (wish me luck). She does a good job with integrating group work into the course structure. That’s a plus since I could learn collaboration skills in that class as well as here. . I don’t know what else to say, I guess I’ll add more stuff here later .",
          "url": "https://leonard514.github.io/FastPage/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://leonard514.github.io/FastPage/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}