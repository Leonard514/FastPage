{
  
    
        "post0": {
            "title": "Week 3 Create Performance Task",
            "content": "The Project Idea . My sister and I had this idea a while back of creating an app to monitor mental health. We didn’t make any progress, but the concept was fair. So I’ll have a go at it with the Create Performance Task. Here are a few ideas. . Providing a list of emergency numbers (I don’t know how a calling function would be able to work, especially since this is meant to be a PC program; the previous concept was a mobile program) | Log daily hours of sleep and display graphically (sleep is important for mental health!) | Log time/activities spent with family or friends | . Of course I need to check all the boxes, so I’ll do that real quick. All of this will be based on only one part of the program (the sleep data part), but the other parts will be in the final product as well. . Row 1: Program Purpose and Function . Take for example the log of the daily hours of sleep. . I would theoretically make a textbox for user input. This would have two pieces of information to input: the date and how much sleep (hours) was taken. . | This information would be outputted graphically. A possibility would have time represented on an x-axis and hours of sleep represented on the y-axis. Each day would be represented by a dot, and the dots will be connected with straight lines. . | The functionality is essentially that a user enters sleep data every day, and the program organizes the data so the user could more easily understand trends of sleep and get appropriate sleep accordingly. . | . Rows 2 and 3: Data Abstraction and Managing Complexity . Rows 2 and 3 will be answered with the same response (3b) on the exam, and they both have to do with lists… so I think it’s appropriate to group them here. The way this will play out (according to the present plan) will be very similar to the Python Lists and Dictionaries activity. . I will make a list of dictionaries named SleepData = [] . | Then using the user input, I will store the input into a list using append commands, with the date being stored in the Date portion of the entry and the number of sleep hours being stored in the Sleep_Hours portion of the entry. In order to append the data, the input would likely be stored in variables before they are used in append commands. . | I will then use a loop to iterate through each item in the list to display all of the days in which data is collected. . | Without a list of dictionaries, it would be very difficult to associate each day with the number of hours of sleep each day. Separate variables could possibly be made for each day and each number of hours of sleep, but the number of variables which would eventually build up would make the solution impractical… possibly unless the variables were stored in some separate file and then imported. Even then, a loop must be used to iterate through the variables, raising the question of whether this would be functionally equivalent to using a list but with greater complexity. . | . Therefore, use of a list is optimal in making output. . Rows 4, 5, and 6: Procedural Abstraction, Algorithm Implementation, and Testing . To output the results of the list graphically, a function would be required. This function would likely involve a for loop and commands required to graphically display the data. . | In order to pass the “two calls with different arguments” check in Row 6, I will make variations for how the data is displayed. There will be two forms of variations: . | . The way the data is displayed (by line graphs, bar graphs, by tables, etc.) | The amount of days for which data is displayed (for past week, for past month, for past 3 months, for past year, or all-time) | I don’t know what graphical displays would look like in terms of code, but in terms of tables I expect to see something functionally similar to the liquid syntax from Week 2. .",
            "url": "https://leonard514.github.io/FastPage/notes/performance_plan",
            "relUrl": "/notes/performance_plan",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Week 3 Javascript Quiz Blog",
            "content": "Below I describe the procedures that I and Abdullah took to make the quiz. We began with planning a topic, then made the actual questions. The questions are given with correct answers in bold. . Quiz Questions . 1) What is the capital of Iceland? a) Reykjavik b) Kopavogur c) Hafnarfjoerdur d) Akureyri 2) What is the capital of Brazil? a) Rio de Janerio b) Brasilia c) Sao Paulo d) Lisbon 3) What is the capital of Pakistan? a) Lahore b) Karachi c) Islamabad d) Mumbai . Coding . I should probably link the project first. . Full Code var correct = 0; onEvent(&quot;StartButton&quot;, &quot;click&quot;, function( ) { setScreen(&quot;Question1&quot;); }); onEvent(&quot;reykjavik&quot;, &quot;click&quot;, function __() { console.log(&quot;reykjavik clicked!&quot;); correct ++; console.log(correct); setScreen(&quot;Question2&quot;);}); onEvent(&quot;kopavogur&quot;, &quot;click&quot;, function __() { console.log(&quot;kopavogur clicked!&quot;); setScreen(&quot;Question2&quot;);}); onEvent(&quot;akureyri&quot;, &quot;click&quot;, function __() { console.log(&quot;akureyri clicked!&quot;); setScreen(&quot;Question2&quot;);}); onEvent(&quot;hafnarfjoedur&quot;, &quot;click&quot;, function __() { console.log(&quot;hafnarfjoedur clicked!&quot;); setScreen(&quot;Question2&quot;);}); onEvent(&quot;brasilia&quot;, &quot;click&quot;, function __() { console.log(&quot;brasilia clicked!&quot;); correct ++; console.log(correct); setScreen(&quot;Question3&quot;);}); onEvent(&quot;lisbon&quot;, &quot;click&quot;, function __() { console.log(&quot;lisbon clicked!&quot;); setScreen(&quot;Question3&quot;);}); onEvent(&quot;SaoPaulo&quot;, &quot;click&quot;, function __() { console.log(&quot;SaoPaulo clicked!&quot;); setScreen(&quot;Question3&quot;);}); onEvent(&quot;rio&quot;, &quot;click&quot;, function __() { console.log(&quot;rio clicked!&quot;); setScreen(&quot;Question3&quot;);}); onEvent(&quot;islamabad&quot;, &quot;click&quot;, function __() { console.log(&quot;islamabad clicked!&quot;); correct ++; console.log(correct); setScreen(&quot;Results&quot;);}); onEvent(&quot;karachi&quot;, &quot;click&quot;, function __() { console.log(&quot;karachi clicked!&quot;); setScreen(&quot;Results&quot;);}); onEvent(&quot;lahore&quot;, &quot;click&quot;, function __() { console.log(&quot;lahore clicked!&quot;); setScreen(&quot;Results&quot;);}); onEvent(&quot;mumbai&quot;, &quot;click&quot;, function __() { console.log(&quot;mumbai clicked!&quot;); setScreen(&quot;Results&quot;);}); console.log(correct); onEvent(&quot;Results&quot;, &quot;mouseover&quot;, function( ) { setText(&quot;scorereport&quot;, &quot;Congratulations!!! You got &quot; + ((correct + &quot;/3&quot;) + &quot; correct!!!&quot;)); }); We started coding the designs. code.org uses Javascript. We first defined a variable. . var correct = 0; . This command sets a variable correct to 0 . We then used the onEvent command to configure what happens when buttons or textboxes were clicked. A sample is visible below. . onEvent(&quot;StartButton&quot;, &quot;click&quot;, function( ) { setScreen(&quot;Question1&quot;); }); . Similar to if statements, loops, and other commands, onEvent has associated commands. . The first criteria of onEvent, StartButton, defines what object the command applies to. This is an app, so there are objects such as buttons, textboxes, and images. | The second criteria, click, determines the action which triggers the command. | The associated command is setScreen, which as implies sets the screen to the named screen (in this case Question1) | . There were many onEvent commands which were highly similar. . onEvent(&quot;reykjavik&quot;, &quot;click&quot;, function __() { console.log(&quot;reykjavik clicked!&quot;); correct ++; console.log(correct); setScreen(&quot;Question2&quot;);}); . This does a few more things. console.log prints the text inside the parenthesis and quotes to console. It can also print the value of a variable (in this case correct). This was extremely useful for debugging purposes, as I will elaborate on shortly. . correct ++ simply increases the value of the correct variable by 1. . I will now discuss the primary issue we encountered in the project. . setText(&quot;scorereport&quot;, (&quot;Congratulations!!! You got &quot; + correct) + &quot;/3&quot; + &quot; correct!!!&quot;); . This command was placed at the very end of our code. It essentially put the text into the textbox named scorereport Whenever we ran the code, we found that at the end the score was either 0 or undefined. . In order to figure out the issues, we used a command which was seen in the second onEvent command . console.log(correct); . Using this, we found that the variable correct was indeed increasing if the correct answers to the questions were selected. Therefore, the issue was that the last line of code was run before the quiz was even taken (when the variable correct was 0). To solve this issue, we made the setText command to be executed as part of an onEvent command. Here was the final version of the command. . onEvent(&quot;Results&quot;, &quot;mouseover&quot;, function( ) { setText(&quot;scorereport&quot;, &quot;Congratulations!!! You got &quot; + ((correct + &quot;/3&quot;) + &quot; correct!!!&quot;)); }); . The Results page was the final page where the score was displayed. The event was mouseover, which is essentially if the mouse is over the page. This made it so the command was executed only when the quiz taker entered the page, ensuring that the correct value for the number of correct answers was outputted. .",
            "url": "https://leonard514.github.io/FastPage/notes/javascript_quiz",
            "relUrl": "/notes/javascript_quiz",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Week 2 Review Ticket",
            "content": "Hi! . This is part of the Week 2 Review Ticket. If you came here, I hope you came here from the github issue. If not, please take a look right here. That being said, if you missed where the python is, it’s here! . Anyways, if you came from the github issue, you are probably here for the fastpages/web development part of the submission. That part of the submission is too complex to just stick a single link in the title without a dedicated post, so here’s to the changes! . Changes!!! . There are quite a few things in the HTML hacks that I have had previously for a while. In case you missed the tags and search pages: . Tags | Search | . My website has plenty of “time box fragments” (otherwise known as tables), including the one below. If you want to see a lot of tables, you should see my notes page. . Also, you probably noticed that my website has a different color scheme. Specifically, my top bar is black while the rest of the background is navy blue. I had to make quite a few customizations to an example dark mode file (as well as the default fastpages-styles.scss file) to change the colors of the background and the text to ensure a dark background and text with sufficient contrast. . I also had an adventure modifying the theme of my website. For notes about that adventure, click here.. I decided to remove the theme since it removed the top bar, making it harder to access the tags page. . Now, here’s a table of my daily progress . Date Activities completed . August 29 | First attempt at theme integration using _config.yml. The theme was not inputted correctly, breaking the CI task in fastpages and making it impossible to update the website. | . August 30 | Learned about dictionaries in a list in python. Added new information into the given list of dictionaries InfoDB, and demonstrated how to output list items backwards and in a random order. | . August 31 | Attempted to make a python quiz using a new list of dictionaries QuizDB, but got stuck due to various issues within the for loop and since I was appending my question/answer pairs to InfoDb instead of QuizDB. Also tried to append to a list using input and had trouble due to quotation issues. I eventually fixed the issue using f”{var_name}”, which allowed printing of any variable value inside the quotation marks. Also learned about how I inputted my website theme wrong in a lesson, and revised that. Had trouble customizing dark mode example code. | . September 1 | Was able to customize dark mode, making all parts of the website except the top bar navy blue (the top bar is the default dark-mode color) | . September 2 | Customized the text color to contrast sufficiently with the background. | . Remaining tasks . Figure out how to control site status (when it’s up and down) | .",
            "url": "https://leonard514.github.io/FastPage/submissions/Week_2_Submission",
            "relUrl": "/submissions/Week_2_Submission",
            "date": " • Sep 1, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Python Loop Scripts!",
            "content": "Hi! . On this page I will demonstrate loops... again like I did on my python quiz. But first we have to make a dictionary within a list. This will store a lot of information.. Most of the variable names are self-explanatory... DOB stands for Date of Birth . InfoDb = [] # Append my info InfoDb.append({ &quot;FirstName&quot;: &quot;Leonard&quot;, &quot;LastName&quot;: &quot;Wright&quot;, &quot;DOB&quot;: &quot;December 13&quot;, &quot;Highest School&quot;: &quot;Del Norte High School&quot;, &quot;Favorite Course&quot;: &quot;AP Comp Sci Principles&quot;, &quot;Occupation&quot;: &quot;Student&quot;, &quot;Favorite Food&quot;: &quot;Panko Chicken&quot;, &quot;Favorite Color&quot;: &quot;Brown&quot;, &quot;Favorite Movie&quot;: &quot;Back to the Future&quot;, &quot;Favorite Activity&quot;: &quot;Experimenting with Computers&quot;, }) # Append my sister&#39;s info InfoDb.append({ &quot;FirstName&quot;: &quot;Lindsay&quot;, &quot;LastName&quot;: &quot;Wright&quot;, &quot;DOB&quot;: &quot;December 3&quot;, &quot;Highest School&quot;: &quot;Rice University&quot;, &quot;Favorite Course&quot;: &quot;Fluid Mechanics&quot;, &quot;Occupation&quot;: &quot;Student, Research Intern, Systems Engineer&quot;, &quot;Favorite Food&quot;: &quot;Wonton&quot;, &quot;Favorite Color&quot;: &quot;Green&quot;, &quot;Favorite Movie&quot;: &quot;The Martian&quot;, &quot;Favorite Activity&quot;: &quot;Hiking&quot;, }) # Appends my mother&#39;s info InfoDb.append({ &quot;FirstName&quot;: &quot;Marilyn&quot;, &quot;LastName&quot;: &quot;Wright&quot;, &quot;DOB&quot;: &quot;June 12&quot;, &quot;Highest School&quot;: &quot;San Beda Law School&quot;, &quot;Favorite Course&quot;: &quot;Constitutional Law&quot;, &quot;Occupation&quot;: &quot;Lawyer, Mother&quot;, &quot;Favorite Food&quot;: &quot;Rice&quot;, &quot;Favorite Color&quot;: &quot;Green&quot;, &quot;Favorite Movie&quot;: &quot;&quot;, &quot;Favorite Activity&quot;: &quot;&quot;, }) # Appends my father&#39;s info InfoDb.append({ &quot;FirstName&quot;: &quot;Leonard&quot;, &quot;LastName&quot;: &quot;Wright&quot;, &quot;DOB&quot;: &quot;June 24&quot;, &quot;Highest School&quot;: &quot;Cal State Fullerton&quot;, &quot;Favorite Course&quot;: &quot;Marketing&quot;, &quot;Occupation&quot;: &quot;CPA, Father&quot;, &quot;Favorite Food&quot;: &quot;Salmon&quot;, &quot;Favorite Color&quot;: &quot;Blue&quot;, &quot;Favorite Movie&quot;: &quot;Gone with the Wind&quot;, &quot;Favorite Activity&quot;: &quot;&quot;, }) # Appends a friend&#39;s info InfoDb.append({ &quot;FirstName&quot;: &quot;Kevin&quot;, &quot;LastName&quot;: &quot;Vu&quot;, &quot;DOB&quot;: &quot;November 2&quot;, &quot;Highest School&quot;: &quot;Del Norte High School&quot;, &quot;Favorite Course&quot;: &quot;&quot;, &quot;Occupation&quot;: &quot;student, &quot;, &quot;Favorite Food&quot;: &quot;&quot;, &quot;Favorite Color&quot;: &quot;&quot;, &quot;Favorite Movie&quot;: &quot;&quot;, &quot;Favorite Activity&quot;: &quot;&quot;, }) # Appends info of John Smith, a fictitious individual InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Smith&quot;, &quot;DOB&quot;: &quot;February 29&quot;, &quot;Highest School&quot;: &quot;UC San Diego&quot;, &quot;Favorite Course&quot;: &quot;Differential Calculus&quot;, &quot;Occupation&quot;: &quot;Professor&quot;, &quot;Favorite Food&quot;: &quot;Beef Stew&quot;, &quot;Favorite Color&quot;: &quot;Red&quot;, &quot;Favorite Movie&quot;: &quot;Star Wars: The Empire Strikes Back&quot;, &quot;Favorite Activity&quot;: &quot;Swimming&quot;, }) # We&#39;re not using the print command anymore because what it spits out is a mess. . Defining a function . Now that I have everything compiled into a nice dictionary, it&#39;s time to demonstrate the power of the loops. But before I do that, I&#39;ll define a function to make life easier. I&#39;ll name it print_data. That way, I can call print_data instead of having to re-type all of those print commands. . # This special d_rec parameter essentially references the dictionary we just created. def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) #these t print indents, which are usually inserted with a tab. print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Highest School:&quot;, d_rec[&quot;Highest School&quot;]) print(&quot; t&quot;, &quot;Occupation:&quot;, d_rec[&quot;Occupation&quot;]) print(&quot; t&quot;, &quot;Favorite Course:&quot;, d_rec[&quot;Favorite Course&quot;]) print(&quot; t&quot;, &quot;Favorite Food:&quot;, d_rec[&quot;Favorite Food&quot;]) print(&quot; t&quot;, &quot;Favorite Color:&quot;, d_rec[&quot;Favorite Color&quot;]) print(&quot; t&quot;, &quot;Favorite Movie:&quot;, d_rec[&quot;Favorite Movie&quot;]) print(&quot; t&quot;, &quot;Favorite Activity:&quot;, d_rec[&quot;Favorite Activity&quot;]) print() print() . The For Loop . Now that the function is defined, I can demonstrate the first loop: the for loop. . # It will execute this set of commands for each individual # who&#39;s information is stored in InfoDb # InfoDb is a dictionary in a list. def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: #index variable is &quot;record&quot; print_data(record) for_loop() . For loop output Leonard Wright Birth Day: December 13 Highest School: Del Norte High School Occupation: Student Favorite Course: AP Comp Sci Principles Favorite Food: Panko Chicken Favorite Color: Brown Favorite Movie: Back to the Future Favorite Activity: Experimenting with Computers Lindsay Wright Birth Day: December 3 Highest School: Rice University Occupation: Student, Research Intern, Systems Engineer Favorite Course: Fluid Mechanics Favorite Food: Wonton Favorite Color: Green Favorite Movie: The Martian Favorite Activity: Hiking Marilyn Wright Birth Day: June 12 Highest School: San Beda Law School Occupation: Lawyer, Mother Favorite Course: Constitutional Law Favorite Food: Rice Favorite Color: Green Favorite Movie: Favorite Activity: Leonard Wright Birth Day: June 24 Highest School: Cal State Fullerton Occupation: CPA, Father Favorite Course: Marketing Favorite Food: Salmon Favorite Color: Blue Favorite Movie: Gone with the Wind Favorite Activity: Kevin Vu Birth Day: November 2 Highest School: Del Norte High School Occupation: student, Favorite Course: Favorite Food: Favorite Color: Favorite Movie: Favorite Activity: John Smith Birth Day: February 29 Highest School: UC San Diego Occupation: Professor Favorite Course: Differential Calculus Favorite Food: Beef Stew Favorite Color: Red Favorite Movie: Star Wars: The Empire Strikes Back Favorite Activity: Swimming . I first define the for_loop function. It prints the string in parenthesis to the terminal. Then: . for record in InfoDb: . for has a function: it cycles through all items in a list, and for each cycle the commands associated with the loop are executed. Keep in mind that InfoDb is a list of dictionary entires, and the items in this list are each person (ex: Leonard Wright, Lindsay Wright), etc. . record serves as an index variable. Index variables can be named anything, but have a very specialized function. They work with a loop (whether this be a for loop, a while loop, or a recursive loop) to iterate through each item in a list. There is a nuance to index variables: they assign a value to each item in a list, but it starts counting from 0 rather than 1 (since 0 is the number with the least value). So the first entry in the list will be associated with 0, etc. This nuance will be important in explaining the while loop. . print_data(record) then prints the information of each user. Keep in mind the index variable record. . If you really want another example and explanation of a for loop, you should check out my first python quiz script. . The While Loop + Backwards output . You already saw the output of my for loop. I will now demonstrate a while loop while reversing the output of the list. . def while_loop(): print(&quot;While loop output n&quot;) i = len(InfoDb) - 1 #Starts on last entry while i &gt; -1: #Ensures the first entry (where i = 0) is printed record = InfoDb[i] print_data(record) i -= 1 #Goes to previous entry (rather than next entry) return while_loop() . While loop output John Smith Birth Day: February 29 Highest School: UC San Diego Occupation: Professor Favorite Course: Differential Calculus Favorite Food: Beef Stew Favorite Color: Red Favorite Movie: Star Wars: The Empire Strikes Back Favorite Activity: Swimming Kevin Vu Birth Day: November 2 Highest School: Del Norte High School Occupation: student, Favorite Course: Favorite Food: Favorite Color: Favorite Movie: Favorite Activity: Leonard Wright Birth Day: June 24 Highest School: Cal State Fullerton Occupation: CPA, Father Favorite Course: Marketing Favorite Food: Salmon Favorite Color: Blue Favorite Movie: Gone with the Wind Favorite Activity: Marilyn Wright Birth Day: June 12 Highest School: San Beda Law School Occupation: Lawyer, Mother Favorite Course: Constitutional Law Favorite Food: Rice Favorite Color: Green Favorite Movie: Favorite Activity: Lindsay Wright Birth Day: December 3 Highest School: Rice University Occupation: Student, Research Intern, Systems Engineer Favorite Course: Fluid Mechanics Favorite Food: Wonton Favorite Color: Green Favorite Movie: The Martian Favorite Activity: Hiking Leonard Wright Birth Day: December 13 Highest School: Del Norte High School Occupation: Student Favorite Course: AP Comp Sci Principles Favorite Food: Panko Chicken Favorite Color: Brown Favorite Movie: Back to the Future Favorite Activity: Experimenting with Computers . So we first define a function and print how there&#39;s output... . Then you notice that i is defined. The len(list_name) command will become the number of entries in the list named list_name. Now, let me paste the actual line. . i = len(InfoDb) - 1 . Noticed how I subtracted 1 from the len(InfoDb)? Well that&#39;s because the final entry in the list will have a value one less than the number of entries in the list, since the first entry is assigned a 0 instead of a 1. You will see that the next line of code takes this into account as well. This also means that we will print the final entry of the list first. . while i &gt; -1: . The while command will execute all associated commands as long as a statement is true. When iterating through lists, this typically involves setting the index variable (in this case, i) equal to a value, then adding a value until it reaches a value such that all entries in a list have been cycled through the commands. The condition is typically that i is less than or greater than a certain value. Now notice that my condition is that i is greater than negative one. This is because I want my first entry of the list, where i is set to 0, to print. Then, . record = InfoDb[i] print_data(record) i -= 1 . This makes a record variable, which is equal to entry i (whatever value i is for that execution cycle is). It then executes the print_data function on that entry of the list of dictionaries. Finally, the value of i decreases by 1. This ensures that the entry in the list before the previously printed entry is printed next. This essentially makes it so the entries are printed backwards. . Recursive Loops . Recursive loops are quite similar to while loops in terms of structure. What is interesting about them is that a function is defined, and the list of commands within the function includes the function. . Now, I will also try to do something fun. I will try to randomize the order which the entries in the list are printed. The nature of the command which randomizes entry order overrides the list the command is performed on. I wish to preserve the original list, so I&#39;ll make a copy of the original list. . import random # makes copy of InfoDb list InfoDb_random = InfoDb # randomizes order of entries in InfoDb_random random.shuffle(InfoDb_random) #The actual recursive loop starts here def recursive_loop(i): if i &lt; len(InfoDb_random): record = InfoDb_random[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Lindsay Wright Birth Day: December 3 Highest School: Rice University Occupation: Student, Research Intern, Systems Engineer Favorite Course: Fluid Mechanics Favorite Food: Wonton Favorite Color: Green Favorite Movie: The Martian Favorite Activity: Hiking Leonard Wright Birth Day: December 13 Highest School: Del Norte High School Occupation: Student Favorite Course: AP Comp Sci Principles Favorite Food: Panko Chicken Favorite Color: Brown Favorite Movie: Back to the Future Favorite Activity: Experimenting with Computers John Smith Birth Day: February 29 Highest School: UC San Diego Occupation: Professor Favorite Course: Differential Calculus Favorite Food: Beef Stew Favorite Color: Red Favorite Movie: Star Wars: The Empire Strikes Back Favorite Activity: Swimming Kevin Vu Birth Day: November 2 Highest School: Del Norte High School Occupation: student, Favorite Course: Favorite Food: Favorite Color: Favorite Movie: Favorite Activity: Marilyn Wright Birth Day: June 12 Highest School: San Beda Law School Occupation: Lawyer, Mother Favorite Course: Constitutional Law Favorite Food: Rice Favorite Color: Green Favorite Movie: Favorite Activity: Leonard Wright Birth Day: June 24 Highest School: Cal State Fullerton Occupation: CPA, Father Favorite Course: Marketing Favorite Food: Salmon Favorite Color: Blue Favorite Movie: Gone with the Wind Favorite Activity: . I hope the comments were enough to explain everything but the recursive loop. . def recursive_loop(i): if i &lt; len(InfoDb_random): record = InfoDb_random[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . In the first line, we define our recursive_loop. Notice that the parameter is the index variable, i | In the second line, we give an if statement. The condition is that i is less than the number of entries in the list InfoDb_random, or that not all entries in the list have been cycled through the loop. This should show you that we are cycling the entries in order of first, second, third... then last. Also remember that the order of entries of InfoDb_random are a randomized version of that of InfoDb. | Makes a record variable, which is set equal to the entry in the InfoDb_random list which is associated with the value of i | Executes the print_data function with record (or an entry in the list InfoDb_random) as the parameter | The function calls itself, essentially looping back to the top of the list of associated commands, but adding 1 to the index variable. | return stores all the output in the main script so that it can be used outside of the function | Then notice the recursive_loop(0). It tells the script to start with i=0, or essentially the first entry in InfoDb_random . Making a Quiz using a List of Dictionaries! . You probably saw my first python quiz. All the questions were collected onto a single list, which ultimately made that list a very long line. That&#39;s messy and disorganized. Let&#39;s use a list of dictionaries to make it more organized. But first, let&#39;s define the list, or the questions and answers... and the function, question_with_response. . import time, random #Makes a new list for our quiz QuizDB = [] #Appends all the quiz questions into our list. #This quiz will be a relatively simple geography quiz. #Notice that I use the database_name.append. QuizDB.append({ &quot;Country&quot;: &quot;Uruguay&quot;, &quot;Continent&quot;: &quot;South America&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;Austria&quot;, &quot;Continent&quot;: &quot;Europe&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;United Arab Emirates&quot;, &quot;Continent&quot;: &quot;Asia&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;Sweden&quot;, &quot;Continent&quot;: &quot;Europe&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;Tanzania&quot;, &quot;Continent&quot;: &quot;Africa&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;Yemen&quot;, &quot;Continent&quot;: &quot;Asia&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;Mauritania&quot;, &quot;Continent&quot;: &quot;Africa&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;Peru&quot;, &quot;Continent&quot;: &quot;South America&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;South Korea&quot;, &quot;Continent&quot;: &quot;Asia&quot;, }) QuizDB.append({ &quot;Country&quot;: &quot;Singapore&quot;, &quot;Continent&quot;: &quot;Asia&quot;, }) #Define question_with_response to give question prompts and collect input #As a reminder, print() prints the parameter (in parenthesis) into terminal def question_with_response(prompt): print(&quot;Question: What continent is &quot; + prompt + &quot; in?&quot;) msg = input() return msg . Then I&#39;ll make the quiz. . random.shuffle(QuizDB) #Define variables questions = 10 correct = 0 #I&#39;ll take some personal liberties with the initial prompt print(&quot;Hi! Welcome to my Python Geography quiz! Please capitalize the names of continents.&quot;) print(&quot;You got 15 nanoseconds to prepare for this quiz. Say yes!&quot;) #Disables input and output for 15 seconds. time.sleep(15) #Cycles through the quiz questions for i in QuizDB: rsp = question_with_response(i[&quot;Country&quot;]) if rsp == i[&quot;Continent&quot;]: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! The answer was&quot;, i[&quot;Continent&quot;]) #Calculates percent correct answers. percent = (correct/questions) * 100 #Prints accuracy of answers to terminal print(&quot;You scored &quot; + str(percent) + &#39;%!&#39;) . Hi! Welcome to my Python Geography quiz! Please capitalize the names of continents. You got 15 nanoseconds to prepare for this quiz. Say yes! Question: What continent is Singapore in? Asia Asia is correct! Question: What continent is Sweden in? Europe Europe is correct! Question: What continent is Yemen in? Asia Asia is correct! Question: What continent is South Korea in? Asia Asia is correct! Question: What continent is Uruguay in? South America South America is correct! Question: What continent is Mauritania in? Africa Africa is correct! Question: What continent is United Arab Emirates in? Asia Asia is correct! Question: What continent is Austria in? Europe Europe is correct! Question: What continent is Peru in? South America South America is correct! Question: What continent is Tanzania in? . I think the code that needs the most explaining here is the for loop. I&#39;ll bring it down here. . for i in QuizDB: rsp = question_with_response(i[&quot;Country&quot;]) if rsp == i[&quot;Continent&quot;]: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! The answer was&quot;, i[&quot;Continent&quot;]) . Line 1: For each entry in the list of dictionaries QuizDB, the associated commands will be executed | Make a rsp variable. It is set equal to the input garnered from the question_with_response function. Notice the parameter of question_with_response is i[&quot;country&quot;]. i is the index variable. For the current associated item in the list, the string associated with &quot;Country&quot; will be used as the parameter to question_with_response | An if statement with the condition that the input collected is equal to the string associated with &quot;Continent&quot; for that list. The string associated with &quot;Continent&quot; in this case is the correct answer, or the continent that the associated country is in. | If the condition is satisfied, then the fact that the answer was correct is outputted to the terminal and | The variable correct (which is the number of questions answered correctly) is increased by one | An else statement (if the if condition is not satisfied, associated commands are executed) | prints to the terminal that the question was answered incorrectly, and also shows the correct answer. | Append to a list with user input . There is one more thing I want to do for hacks, and that is appending to a list with user input. From my experience, collecting variables will be very helpful. I will be appending to the QuizDB list to make things simpler. Let me demonstrate below: . def append_input(): print(&quot;Do you want to add a new country/continent question? [y/n]&quot;) yesno = input() #Starts appending sequence if yesno == &quot;y&quot;: print() print (&quot;What country do you want to append?&quot;) country_app = input() print() print(&quot;What continent do you want to append?&quot;) continent_app = input() QuizDB.append({ &quot;Country&quot;: f&quot;{country_app}&quot;, &quot;Continent&quot;: f&quot;{continent_app}&quot;, }) print() append_input() #exits function if n is given elif yesno == &quot;n&quot;: return #Prevents issues if initial input was something other than y or n. #Re-executes the first command else: append_input() append_input() . Do you want to add a new country/continent question? [y/n] a Do you want to add a new country/continent question? [y/n] s Do you want to add a new country/continent question? [y/n] y What country do you want to append? United States What continent do you want to append? North America Do you want to add a new country/continent question? [y/n] y What country do you want to append? Japan What continent do you want to append? Asia Do you want to add a new country/continent question? [y/n] y What country do you want to append? Ukraine What continent do you want to append? Europe Do you want to add a new country/continent question? [y/n] y What country do you want to append? Mexico What continent do you want to append? Europe Do you want to add a new country/continent question? [y/n] y What country do you want to append? Atlantis What continent do you want to append? Atlantic Ocean Do you want to add a new country/continent question? [y/n] y What country do you want to append? Tennessee What continent do you want to append? United States Do you want to add a new country/continent question? [y/n] n . Notice that you can input anything into the list, including fictitious places or incorrect information. This python code does not know fact from fiction. It will just store whatever you give it. That&#39;s how it works. . Now, I didn&#39;t put comments on the part where the if statement is satisfied. I did that since that would lead to a bit of confusion with what the associated command are, etc. I&#39;ll paste the commands associated with the if condition right here . if yesno == &quot;y&quot;: print() print (&quot;What country do you want to append?&quot;) country_app = input() print() print(&quot;What continent do you want to append?&quot;) continent_app = input() QuizDB.append({ &quot;Country&quot;: f&quot;{country_app}&quot;, &quot;Continent&quot;: f&quot;{continent_app}&quot;, }) print() append_input() . Line 1 is the if statement itself. If a user wants to append questions, he/she would have given a y response. | The question of which country to input is then given in the terminal. | Line 4 collects this input and stores it as country_app. app is the first three letters of &quot;append.&quot; | The notice to input the continent is printed into the terminal. This input is collected as continent_app | The inputted information is appended into QuizDB. | Notice how Country is associated with f&quot;{country_app}&quot;. The f, or format command is essentially used to bypass all of those issues with quotation marks. This and the curly brackets allows the value of the input (instead of country_app as a string) to be stored into the dictionary. A similar process is used for continents. | Finally, the function append_input() calls itself again to give the user a chance to input another country/continent set. | . Now, to test to see that the information is actually appended, we will take the quiz... again! And see me &quot;mess up&quot; on all the questions I intentionally misconfigured. . random.shuffle(QuizDB) #Define variables questions = 0 correct = 0 #Cycles through the quiz questions for i in QuizDB: questions += 1 rsp = question_with_response(i[&quot;Country&quot;]) if rsp == i[&quot;Continent&quot;]: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! The answer was&quot;, i[&quot;Continent&quot;]) #Calculates percent correct answers. percent = (correct/questions) * 100 #Prints accuracy of answers to terminal print(&quot;You scored &quot; + str(percent) + &#39;%!&#39;) . Question: What continent is Tennessee in? North America North America is incorrect! The answer was United States Question: What continent is United States in? North America North America is correct! Question: What continent is Peru in? South America South America is correct! Question: What continent is South Korea in? Asia Asia is correct! Question: What continent is Mexico in? North America North America is incorrect! The answer was Europe Question: What continent is Yemen in? Asia Asia is correct! Question: What continent is Atlantis in? what what is incorrect! The answer was Atlantic Ocean Question: What continent is Singapore in? Asia Asia is correct! Question: What continent is Japan in? Asia Asia is correct! Question: What continent is Tanzania in? Africa Africa is correct! Question: What continent is United Arab Emirates in? Asia Asia is correct! Question: What continent is Sweden in? Europe Europe is correct! Question: What continent is Mauritania in? Africa Africa is correct! Question: What continent is Ukraine in? Europe Europe is correct! Question: What continent is Austria in? Europe Europe is correct! Question: What continent is Uruguay in? South America South America is correct! You scored 81.25%! . There was one notable change I made. I initially set the questions variable to 0, and automated the increase of the question variable. See the for loop: . for i in QuizDB: questions += 1 rsp = question_with_response(i[&quot;Country&quot;]) if rsp == i[&quot;Continent&quot;]: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! The answer was&quot;, i[&quot;Continent&quot;]) . Notice that the first command associated with the for loop is increasing the value of questions by 1. That way, the number of questions is automated and I don&#39;t have to count to make a pre-set value. .",
            "url": "https://leonard514.github.io/FastPage/scripts/loop_scripts",
            "relUrl": "/scripts/loop_scripts",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Week 1 Review Ticket",
            "content": "Hi! . This is part of the Week 1 Review Ticket. If you came here, I hope you came here from the github issue. If not, please take a look right here. That being said, if you missed where the python, bash, and personal development submission parts are, they are in this list! . Python! | Bash! | Personal Development! | . Anyways, if you came from the github issue, you are probably here for the fastpages/web development part of the submission. That part of the submission is too complex to just stick a single link in the title without a dedicated post, so here’s to the changes! . Changes!!! . If you go back to the homepage, you may notice that the majority of the posts have vanished (with the exception of some word files and the weekly review tickets). This is intentional. The posts column would be far too messy if every markdown page and every jupyter notebook file I uploaded to the site landed in the column. The way I did this was to add the hide: true option to the front matter of all of my notebooks and markdown files (with the exception of the review tickets). I also added that to word_front_matter.txt in the action files, but unfortunately it doesn’t want to cooperate with me. So there are word files in the posts column. Sorry about that. . But how will I find all of your posts and notebooks? Well, for that you can refer to the search page if you want to look up a specific phrase, or go to the tags page! The tags page will provide a much better framework for organizing all of my notebook files and markdown files. And of course if you really need to go back and view a file I used for submission, go to my issues page! I won’t close any issues until the year ends. . However, I still have to add what I did. If you looked at my python and bash hacks, those serve as the .ipynb jupyter notebook files I added to the site. I also have a very comprehensive notes page in the taskbar (notice it’s between the tags and about me pages). In addition, I added two markdown posts for my Calc BC Class. One has multiple images of some fundamental concepts, while the other is a guide for showing work (since there are a lot of nuances in that class). As for my word files, those come from my English class. There are: . Directions to writing an Op-Ed | An Op-Ed Rubric | . How come I didn’t put that many files here? Because I’m smart enough to realize that if I put any turned-in assignments here that there’s the risk of someone copying my work… and what happens afterwards is nasty. . Now, here’s a table of my daily progress . Date Activities completed . August 22 | Review Ticket shown | . August 23 | Sent email to Mr. Yeung about concerns in working in groups (a partner was taking up my time with needing help getting set up). He gave me some very helpful tips. During class, I also learned to open jupyter notebooks in a web browser. Took notes on the “good life” video very late in the night. | . August 24 | Started the python script at this point. Was a little confused. | . August 25 | Started the bash script. I was confused. Finished the python vocabulary notes and made my first for loop in the python quiz! Uploaded files for other courses into fastpages. | . August 26 | Removed an if statement in the tags page which excluded pages with the hide: true front matter (this was to organize my fast page). Uploaded files for other courses into fastpages. | . August 28 | Finished bash script test. Added comment functionality to the majority of my files. Dealt with issues in image integration of notebooks and word file issues (ongoing) | . Remaining tasks . Tags in word files (I do have the categories in the word front matter file, but it’s not working for some reason.) | .",
            "url": "https://leonard514.github.io/FastPage/submissions/Week_1_Submission",
            "relUrl": "/submissions/Week_1_Submission",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "BC Procedures",
            "content": "Gotta Knows . (Know them.)[https://leonard514.github.io/FastPage/classes/BC/gotta_know] . Writing your work: Arrows . When showing work, minimize arrows. Instead attempt to stick to a up to down model, then left to right. . Using methods taught in class . When solving a problem, you are only allowed to use methods taught in class. This is likely to avoid any misconceptions about those methods not covered yet, although this does turn many of the problems into a game of whether the concept is prohibited since it wasn’t covered or if it should be used since it’s being introduced. . Writing the domain . Write the domain in interval notation. So instead of using -1 &lt; x &lt; 1, use (-1,1). Do this even if a single value is excluded from the domain. For example, if x=1 is excluded from the domain, write as (-∞,1)u(1,∞). Also, you have to use the u. Writing (-∞,1),(1,∞) is incorrect notation… since that’s the way it was written. . Limits and grouping symbols . If there is addition/subtraction going on in the rule of the limit which is not modified by multiplication/division, there must be grouping symbols (parenthesis) around the entire rule. This is to ensure clarity of what function is taken to the limit. Outside of this, grouping symbols are optional. . Limits and known rules . If the rule of a limit is known, it should be written out in full form (ex: x+1) rather than in f(x) form. f(x) form is usually only OK when given a graph of that function. . One-sided limits . One sided limits should always have the +/- superscripts of whatever value x is approaching. . Direct Substitution fails due to division by zero: not indeterminate . If a direct substitution fails due to division by zero, and the numerator is not zero, do not skip ahead to Does not Exist (infinity or negative infinity). You must first take the left and right limits, and if the infinities have the opposite signs (like in 1/x), then the Does not Exist reasoning is actually that the left limit is not equal to the right limit. . Direct Substitution: infinity . If there is a limit as x approaches infinity, do not directly substitute infinity like it is a variable or a number, because it is neither of those. . Piecewise Functions: Conventions . When listing a piecewise function, the piece with the least domain is listed first, and the piece with the greatest domain last. As for the domains, there will always be a greater than/equal to, and never a less than/equal to. That is, the lower bound of the domain (if not negative infinity) is included, and the upper bound is excluded. Also, when stating the domain, x always has to be listed first if it is strictly less than a value or strictly greater than a value (ex: x &lt; 4, NOT 4 &gt; x). This is likely in place to establish consistency in defining piecewise functions. . Squeeze Theorem: Sign of appended functions . When using the squeeze theorem on a limit, any appended functions/actions (like x+1, or taking the reciprocal of all terms) must have their signs checked for the x being approached. . If the sign is negative, the inequality signs must be flipped in the first step, and in the second step the terms must be re-ordered from least to greatest. | Taking the reciprocal of all terms flips the inequality signs since the least term becomes the greatest (since it has the least denominator) and the greatest term becomes the least (with the greatest denominator). | If the sign of an appended function is zero, there must be two squeeze theorem sequences performed for approaching x from the left and right sides to account for the two sides of a limit (and the effect of signs on the inequality signs). | . Using a creative one . When there is two of the same term on the denominator, there is a creative one. The term functions as a 1 within the function and has a singular effect: creating a removeable discontinuity (hole) where x causes a 0/0. There is no “canceling” of terms since the terms still play a role. When the terms become one, write ones on them. . Using a unique creative one as part of a limit to infinity/negative infinity . When taking a limit to infinity/negative infinity and an indeterminate result is yielded(infinity over infinity… and the like), it is possible to multiply the entire rule by a unique creative one. Typically, this will involve multiplying both sides of the fraction by something like (1/x^2). There are special parameters, however. The denominator must not equal zero, and its limit must also exist. This essentially means in general cases, we multiply by (1/x^a), where a is the greatest power an x in the denominator is raised to. Occasionally, both sides of the fraction will be multiplied by (1/sqrt(x^2)) or some other root of a polynomial. This can happen if one side of the fraction is under a root (and the other isn’t). In this case, the side under the root can have x^2 divided as normal, but the other side of the fraction must take into account that sqrt(x^2) is the absolute value of x, which is a piecewise function. Any roots which start out being even roots but having odd powers at the end will deal with absolute value. The sign of that part of the creative one then depends on what x is approaching (can be positive/negative depending on which piece’s domain the value x is approaching falls on). . Now, what I haven’t seen yet is the x approaching the value of the piecewise function where x=0. It is very difficult to guess how I would be expected to react to this. It is likely I will be asked to go with the piece where the non-opposite function in the absolute value is so that I can follow conventions. . Limit of a composite function . There are times when you are asked to take the limit of f(g(x)) as x approaches c. There are two approaches you can take for this limit . Limit inside composite function: to use this strategy, you must first verify that g(x) is continuous at x=c, and that f(x) is continuous at x=g(c). If this works, then f(g(x)) is continuous and lim(f(g(x))) = f(lim(g(x))). If this is not the case, you must use a different method. The use of this different method is likely to prevent writing infinity/negative infinity as a number/variable, and/or to circumvent complications if there is a hole or if the function’s output at a certain point is not equal to the limit (in which case f may be undefined or output the wrong value, since this is a limit we’re taking (not where the function f is defined)) | Input-output method: this accounts for the fact that as the definition of a composite function f(g(x)), x serves as the input to g(x), and the output serves as the input to f(x), which then gives the final input. To do this, show a separate step where the limit of the inside function is taken (as x approaches c, g(x) approaches [value]). Then, take the limit as the inside function approaches the limit you calculated, and write out f(g(x)) as usual. That inside function is your input to f. Then, get your solution. | Definition of differentiability . Differentiability is not the same thing as continuity. Differentiability is defined as when the limit that serves as the definition of the derivative exists. Nothing more. .",
            "url": "https://leonard514.github.io/FastPage/classes/BC/procedures",
            "relUrl": "/classes/BC/procedures",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "BC Gotta Knows!",
            "content": "Special Trig Limits + Squeeze Theorem . . Continuity Definition . . Continuity Properties + Composite Continuity . . Differentiability Definition . .",
            "url": "https://leonard514.github.io/FastPage/classes/BC/gotta_know",
            "relUrl": "/classes/BC/gotta_know",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Bash Test Script!",
            "content": "Hi! Welcome to my first bash notebook. There will be two scripts featured here: An installation verification script and a github updating script. Below is the installation verification script. . Check Installation Script . # The bullet of updating a repository is addressed in the next script below #uses basic version commands echo Basic Python Installation Check python --version python2 --version echo &quot;&quot; echo &quot;&quot; #uses basic version commands echo Basic Conda Installation Check conda --version echo &quot;&quot; echo &quot;&quot; #uses basic version commands echo Basic Jupyter Installation check jupyter --version echo &quot;&quot; echo &quot;&quot; echo Basic Checks Complete echo &quot;&quot; #sets up variables to check conda installation. echo Check Conda Installation using Conda conda=&quot;conda&quot; checkconda=$(conda list | grep $conda) nconda=$(echo &quot;$checkconda&quot; | wc -l ) #checks if conda is there or if the grep command had output if [[ $nconda &gt; 0 ]]; then echo &quot;$conda found!&quot; echo &quot;&quot; echo &quot;&quot; echo &quot;$checkconda&quot; # If there&#39;s no conda... installs conda and exits the script so the base prompt appears. else echo &quot;$conda not found. Installing so the script doesn&#39;t break!&quot; echo &quot;&quot; echo &quot;&quot; cd /tmp wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh chmod +x Anaconda3-2022.05-Linux-x86_64.sh echo &quot;Make sure that you reply yes to the final prompt about the conda (the default is no).&quot; echo &quot;After this, the script will exit and you must reload Windows Subsystem Linux to make sure the base prompt is present.&quot; echo &quot;Then, run this script again.&quot; ./Anaconda3-2022.05-Linux-x86_64.sh exit fi echo &quot;&quot; echo &quot;&quot; #sets up variables to check jupyter installation with conda echo Check Jupyter Installation using Conda jupyter=&quot;jupyter&quot; checkjupyter=$(conda list | grep $jupyter) njupyter=$(echo &quot;$checkjupyter&quot; | wc -l ) #checks if jupyter is present if [[ $njupyter &gt; 0 ]]; then echo &quot;$jupyter found!&quot; echo &quot;&quot; echo &quot;&quot; echo &quot;$checkjupyter&quot; # jupyter not present, installs jupyter else echo &quot;$jupyter not found, installing&quot; echo &quot;&quot; echo &quot;&quot; conda install jupyter fi echo &quot;&quot; echo &quot;&quot; #sets up variables to check python with conda echo Check Python Installation using Conda python=&quot;python&quot; checkpython=$(conda list | grep $python) npython=$(echo &quot;$checkpython&quot; | wc -l) #checks if python is present if [[ $npython &gt; 0 ]]; then echo &quot;$python found!&quot; echo &quot;&quot; echo &quot;&quot; echo &quot;$checkpython&quot; # No python, installs python and related stuff else echo &quot;$python not found, installing!&quot; echo &quot;&quot; echo &quot;&quot; sudo apt install python2 python3 python3-pip pip install bash_kernel python -m bash_kernel.install conda list | grep $python jupyter kernelspec list fi . Basic Python Installation Check Python 3.9.12 Python 2.7.18 Basic Conda Installation Check conda 4.13.0 Basic Jupyter Installation check Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Basic Checks Complete Check Conda Installation using Conda conda found! # packages in environment at /home/leonardw48247/anaconda3: anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 Check Jupyter Installation using Conda jupyter found! jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 Check Python Installation using Conda python found! ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 msgpack-python 1.0.2 py39hff7bd54_1 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 . Github Script . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section for setting project directory, the folder where the repository will be imported, and importation of repository export project_dir=/mnt/c/project_repository export project=$project_dir/FastPage export project_repo=&quot;https://github.com/Leonard514/FastPage.git&quot; cd ~ # start in home directory # Conditional block to make a project directory... if it doesn&#39;t exist yet if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exist... making directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exist... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; # This is meant to export a local repository to GitHub (online) cd $project . Using conditional statement to create a project directory and project Directory /mnt/c/project_repository does not exist... making directory /mnt/c/project_repository Directory /mnt/c/project_repository exists. Directory /mnt/c/project_repository/FastPage does not exist... cloning https://github.com/Leonard514/FastPage.git Cloning into &#39;FastPage&#39;... remote: Enumerating objects: 1780, done. remote: Counting objects: 100% (1578/1578), done. remote: Compressing objects: 100% (606/606), done. remote: Total 1780 (delta 828), reused 1428 (delta 761), pack-reused 202 Receiving objects: 100% (1780/1780), 14.78 MiB | 13.10 MiB/s, done. Resolving deltas: 100% (858/858), done. Directory /mnt/c/project_repository/FastPage exists. . Slack Check Complete! . And this? Just to let you know I have slack installed. . # test for a kernel installation test=“python3” # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo “$check” else # less than zero echo “$check” fi . Still don&#39;t believe me? Well this should change your mind. .",
            "url": "https://leonard514.github.io/FastPage/scripts/bash_test",
            "relUrl": "/scripts/bash_test",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Writing An Op Ed Piece",
            "content": "Writing an Op-Ed Piece . Requirements: . - 400-800 words, typed, (Copy submitted to teacher must be double-spaced, MLA format) . - Due Tuesday 9/6 at midnight . - You must choose an actual newspaper/journal to submit your piece to. See theopedproject.org for a list of possibilities. Identify the specific publication that you are submitting to on your piece. . - Clearly defined subject matter that engages reader with opening . - Distinct and plausible recommendations for action and change (failure to do this will result in a full grade level dock) . - Acknowledgment of opposing point of view . - Vibrant word choice reflective of personal voice and writer’s ethos. . According to The Wall Street Journal: Your article should be a strong argument about an issue in the news. It should not be a response to a Journal article; that is a letter to the editor. So this means that you should choose something about which you are passionate. . Please visit http://www.theopedproject.org/ for further resources . According to Duke University: . - Track the news and jump at opportunities. . - Make a single point — well. . - Put your main point on top. . - Tell readers why they should care. . - Offer specific recommendations. . - Showing is better than discussing. . - Embrace your personal voice. . - Play up your personal connection to the readers. . - Use short sentences and paragraphs. . - Avoid jargon. . - Use the active voice. . - Avoid tedious rebuttals. . - Acknowledge the other side. . - Make your ending a winner. . - Relax and have fun. . - Don’t worry about the headline. . - Offer graphics. .",
            "url": "https://leonard514.github.io/FastPage/word/2022/08/25/Writing-an-Op-Ed-Piece.html",
            "relUrl": "/word/2022/08/25/Writing-an-Op-Ed-Piece.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Op Ed Rubric",
            "content": "Traits 6 . (A+) . 5 . (A-/B+) . 4 . (B) . 3 . (C) . 2 . (D) . 1 . (F) . . Ideas | Clearly stated insightful claim outlining argument with well chosen quotes from reputable sources. . Demonstrates a thorough critical understanding of the issue. Explores the topic thoughtfully, acknowledges opposing points of view, and makes excellent use of the rhetorical strategies discussed in class. . | Clear argument statement and necessary supporting quotations that are cited correctly. . Demonstrates critical understanding of the issue. Explores issues well, acknowledges opposing points of view and makes strong use of rhetorical strategies discussed in class. . | Clear claim statement but it may lack depth. May not always include best quotations or may use obvious quotations. Demonstrates clear understanding of the issue. Explores the issues of this topic, may have implicit acknowledgment of opposing points of view, and successfully uses rhetorical strategies discussed in class. | Claim statement is too broad. Quotations are minimal or poorly chosen. Demonstrates some understanding of the issue. Explores some issues, implicit or missing acknowledgment of opposing points of view, and makes some use of the rhetorical strategies discussed in class. | Claim statement is unclear or simple &amp;/ more quotations are needed. Understanding of issue is shallow or not clearly demonstrated. Implicit or missing acknowledgment of opposing points of view Makes very little use of rhetorical strategies discussed in class. | The essay needs a claim statement and details. Understanding of the issue/articles is extremely limited or nonexistent. No use of rhetorical strategies discusses in class. | . Organization | Response is coherent, well focused and logical. The response contains logical structure that guides the reader and a conclusion which insightfully summarizes argument presented. Includes distinct and plausible recommendations for action and change. Order of information presented is compelling to read. . | Response is focused and logical. The response contains topic sentences which guide the reader and a conclusion which summarizes the argument presented. Includes plausible recommendations for action and change. The order in which the information is presented is successful.. | Response is focused on argument. The response contains topic sentences that guide the reader and a conclusion which loosely summarizes the argument. Includes recommendations for action and change but may not be as specific or plausible. The order in which the information is presented is appropriate | Response is somewhat focused on the argument. The response contains topic sentences and a short or inadequate conclusion. Missing or underdeveloped recommendations for action and change. The order in which the information is presented may confuse the reader. | Response is poorly focused on the argument, if at all. Topic sentences that are present are poorly written and if conclusion is present it is weak. Missing or underdeveloped recommendations for action and change The order in which the information is presented is confusing. | Response lacks logical organization. Topic sentences are nonexistent/ a conclusion may be missing. Missing recommendations for action and change. | . Voice | Voice expresses interest &amp; complete understanding of topic. Engages reader with a reason to care through unique personal perspective evident through use of compelling ideas, engaging language, and relevant details. Appropriate for purpose &amp; audience. . | The voice expresses interest in and understanding of the topic. Shows personal connection to topic and audience. Uses some compelling engaging language to meet the purpose of the assignment. | The voice expresses interest but needs to show more understanding. While the voice does engage the reader, it lacks a consistent personal connection. Has some engaging language but could use more | The voice needs to be more interesting and express more understanding. Reader questions the personal connection of the author. Language is not vivid or engaging | The voice does not show and interest in or understanding of the topic. There is little, to no, personal connection to the author in the voice or writing. | The writer needs to understand how to create a voice. | . Word Choice | Reflects careful thinking about subject. Words are rich, colorful, &amp; precise. Uses specific details to show ideas instead of tell. Words energize writing. Language moves &amp; enlightens the reader. Vocabulary striking, varied. Strong active verbs dominate. Verb tense shifts are correct. | The word choice creates a clear message. Broad range of words that are carefully chosen. Word choices energize writing. Vocabulary varied. Active verbs throughout the essay. Verb tense shifts are correct. | The word choice is appropriate and functional. The words work but might not energize the writing. Attempts at colorful language may be overdone. May include some passive verbs. Verb tense mostly correct. | The word choice is too general and uses many familiar words and phrases. Expression is mundane. Words work but do not capture interest. Passive verbs and linking verbs may dominate. May include many verb tense errors. | Words are colorless, flat, imprecise. . Monotonous repetition. Images are fuzzy or absent. Many passive verbs and linking verbs. Many verb tense errors. . | Limited vocabulary. Words that do not fit text. Words imprecise, wrong. Vague language hides . meaning of message . | . Sentence Fluency | Sentences are skillfully written. Writer consistently uses a variety of sentences. The writing is natural and flows smoothly. Sentences begin with a variety of words. Relatable, accessible language. | The sentences are skillfully written. Writer consistently uses a variety of sentences, fewer than a 6. The writing is natural and flows smoothly. Sentences begin with a variety of words. | The writer uses some variety in sentences. Paper has some rough spots. Not all sentences begin the same. No sentence problems exist. More sentence variety needed. | Writer uses simple sentences. Some sentences are choppy or awkward, but most are smooth and clear. Sentences tend to begin the same. A few sentence problems need to be corrected. | Writer doesn&#39;t use much variety in sentences. Little to no use of linking words to connect sentences. Uses short, repetitive sentence patterns. Has many sentence problems. | The writer needs to learn how to construct sentences. | . Conventions | Grammar &amp; punctuation correct, &amp; copy is free of all errors. Writing is complex enough to show skill in using a wide-range of conventions. All citation are correct and present. Meets word count of 400-800 words. | The essay has one or two errors that do not interfere with the reader’s understanding. . All citation are correct and present. Meets word count of 400-800 words. | The essay has a few careless errors in punctuation and grammar. Most citations are correct and present. May not meet word count of 400-800 words. | The errors in the essay confuse the reader. Most citations are correct and present. May not meet word count of 400-800 words. | The number of errors makes the essay hard to read. Many errors with citations. May not meet word count of 400-800 words. | Help is needed to make corrections. Little to no citations present. May not meet word count of 400-800 words. | .",
            "url": "https://leonard514.github.io/FastPage/word/2022/08/25/Op-Ed-Rubric.html",
            "relUrl": "/word/2022/08/25/Op-Ed-Rubric.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Python Quiz Script!",
            "content": "Hi! I&#39;m here to show you my Python script. But first for the hacks... I got an image and a link. The link is for my vocab table, and the image is below. . . Ok, enough of that. I&#39;ll show you the code in its full beauty first, and if you need help understanding how any part of it works, I&#39;ll explain as thoroughly as I can. . import getpass, sys #defines question and answer: a prompt variable goes in the parenthesis. It essentially spits out user input. def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) #defines question_with_response: collects the questions from a list with prompt, prints it, collects input, and stores it. def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg #variables for number of questions and number of correct answers questions = 10 correct = 0 #initial prompt print(&#39;Hi &#39; + getpass.getuser()) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) #list of questions and answers. Also converts answer list into iteration so next command works. Question_list = [&quot;Is your answer input or output?&quot;, &quot;What command is used to include other functions that are developed?&quot;, &quot;What is the collection of these functions called?&quot;, &quot;What command was used to make the function that gave you this question?&quot;, &quot;what is Answer_list in iter(Answer_list)?&quot;, &quot;What command in this example is used to evaluate a response?&quot;,&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;, &quot;What type of text is the variable called &#39;correct&#39; in this script?&quot;, &quot;What is it called to print a string (as output) to terminal?&quot;, &quot;What is a group of commands defined under a name?&quot;] Answer_list = [&quot;input&quot;, &quot;import&quot;, &quot;library&quot;, &quot;def&quot;, &quot;parameter&quot;, &quot;if&quot;, &quot;expression&quot;, &quot;dynamic text&quot;, &quot;string concatenation&quot;, &quot;function&quot;] Answer_iter = iter(Answer_list) #cycles through this set of command for each set of question and answer. Also accepts correct answers and rejects bad answers. for i in Question_list: rsp = question_with_response(str(i)) if rsp == str(next(Answer_iter)): print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) #Calculates percent correct answers. percent = (correct/questions) * 100 #Prints accuracy of answers to terminal print(&quot;You scored &quot; + str(percent) + &#39;%!&#39;) . Hi leonardw48247 You will be asked 10 questions. Question: Are you ready to take a test? Answer: Question: Is your answer input or output? input is correct! Question: What command is used to include other functions that are developed? import is correct! Question: What is the collection of these functions called? library is correct! Question: What command was used to make the function that gave you this question? def is correct! Question: what is Answer_list in iter(Answer_list)? parameter is correct! Question: What command in this example is used to evaluate a response? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! Question: What type of text is the variable called &#39;correct&#39; in this script? expression is incorrect! Question: What is it called to print a string (as output) to terminal? string concatenation is correct! Question: What is a group of commands defined under a name? function is correct! You scored 90.0%! . Explanation Portion . Alright... where to start... oh, the import commands would be a good start! . import getpass, sys . This imports the functions getpass and sys into the script, making them executable. Where did those functions come from? They came from the libraries, which is essentially a collection of functions that comes with your python installation. Pretty neat!. Next, we got our own function. . def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) . On the first line, we got the def command, which defines our function. The function&#39;s name is question_and_answer (fairly intuitive since it asks you a question and requests for an answer), and there is a prompt in the parenthesis. This prompt is a variable, and whenever this function is called (this should look like question_and_answer(&quot;insert text here&quot;)), the variable prompt is set to whatever is within the parenthesis. The colon is there for syntax purposes and should be kept. | On the second line, the print() command is used. Within the parenthesis is &quot;Question: &quot; to ensure that a question prompt is printed when the file is executed, along with + prompt. The + concatenates/prints whatever text/string is stored in the prompt variable. The output to the terminal is Question: (prompt text here) | On the third line, a variable named msg is set equal to the result of the command input(). As the name implies, the function will collect user input and set it equal to a variable. This also means the script will pause when user input is being collected. | On the fourth line, the print() command is used again, this time with the string Answer: to proceed the text of the variable msg, which was set equal to the input on the third line. | . So to sum it up, this function collects an input string from a user and re-prints it to the terminal. Let&#39;s move on to the other function. . def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg . If you paid attention, the first three lines of this function question_with_response were very similar to the first three lines of the question_with_answer function. The last line is what we want to look at. The return command ends the execution of the function and sends the contents of msg to the main script in execution. The contents of msg can therefore be used outside the function. . questions = 10 correct = 0 . These are more variables. The variable questions lets Python know how many questions there are, because knowledge of how many questions there are is necessary for score calculation. correct, the number of correct answers, is 0 since no questions have been answered yet. . print(&#39;Hi &#39; + getpass.getuser()) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) . The first line prints to the prompt, and this is the first line of code executed. getpass.getuser() is linked to that function we imported at the beginning, and it essentially is a placeholder for the username of the person running the script. Might as well say hi and call the test-taker by his/her name! | The second line prints about being asked questions. str(questions) must be used to print the number of questions since questions is set equal to a number (it must be set equal to a string to print, and the str() command converts it into such). | The third line is our question_and_answer function from before! If you remember what it does, it prints out the prompt in the parenthesis, collects a user input, and prints that input into the prompt. | . Now for the next bit of code! . Question_list = [&quot;Is your answer input or output?&quot;, &quot;What command is used to include other functions that are developed?&quot;, &quot;What is the collection of these functions called?&quot;, &quot;What command was used to make the function that gave you this question?&quot;, &quot;what is Answer_list in iter(Answer_list)?&quot;, &quot;What command in this example is used to evaluate a response?&quot;,&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;, &quot;What type of text is the variable called &#39;correct&#39; in this script?&quot;, &quot;What is it called to print a string (as output) to terminal?&quot;, &quot;What is a group of commands defined under a name?&quot;] Answer_list = [&quot;input&quot;, &quot;import&quot;, &quot;library&quot;, &quot;def&quot;, &quot;parameter&quot;, &quot;if&quot;, &quot;expression&quot;, &quot;dynamic text&quot;, &quot;string concatenation&quot;, &quot;function&quot;] Answer_iter = iter(Answer_list) . The first two lines are relatively self-explanatory (though lengthy). I made a list called Question_list that has a list of all the questions of the quiz, and Answer_list has all the answers. The first items on the lists will be the ones to appear on the quiz first, but more on that later. The third line is less self-explanatory. I essentially converted my answer list into an iteration. Why would I do that? Well really it&#39;s because there&#39;s a command in the next bit of code that doesn&#39;t work if I don&#39;t convert the list into an iteration. That&#39;s just the way it is. Now it&#39;s time for the exciting part. . for i in Question_list: rsp = question_with_response(str(i)) if rsp == str(next(Answer_iter)): print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) . I know this is a lot to take in. Bear with me for a little while. . The first line is a for loop. The i is a variable used to count how many items are in the related list, Question_list, and how many times the commands within the for loop are executed. You could use any variable, though i is the most common (probably since the word &quot;iteration&quot; starts with an i, though I could be wrong). All commands connected to the for loop (which is this entire chunk of code) is executed once for every question in Question_List. Why would I want to do that? Let&#39;s move to Line 2. | In the second line, we set a rsp variable. We call the question_with_response function, which if you remember prints a question prompt and collects input, sending it to the main script. This input will be set equal to the rsp variable. Notice what is inside the function&#39;s parenthesis: str(i). Remember i is the variable from the for loop which is going over each question in Question_list. So every time this is executed, the prompt will be the next question in the list. | In the third line, there is an if statement. If the condition of the if statement is satisfied, any connected code is executed. In this case, the condition is that the input variable rsp is equal to... let&#39;s deconstruct that code. str(), as mentioned before, turns a number/value into a string. In my tests, the printing of the answer was being picky, so I used this command even though there&#39;s no numbers involved. | next(Answer_iter) is the way that the next answer on the list will be used every time the command is executed. next() moves on to the next item in the iteration whenever executed. For some reason, next() doesn&#39;t accept lists, which is why we made Answer_iter. | . | So back to what I was saying... the condition is that the input variable rsp be equivalent to the correct answer of the question in the prompt. If this condition is satisfied, appropriate code is executed for a correct answer: | In line 4, we print their input (still stored in rsp) and also that it&#39;s correct. | In line 5, we increase the correct variable by one since a correct answer was given. | Line 6 is else. If the condition of the if statement is not fulfilled, any code connected to the else statement is executed instead. That would mean getting a question wrong. | So line 7 prints that the input was incorrect. | . These 7 lines execute 10 times for the 10 questions. Doing this makes the code more concise than typing out the same commands 10 times in a script. Now, the rest of the script should be a breeze. . percent = (correct/questions) * 100 . This line, as implies, calculates the percentage of questions correctly answered. It takes the number of questions correctly answered and divides by total number of questions (these are all variables by the way, which are set equal to values/numbers), then multiplies by 100. This number is set equal to the percent variable. . print(&quot;You scored &quot; + str(percent) + &#39;%!&#39;) . This line prints the percent score. Keep in mind that since the variable percent has a numeric value that the str() command must be used to convert it to a string. . That&#39;s the end of the script! I hope you had a good time learning about how this works, and I hope you will use some of these techniques in your future work. .",
            "url": "https://leonard514.github.io/FastPage/scripts/python_quiz",
            "relUrl": "/scripts/python_quiz",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Week 0 Review Ticket",
            "content": "Hi! . This is a submission for the Tools/Equipment hack. If you want to see index.html, you might as well check out home. . Anyways, better start showing you my stuff. My main github is here. You were probably interested in seeing the insights page as well, so I’ll stick it in here. . Oh yeah, you also wanted to see me using VSCode, which is how I’m writing this page. . VSCODE . . Notebook . And then there’s my Jupyter notebook, which is found at this link. Yeah, I know it has the default title. Going to have to ask around to figure out how that stuff works. . Anyways that’s all the submission-related stuff, but I think it’s also a good idea to keep a journal… of what I’ve done, and what I have left to do. . Here is a table of my progress. . Date Activities completed . August 17 | Class started. Installed VSCode and the windows version of a bunch of programs (oops) | . August 18 | Installed Windows Subsystem Linux. Installed python, jupyter, anaconda, and a lot of other software the way I was supposed to do it. | . August 19 | Fastpages development begins. Created the repository and did basic edits | . August 21 (night) | Fastpages development continues with this post, index.html, and about me. Make the Jupyter notebook. Used VSCode with my fastpages development (including this page) | . Remaining tasks: . Refine the Jupyter Notebook (having a title, markdown integration) | Image integration working fine, although I need a way to control resolution (since some images are massive) | .",
            "url": "https://leonard514.github.io/FastPage/submissions/Week_0_Submission",
            "relUrl": "/submissions/Week_0_Submission",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "A Print Test Script!",
            "content": "print(&quot;Hello World!&quot;) print(&quot;But that&#39;s boring. Let&#39;s try something different&quot;) print(&quot;Supercalifragilisticexpialidocious!!!&quot;) print(&quot;Pneumonoultramicroscopicsilicovolcanoconiosis!!!&quot;) print(&quot;Now that&#39;s better.&quot;) . Hello World! But that&#39;s boring. Let&#39;s try something different Supercalifragilisticexpialidocious!!! Pneumonoultramicroscopicsilicovolcanoconiosis!!! Now that&#39;s better. .",
            "url": "https://leonard514.github.io/FastPage/scripts/print_test",
            "relUrl": "/scripts/print_test",
            "date": " • Aug 22, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Notes",
          "content": "Week 1 Focus and Habits Hack . Video Notes (includes 10 insights) . Origins . She sent a survey about what students thought about Yale culture; students are stressed about being in Yale and can’t enjoy pleasures or take advantage of opportunities | 40% of college students have greater than average stress, a third have severe depression, more than 40% have lack of hope, etc. | Santos therefore wanted to help using her knowledge in psychology (including positive psychology, where happy people are studied, and behavior change, to figure out how to change habits)… and made a course about it (Psychology and the good life) | 2 parts: positive psychology and the practice of the good life. To build this practice, rewiring habits became part of the syllabus (including gratitude, social connection, sleep, etc.) | No changes to syllabus upon submission, became popular | . Class Content: 10 insights . Happiness is controllable and can be improved (some is controlled by heritability, but not all) | Location of residence, salary, and other life circumstances matter less than we think (positive and negative events have a temporary impact on happiness). Therefore, removing the “bad stuff” isn’t the way to maximize happiness. | It is challenging (but possible) to become happier. This requires building daily habits that happy people have. The agile methodology, like the “Good Life” course, requires that habits be built. These habits will include having a daily standup meeting for planning and task delegation, maintaining issues for short-term tasks and the scrum board for organizing those tasks. This ensures that tasks are completed at a consistent pace in accordance with the agile methodology (Principle 8). GI Joe Fallacy: A cartoon claimed knowing a concept/skill is half the work, and that is false. The skill must also be put into practice, and that’s the majority of the work. | . | Intuitions about happiness can be inaccurate. The mind forecasts about what makes us happy (ex: salary, possessions), but increases in these things do not correlate with significant increases in happiness. | Happy people make time for social connections (spend more time with others). The agile framework would require working and with other people on computer projects. Communication in the agile framework requires in-person, face-to-face conversation (principle 6). This teamwork makes potential for social connections between effective group members, and this in turn may enhance happiness. | Helping others helps us (more than we expect) by making us happy. Helping others is integrated into the agile framework as when a student is having trouble with code, other group members can work with that student and teach how to fix the issue (this is also part of leadership skills) to help the group move along (Principle 4). This willingness to share help will ultimately lead to a better project and help with learning programming… along with the happiness along the way that comes with being helpful. | Make time for gratitude… daily. Happy people think/talk about the better people (rather than the annoying people). Writing down a list of good events daily increases happiness. It is also good to write a letter of gratitude and read it in-person to the person you are thanking. This reading of the letter connects the most with Agile Principle 6 (face-to-face conversation is the most effective mode of communication) | Healthy practice matter more than we think (exercise, sleep, etc.) Workouts has been shown to boost happiness for the day, while sleep deprivation significantly decreased happiness, some to depression levels. | Mindfulness (be in the present). Mindfulness is being aware of present sensory input (ex: how your feet feel when you stand, the room temperature, any sounds perceived, the color of your dish, etc.). More time spend in mindfulness is correlated with greater happiness, even compared to thinking about pleasant but non-present things. | Become wealthy… in terms of time. Time famine is being too busy… and time affluence is the opposite. People maximizing time affluence are happier. | Gratitude Note Experience . Letter to someone on campus . I wrote my letter to my teacher, Mr. Yeung. I was having a problem working with a group member, as I was helping him along every step of the way through setup. This left me with no time to do my own work in class. So I emailed him about the issue, and he told me to tell my partner three things: . Consult the blog/guide and read through the steps | If confused, ask me for help. Ask after 5 minutes of attempts to resolve the issue. | If I was too busy or didn’t know how to help, ask Mr. Yeung for help. | This allowed me to spend time during class working on my computer projects, and it also helped my partner gain some degree of independence during the learning process. I especially saw value in having group members consult a guide. This was very reassuring for me, especially since I tend to have anxiety during the early parts of a class (due to familiarization with class format and the like). So to thank him, I wrote him my letter. I already gave the letter to him at the time of writing, so I can’t copy the contents… but I can paraphrase from memory . In the letter, I thanked him for replying to the email, and told him all the good things that stemmed from this reply: having more time to work on the project, my partner being able to learn with a degree of independence (that is, not fully relying on my help), an understanding that I can refer confused group members to guides so I can continue to help in other ways, and a boost in my collaboration skills which will be important for college and the workforce. I also admitted that working in groups has been a challenge for me, and afterwards thanked him for helping me address it. . When I finished reading the letter to him, he told me he was glad to help with my issue. As far as I remember, the happiness I experienced was not a rush… but more deep inside, like a calm. This could have been my anxiety/stress dissipating. . During the next class, I thought of an application of his advice in a context outside of school. I know that the practice in groups I will get in this class will be invaluable in the future. . Letter to someone at home . I wrote my letter to my mother. I thanked her for helping me with an extracurricular activity last week, and I thanked her for helping me write an email about a concern with work in this class. She proceeded to give me all the credit for writing the email. I also thanked her for giving me good food and transporting me to school and other activities so that I can work with a clear mind, work in groups, and ask students and teachers for help with my work. I also thanked her for lending me her phone to ask my sister for help in AP Calculus BC, a tough course. I finally thanked her for her support in my efforts, especially any support that I haven’t given enough attention to. . My mother smiled and hugged me, and she asked why I was thanking her. When she asked if it was due to her help with improving my anxiety about this class (and other things), I nodded. . I felt it was nice that I made her happy by giving attention to everything she does to support me. Perhaps I can do this with other people as well. . NEW: Personal Goals (these are long-term) . Quit using grades as a measure of success, find some way to stop discrediting my own efforts | Get decent amounts of sleep while being able to do all my schoolwork | Be more open to talking with trusted individuals when seized with a major panic attack | Learn how to better work in groups | Remove the assumption that I can only trust myself to take responsibility | . Gratitude List . I thank my mother for patiently helping me improve for the past 17.75 years and helping me through all of my problems | I thank Mr. Yeung for helping me with advice in working with groups in this class | . Week 1 Python Vocab . Term Definition . Variable | An abstraction in a program that can hold one value/string at a time | . Command | A procedure executed by a computer/program | . Static text | Text within a program which does not change | . Dynamic text | Text within a program that does change, often due to inputs/outputs of various commands. Can be different depending on how a program is executed | . Output | The resulting text/values after a command is executed. This can be printed to a terminal using the print() command | . Input | A user answers a prompt with a string or other value. This is then often stored in a variable to be re-used later. | . Sequence of Code | Any code in which two or more lines are involved (ie, any code more complex than a single command) | . String | A sequence of characters/words, often enclosed in quotation marks | . Parameter | A variable which serves as input for a command/program | . function | Similar to a variable, but for commands. A function is defined with the def command (or other defining command), and afterwards the name of the function. The commands after the function name are then associated with the function throughout the entire script | . Procedural abstraction | Grouping a series of repeatedly-used commands | . library | a collection of code/functions that a program uses to optimize code execution. The program can refer to many parts of the library using importation commands to call certain functions/commands. | . String concatenation | When a string is printed to the terminal | . Python commands . Command Result . print(TEXT) | prints TEXT to the terminal | . def definition_name(commands here) | defines a function, which is a group of commands defined under a name | . definition_name(commands here) | execution of the function | . var_name = (input) | defines a variable based on input or as a predetermined value/string | . import | imports functions from a running environment | . if | if a specified condition is satisfied, the associated command(s) are run | . else | if the if condition is not satisfied, the command(s) associated with this are run instead | . list_name = [item1, item2, item3…] | Makes a list. Very useful if you are executing the same commands over and over and just want to modify an input. | . for | Does two things: cycles through a list, and executes a set of commands once for every item in that list. Each item in the list will be set equal to a variable (most commonly i) for input. | . iteration_name = iter(list_name) | Takes a list and turns it into an iteration (defining it as a variable). Required to run next. | . next(iteration) | Cycles to the next item in an iteration when executed… without re-executing any commands. | . Week 2 Python Terms Notes . Term Definition . Type | A form/variant of variable, being either a string (Ex: var = “john walked”), integer (ex: int = 18), float (ex: num = 100.0, notice the decimal), list (ex: cars = [SUV, sports car, sedan], notice square brackets), or a dictionary (includes curly brackets and several variables) | . Key | Another word for variable | . index | essentially the function of the common i variable in a for loop (cycles through entries in a list) | . Procedural Abstraction | Multiple HTML fragments &lt;html&gt;&lt;/html&gt; used, which are put together into a website | . Week 2 HTML Notes . Importing a Theme . Pictures say a thousand words. Therefore, I’ve integrated pictures to explain what’s going on with my site. . I attempted to integrate the midnight theme into my fastpages (at _config.yml). It looks like this: . . Upon uploading the modified _config.yml theme to my FastPage repository, I found out that there was no changes occurring. It was only some time later that I found that the CI task was consistently failing due to syntax errors in my _config.yml file. . . Every CI task was failing when I did the commit. The syntax error in _config.yml effectively made it impossible to update my website. It was then that I was told that I was not supposed to put midnight, but rather pages-themes/midnight@v0.2.0 in the remote theme configuration of _config.yml. Upon adding the fix, the CI tasks worked again. . . This fix was a success. The midnight theme was applied. I have some before/after images. . . . There is a very noteworthy change that comes with implementation of the midnight theme: the top bar of the website is removed. This top bar includes my most crucial pages (the search page, the tags page, this page, and my about me). Removal of easy access to the tags page is a special concern, since this serves as the backbone of organization for my website. As a result, the theme change is temporary. . Modifying dark mode . This one was interesting. I imported all the sample code, then had to modify it. The default code made the background of the website all-black, but something just wasn’t right. The top bar had the same color as the rest of the page. Therefore, I had two goals: . Make the color of the top bar different from the body | Define a second color to use. | Now of course the file in question was /sass/minima/dark-mode.scss. Now of course I had to define the second color first. I thought navy blue would fit, so I made a new color named navy-blue. Now the nice thing is that if you mouse-over the square of the color, a color picker opens up. That made changing the color very easy. . . Then I had to figure out how to make the top bar a different color. Since I wanted navy-blue to be my main color, I replaced all instances in the code where the background was dark-grey (the default color) with navy-blue. . . The last thing I had to do was figure out which parts of the page constituted the top bar. A little use of inspect element on my own page helped a lot. . . Using this, I found out that the site-header and site-nav parts of the site were in the top bar. So I set their background color to dark-grey. . . Tables in Liquid . I will not lie to you. This portion of the HTML hacks… with little sample code… was extremely difficult for me. It took me around 6 hours, searching through many websites… many reuploads of the page in question (which was index.html)… but onto the code… . . Now, what’s going on here? This is meant for the table on my front page index.html. . The first few lines are a bunch of HTML tags. The funny thing is, every time you make a tag (ex: &lt;table&gt;), you have to close it later (&lt;/table&gt;). So you got &lt;table&gt;, &lt;tr&gt; (which probably stands for “table row”), and &lt;th&gt; (likely “table heading,” appropriately named since the first row is bolded and has its own background color). Then we close everything. . This is where the liquid starts. It took forever for me to get this right… mostly because I tried many things. But so you don’t have to go through all that, I’ll just explain what’s in front of you. . In liquid, your commands must go in percents and curly braces. That’s how it was made. Now the reason why I’m not going to actually type out any percents and curly braces is because the website will immediately think I’m running actual code and return errors when I take my liberties. This would effectively make it impossible to update this page… so whenever you see a command assume they are in curly braces and percents. . assign = var_name makes a variable. But then you see assign Trimester = &quot;1; 1; 1&quot; | split: &#39;;&#39; Liquid has this funny thing about arrays, so in order to make one you have to put the whole thing in quotes, with each entry separated by a certain character… then you have to pipe it to a split command to tell liquid what character separates each entry (in this case, it was semicolon). I defined the other lists in a similar manner.. . Next is the for loop, which as a reminder executes all associated commands for each iteration. In this case, we get for i in (0..2). Conceptually, it’s not much different than the python for loops. It cycles through three values (0, 1, and 2), and executes the commands for each. It’s mostly the syntax that was a bother. You have to put the numbers in parenthesis, otherwise it just doesn’t work. You also separate the numbers with two periods. . We’ll then take a look at one of the associated commands. . &lt;tr&gt; &lt;td&gt;&lt;/td&gt; . This simply says that for each iteration (or cycle, the word I’ve used in my other posts so far), the item in the array associated with the value of the index variable will be used. Remember, the first item is associated with 0, the second item with 1, etc… in the Trimester list, the items are all 1. The other commands are similar to this one, except for the Week and Description lists instead. . Unlike python, we have to tell liquid where the for loop is going to end. Because apparently the tabbing scheme doesn’t cut it. That’s what endfor is for. . I guess there’s one last thing… I need to tell you where I got all this info from. . Assigning a variable (includes split command) | For loop syntax | . Yes, the second one is someone else’s submission. I personally think looking at someone else’s code is a bit of a grey area in terms of academic honesty, and straight up copying it is prohibited. But then again the syntax is a bit rigid, so there’s not an easy way to make code without the syntax matching up. So to make myself feel a bit better about using someone’s submission as a reference, you can see there are a few differences (this student referenced some variables placed in _config.yml… which I don’t see as a suitable place to store variables, so I placed them in the related code instead). Gotta give credit where credit is due. Because honestly, this is all the example code I got. Mr. Yeung told me the more important part of the class is understanding how the code works, so if you think the explanation above was fair, then I guess I might be doing this right. . Week 4 Collaboration Notes . Video 1: Why collaborate? . Facebook . Facebook Visit: a coworker’s son got the instructor in, and there are many meeting rooms and space to get together and collaborate. . Facebook owns social media entities, which requires collaboration . Main Point: Collaboration –&gt; computing innovation reflecting diversity of talents of designers . Includes program; can be physical (self-driving car), non-physical (computer programs) or concept | . Video Games . Super Mario Brothers (2 and 3) . SMB2 was a reskin of SMB. . Kensuke Tanabe made a vertical game with a collaborative element to the level design. Shigeru Miyamoto wanted horizontal game. They had a conflict. . SMB 2 had differing versions, which was either vertical or horizontal (but not both simultaneously) . | SMB 3 had both vertical and horizontal designs . | . Main point: Collaboration with diverse perspectives avoids bias . Practice . What are the benefits of collaborating with peers? . Answer: Effective collaboration produces computing innovations reflecting diversity of talents/perspectives of the designers . Key takeaways . Collaboration skills . Communication | Building a consensus | Negotiating | Resolving Conflicts | . Video 2: How to collaborate . Pair Programming . One (the driver) writes the program, the other (the observer) reviews each line of code as it’s typed | The observer is not a back-seat programmer who complains over every minor error of the driver. The observer just provides a different perspective | It is recommended for people to switch roles | . Think-Pair-Share . Student attempts problem individually | Student shares ideas with a partner | Students share results with class (or with a larger group) | Analogy: Play charades . Interpreting other player’s communications can be difficult, it may eventually make sense | Working independently is similar to playing charades | . Leaving Comments in the Code . Allows to communicate to other people what the code does | Makes sure you don’t forget what your code does | Allows to cite code segments from other sources | Cite media (audio/video) used from other sources | Mark which partner did what code | Clarify how the code works | If comments are not possible in the programming language, use a PDF or word editor . Tools for Collaboration . repl.it (multiplayer) | GitHub (repositories) | Shared documents/folders (Google Drive, media, etc.) | Asking friends/family/teachers to test programs, get feedback | . DISCLAIMER: Only collaborate with a partner for the Create Performance Task (not anyone else) . Key Takeaways . Consulting with other people is important for diverse perspectives . Prevents self-absorption into programming from getting in the way of seeing issues with programs | . Use online tools .",
          "url": "https://leonard514.github.io/FastPage/_pages/02_notes.html",
          "relUrl": "/_pages/02_notes.html",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "About Me",
          "content": "Hi! I’m Leonard Wright, and I am a student at Del Norte High School. This website is currently being maintained for AP Computer Science Principles. I do have some experience securing computers, and I guess this class will be more about learning to code code code!!! I hear we’ll be working in groups a lot in this class. I hope I can also learn about working with others in this class (I had a hard time with this in 11th grade, though recently I’ve learned a few things so hopefully things get better). I’ll need collaboration skills in college and the workforce anyways, so best to start practicing now. . Anyways other than that I guess I can mention I’m in Ms. Lanzi’s BC class (wish me luck). She does a good job with integrating group work into the course structure. That’s a plus since I could learn collaboration skills in that class as well as here. . I don’t know what else to say, I guess I’ll add more stuff here later .",
          "url": "https://leonard514.github.io/FastPage/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://leonard514.github.io/FastPage/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}