{
  
    
        "post0": {
            "title": "Week 1 Review Ticket",
            "content": "Hi! . This is part of the Week 1 Review Ticket. If you came here, I hope you came here from the github issue. If not, please take a look right here. That being said, if you missed where the python, bash, and personal development submission parts are, they are in this list! . Python! | Bash! | Personal Development! | . Anyways, if you came from the github issue, you are probably here for the fastpages/web development part of the submission. That part of the submission is too complex to just stick a single link in the title without a dedicated post, so here’s to the changes! . Changes!!! . If you go back to the homepage, you may notice that the majority of the posts have vanished (with the exception of some word files and the weekly review tickets). This is intentional. The posts column would be far too messy if every markdown page and every jupyter notebook file I uploaded to the site landed in the column. The way I did this was to add the hide: true option to the front matter of all of my notebooks and markdown files (with the exception of the review tickets). I also added that to word_front_matter.txt in the action files, but unfortunately it doesn’t want to cooperate with me. So there are word files in the posts column. Sorry about that. . But how will I find all of your posts and notebooks? Well, for that you can refer to the search page if you want to look up a specific phrase, or go to the tags page! The tags page will provide a much better framework for organizing all of my notebook files and markdown files. And of course if you really need to go back and view a file I used for submission, go to my issues page! I won’t close any issues until the year ends. . However, I still have to add what I did. If you looked at my python and bash hacks, those serve as the .ipynb jupyter notebook files I added to the site. I also have a very comprehensive notes page in the taskbar (notice it’s between the tags and about me pages). In addition, I added two markdown posts for my Calc BC Class. One has multiple images of some fundamental concepts, while the other is a guide for showing work (since there are a lot of nuances in that class). As for my word files, those come from my English class. There are: . Directions to writing an Op-Ed | An Op-Ed Rubric | . How come I didn’t put that many files here? Because I’m smart enough to realize that if I put any turned-in assignments here that there’s the risk of someone copying my work… and what happens afterwards is nasty. . Now, here’s a table of my daily progress . Date Activities completed . August 22 | Review Ticket shown | . August 23 | Sent email to Mr. Yeung about concerns in working in groups (a partner was taking up my time with needing help getting set up). He gave me some very helpful tips. During class, I also learned to open jupyter notebooks in a web browser. Took notes on the “good life” video very late in the night. | . August 24 | Started the python script at this point. Was a little confused. | . August 25 | Started the bash script. I was confused. Finished the python vocabulary notes and made my first for loop in the python quiz! Uploaded files for other courses into fastpages. | . August 26 | Removed an if statement in the tags page which excluded pages with the hide: true front matter (this was to organize my fast page). Uploaded files for other courses into fastpages. | . August 28 | Finished bash script test. Added comment functionality to the majority of my files. Dealt with issues in image integration of notebooks and word file issues (ongoing) | . Remaining tasks . Tags in word files (I do have the categories in the word front matter file, but it’s not working for some reason.) | .",
            "url": "https://leonard514.github.io/FastPage/submissions/Week_1_Submission",
            "relUrl": "/submissions/Week_1_Submission",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "BC Procedures",
            "content": "Gotta Knows . (Know them.)[https://leonard514.github.io/FastPage/classes/BC/gotta_know] . Writing your work: Arrows . When showing work, minimize arrows. Instead attempt to stick to a up to down model, then left to right. . Using methods taught in class . When solving a problem, you are only allowed to use methods taught in class. This is likely to avoid any misconceptions about those methods not covered yet, although this does turn many of the problems into a game of whether the concept is prohibited since it wasn’t covered or if it should be used since it’s being introduced. . Writing the domain . Write the domain in interval notation. So instead of using -1 &lt; x &lt; 1, use (-1,1). Do this even if a single value is excluded from the domain. For example, if x=1 is excluded from the domain, write as (-∞,1)u(1,∞). Also, you have to use the u. Writing (-∞,1),(1,∞) is incorrect notation… since that’s the way it was written. . Limits and grouping symbols . If there is addition/subtraction going on in the rule of the limit which is not modified by multiplication/division, there must be grouping symbols (parenthesis) around the entire rule. This is to ensure clarity of what function is taken to the limit. Outside of this, grouping symbols are optional. . Limits and known rules . If the rule of a limit is known, it should be written out in full form (ex: x+1) rather than in f(x) form. f(x) form is usually only OK when given a graph of that function. . One-sided limits . One sided limits should always have the +/- superscripts of whatever value x is approaching. . Direct Substitution fails due to division by zero: not indeterminate . If a direct substitution fails due to division by zero, and the numerator is not zero, do not skip ahead to Does not Exist (infinity or negative infinity). You must first take the left and right limits, and if the infinities have the opposite signs (like in 1/x), then the Does not Exist reasoning is actually that the left limit is not equal to the right limit. . Direct Substitution: infinity . If there is a limit as x approaches infinity, do not directly substitute infinity like it is a variable or a number, because it is neither of those. . Piecewise Functions: Conventions . When listing a piecewise function, the piece with the least domain is listed first, and the piece with the greatest domain last. As for the domains, there will always be a greater than/equal to, and never a less than/equal to. That is, the lower bound of the domain (if not negative infinity) is included, and the upper bound is excluded. Also, when stating the domain, x always has to be listed first if it is strictly less than a value or strictly greater than a value (ex: x &lt; 4, NOT 4 &gt; x). This is likely in place to establish consistency in defining piecewise functions. . Squeeze Theorem: Sign of appended functions . When using the squeeze theorem on a limit, any appended functions/actions (like x+1, or taking the reciprocal of all terms) must have their signs checked for the x being approached. . If the sign is negative, the inequality signs must be flipped in the first step, and in the second step the terms must be re-ordered from least to greatest. | Taking the reciprocal of all terms flips the inequality signs since the least term becomes the greatest (since it has the least denominator) and the greatest term becomes the least (with the greatest denominator). | If the sign of an appended function is zero, there must be two squeeze theorem sequences performed for approaching x from the left and right sides to account for the two sides of a limit (and the effect of signs on the inequality signs). | . Using a creative one . When there is two of the same term on the denominator, there is a creative one. The term functions as a 1 within the function and has a singular effect: creating a removeable discontinuity (hole) where x causes a 0/0. There is no “canceling” of terms since the terms still play a role. When the terms become one, write ones on them. . Using a unique creative one as part of a limit to infinity/negative infinity . When taking a limit to infinity/negative infinity and an indeterminate result is yielded(infinity over infinity… and the like), it is possible to multiply the entire rule by a unique creative one. Typically, this will involve multiplying both sides of the fraction by something like (1/x^2). There are special parameters, however. The denominator must not equal zero, and its limit must also exist. This essentially means in general cases, we multiply by (1/x^a), where a is the greatest power an x in the denominator is raised to. Occasionally, both sides of the fraction will be multiplied by (1/sqrt(x^2)) or some other root of a polynomial. This can happen if one side of the fraction is under a root (and the other isn’t). In this case, the side under the root can have x^2 divided as normal, but the other side of the fraction must take into account that sqrt(x^2) is the absolute value of x, which is a piecewise function. Any roots which start out being even roots but having odd powers at the end will deal with absolute value. The sign of that part of the creative one then depends on what x is approaching (can be positive/negative depending on which piece’s domain the value x is approaching falls on). . Now, what I haven’t seen yet is the x approaching the value of the piecewise function where x=0. It is very difficult to guess how I would be expected to react to this. It is likely I will be asked to go with the piece where the non-opposite function in the absolute value is so that I can follow conventions. . Limit of a composite function . There are times when you are asked to take the limit of f(g(x)) as x approaches c. There are two approaches you can take for this limit . Limit inside composite function: to use this strategy, you must first verify that g(x) is continuous at x=c, and that f(x) is continuous at x=g(c). If this works, then f(g(x)) is continuous and lim(f(g(x))) = f(lim(g(x))). If this is not the case, you must use a different method. The use of this different method is likely to prevent writing infinity/negative infinity as a number/variable, and/or to circumvent complications if there is a hole or if the function’s output at a certain point is not equal to the limit (in which case f may be undefined or output the wrong value, since this is a limit we’re taking (not where the function f is defined)) | Input-output method: this accounts for the fact that as the definition of a composite function f(g(x)), x serves as the input to g(x), and the output serves as the input to f(x), which then gives the final input. To do this, show a separate step where the limit of the inside function is taken (as x approaches c, g(x) approaches [value]). Then, take the limit as the inside function approaches the limit you calculated, and write out f(g(x)) as usual. That inside function is your input to f. Then, get your solution. | Definition of differentiability . Differentiability is not the same thing as continuity. Differentiability is defined as when the limit that serves as the definition of the derivative exists. Nothing more. .",
            "url": "https://leonard514.github.io/FastPage/classes/BC/procedures",
            "relUrl": "/classes/BC/procedures",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "BC Gotta Knows!",
            "content": "Special Trig Limits + Squeeze Theorem . . Continuity Definition . . Continuity Properties + Composite Continuity . . Differentiability Definition . .",
            "url": "https://leonard514.github.io/FastPage/classes/BC/gotta_know",
            "relUrl": "/classes/BC/gotta_know",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Bash Test Script!",
            "content": "Hi! Welcome to my first bash notebook. There will be two scripts featured here: An installation verification script and a github updating script. Below is the installation verification script. . Check Installation Script . # The bullet of updating a repository is addressed in the next script below #uses basic version commands echo Basic Python Installation Check python --version python2 --version echo &quot;&quot; echo &quot;&quot; #uses basic version commands echo Basic Conda Installation Check conda --version echo &quot;&quot; echo &quot;&quot; #uses basic version commands echo Basic Jupyter Installation check jupyter --version echo &quot;&quot; echo &quot;&quot; echo Basic Checks Complete echo &quot;&quot; #sets up variables to check conda installation. echo Check Conda Installation using Conda conda=&quot;conda&quot; checkconda=$(conda list | grep $conda) nconda=$(echo &quot;$checkconda&quot; | wc -l ) #checks if conda is there or if the grep command had output if [[ $nconda &gt; 0 ]]; then echo &quot;$conda found!&quot; echo &quot;&quot; echo &quot;&quot; echo &quot;$checkconda&quot; # If there&#39;s no conda... installs conda and exits the script so the base prompt appears. else echo &quot;$conda not found. Installing so the script doesn&#39;t break!&quot; echo &quot;&quot; echo &quot;&quot; cd /tmp wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh chmod +x Anaconda3-2022.05-Linux-x86_64.sh echo &quot;Make sure that you reply yes to the final prompt about the conda (the default is no).&quot; echo &quot;After this, the script will exit and you must reload Windows Subsystem Linux to make sure the base prompt is present.&quot; echo &quot;Then, run this script again.&quot; ./Anaconda3-2022.05-Linux-x86_64.sh exit fi echo &quot;&quot; echo &quot;&quot; #sets up variables to check jupyter installation with conda echo Check Jupyter Installation using Conda jupyter=&quot;jupyter&quot; checkjupyter=$(conda list | grep $jupyter) njupyter=$(echo &quot;$checkjupyter&quot; | wc -l ) #checks if jupyter is present if [[ $njupyter &gt; 0 ]]; then echo &quot;$jupyter found!&quot; echo &quot;&quot; echo &quot;&quot; echo &quot;$checkjupyter&quot; # jupyter not present, installs jupyter else echo &quot;$jupyter not found, installing&quot; echo &quot;&quot; echo &quot;&quot; conda install jupyter fi echo &quot;&quot; echo &quot;&quot; #sets up variables to check python with conda echo Check Python Installation using Conda python=&quot;python&quot; checkpython=$(conda list | grep $python) npython=$(echo &quot;$checkpython&quot; | wc -l) #checks if python is present if [[ $npython &gt; 0 ]]; then echo &quot;$python found!&quot; echo &quot;&quot; echo &quot;&quot; echo &quot;$checkpython&quot; # No python, installs python and related stuff else echo &quot;$python not found, installing!&quot; echo &quot;&quot; echo &quot;&quot; sudo apt install python2 python3 python3-pip pip install bash_kernel python -m bash_kernel.install conda list | grep $python jupyter kernelspec list fi . Basic Python Installation Check Python 3.9.12 Python 2.7.18 Basic Conda Installation Check conda 4.13.0 Basic Jupyter Installation check Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Basic Checks Complete Check Conda Installation using Conda conda found! # packages in environment at /home/leonardw48247/anaconda3: anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 Check Jupyter Installation using Conda jupyter found! jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 Check Python Installation using Conda python found! ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 msgpack-python 1.0.2 py39hff7bd54_1 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 . Github Script . echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section for setting project directory, the folder where the repository will be imported, and importation of repository export project_dir=/mnt/c/project_repository export project=$project_dir/FastPage export project_repo=&quot;https://github.com/Leonard514/FastPage.git&quot; cd ~ # start in home directory # Conditional block to make a project directory... if it doesn&#39;t exist yet if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exist... making directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exist... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; # This is meant to export a local repository to GitHub (online) cd $project . Using conditional statement to create a project directory and project Directory /mnt/c/project_repository does not exist... making directory /mnt/c/project_repository Directory /mnt/c/project_repository exists. Directory /mnt/c/project_repository/FastPage does not exist... cloning https://github.com/Leonard514/FastPage.git Cloning into &#39;FastPage&#39;... remote: Enumerating objects: 1780, done. remote: Counting objects: 100% (1578/1578), done. remote: Compressing objects: 100% (606/606), done. remote: Total 1780 (delta 828), reused 1428 (delta 761), pack-reused 202 Receiving objects: 100% (1780/1780), 14.78 MiB | 13.10 MiB/s, done. Resolving deltas: 100% (858/858), done. Directory /mnt/c/project_repository/FastPage exists. . Slack Check Complete! . And this? Just to let you know I have slack installed. . # test for a kernel installation test=“python3” # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo “$check” else # less than zero echo “$check” fi . Still don&#39;t believe me? Well this should change your mind. .",
            "url": "https://leonard514.github.io/FastPage/scripts/bash_test",
            "relUrl": "/scripts/bash_test",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Writing An Op Ed Piece",
            "content": "Writing an Op-Ed Piece . Requirements: . - 400-800 words, typed, (Copy submitted to teacher must be double-spaced, MLA format) . - Due Tuesday 9/6 at midnight . - You must choose an actual newspaper/journal to submit your piece to. See theopedproject.org for a list of possibilities. Identify the specific publication that you are submitting to on your piece. . - Clearly defined subject matter that engages reader with opening . - Distinct and plausible recommendations for action and change (failure to do this will result in a full grade level dock) . - Acknowledgment of opposing point of view . - Vibrant word choice reflective of personal voice and writer’s ethos. . According to The Wall Street Journal: Your article should be a strong argument about an issue in the news. It should not be a response to a Journal article; that is a letter to the editor. So this means that you should choose something about which you are passionate. . Please visit http://www.theopedproject.org/ for further resources . According to Duke University: . - Track the news and jump at opportunities. . - Make a single point — well. . - Put your main point on top. . - Tell readers why they should care. . - Offer specific recommendations. . - Showing is better than discussing. . - Embrace your personal voice. . - Play up your personal connection to the readers. . - Use short sentences and paragraphs. . - Avoid jargon. . - Use the active voice. . - Avoid tedious rebuttals. . - Acknowledge the other side. . - Make your ending a winner. . - Relax and have fun. . - Don’t worry about the headline. . - Offer graphics. .",
            "url": "https://leonard514.github.io/FastPage/word/2022/08/25/Writing-an-Op-Ed-Piece.html",
            "relUrl": "/word/2022/08/25/Writing-an-Op-Ed-Piece.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Op Ed Rubric",
            "content": "Traits 6 . (A+) . 5 . (A-/B+) . 4 . (B) . 3 . (C) . 2 . (D) . 1 . (F) . . Ideas | Clearly stated insightful claim outlining argument with well chosen quotes from reputable sources. . Demonstrates a thorough critical understanding of the issue. Explores the topic thoughtfully, acknowledges opposing points of view, and makes excellent use of the rhetorical strategies discussed in class. . | Clear argument statement and necessary supporting quotations that are cited correctly. . Demonstrates critical understanding of the issue. Explores issues well, acknowledges opposing points of view and makes strong use of rhetorical strategies discussed in class. . | Clear claim statement but it may lack depth. May not always include best quotations or may use obvious quotations. Demonstrates clear understanding of the issue. Explores the issues of this topic, may have implicit acknowledgment of opposing points of view, and successfully uses rhetorical strategies discussed in class. | Claim statement is too broad. Quotations are minimal or poorly chosen. Demonstrates some understanding of the issue. Explores some issues, implicit or missing acknowledgment of opposing points of view, and makes some use of the rhetorical strategies discussed in class. | Claim statement is unclear or simple &amp;/ more quotations are needed. Understanding of issue is shallow or not clearly demonstrated. Implicit or missing acknowledgment of opposing points of view Makes very little use of rhetorical strategies discussed in class. | The essay needs a claim statement and details. Understanding of the issue/articles is extremely limited or nonexistent. No use of rhetorical strategies discusses in class. | . Organization | Response is coherent, well focused and logical. The response contains logical structure that guides the reader and a conclusion which insightfully summarizes argument presented. Includes distinct and plausible recommendations for action and change. Order of information presented is compelling to read. . | Response is focused and logical. The response contains topic sentences which guide the reader and a conclusion which summarizes the argument presented. Includes plausible recommendations for action and change. The order in which the information is presented is successful.. | Response is focused on argument. The response contains topic sentences that guide the reader and a conclusion which loosely summarizes the argument. Includes recommendations for action and change but may not be as specific or plausible. The order in which the information is presented is appropriate | Response is somewhat focused on the argument. The response contains topic sentences and a short or inadequate conclusion. Missing or underdeveloped recommendations for action and change. The order in which the information is presented may confuse the reader. | Response is poorly focused on the argument, if at all. Topic sentences that are present are poorly written and if conclusion is present it is weak. Missing or underdeveloped recommendations for action and change The order in which the information is presented is confusing. | Response lacks logical organization. Topic sentences are nonexistent/ a conclusion may be missing. Missing recommendations for action and change. | . Voice | Voice expresses interest &amp; complete understanding of topic. Engages reader with a reason to care through unique personal perspective evident through use of compelling ideas, engaging language, and relevant details. Appropriate for purpose &amp; audience. . | The voice expresses interest in and understanding of the topic. Shows personal connection to topic and audience. Uses some compelling engaging language to meet the purpose of the assignment. | The voice expresses interest but needs to show more understanding. While the voice does engage the reader, it lacks a consistent personal connection. Has some engaging language but could use more | The voice needs to be more interesting and express more understanding. Reader questions the personal connection of the author. Language is not vivid or engaging | The voice does not show and interest in or understanding of the topic. There is little, to no, personal connection to the author in the voice or writing. | The writer needs to understand how to create a voice. | . Word Choice | Reflects careful thinking about subject. Words are rich, colorful, &amp; precise. Uses specific details to show ideas instead of tell. Words energize writing. Language moves &amp; enlightens the reader. Vocabulary striking, varied. Strong active verbs dominate. Verb tense shifts are correct. | The word choice creates a clear message. Broad range of words that are carefully chosen. Word choices energize writing. Vocabulary varied. Active verbs throughout the essay. Verb tense shifts are correct. | The word choice is appropriate and functional. The words work but might not energize the writing. Attempts at colorful language may be overdone. May include some passive verbs. Verb tense mostly correct. | The word choice is too general and uses many familiar words and phrases. Expression is mundane. Words work but do not capture interest. Passive verbs and linking verbs may dominate. May include many verb tense errors. | Words are colorless, flat, imprecise. . Monotonous repetition. Images are fuzzy or absent. Many passive verbs and linking verbs. Many verb tense errors. . | Limited vocabulary. Words that do not fit text. Words imprecise, wrong. Vague language hides . meaning of message . | . Sentence Fluency | Sentences are skillfully written. Writer consistently uses a variety of sentences. The writing is natural and flows smoothly. Sentences begin with a variety of words. Relatable, accessible language. | The sentences are skillfully written. Writer consistently uses a variety of sentences, fewer than a 6. The writing is natural and flows smoothly. Sentences begin with a variety of words. | The writer uses some variety in sentences. Paper has some rough spots. Not all sentences begin the same. No sentence problems exist. More sentence variety needed. | Writer uses simple sentences. Some sentences are choppy or awkward, but most are smooth and clear. Sentences tend to begin the same. A few sentence problems need to be corrected. | Writer doesn&#39;t use much variety in sentences. Little to no use of linking words to connect sentences. Uses short, repetitive sentence patterns. Has many sentence problems. | The writer needs to learn how to construct sentences. | . Conventions | Grammar &amp; punctuation correct, &amp; copy is free of all errors. Writing is complex enough to show skill in using a wide-range of conventions. All citation are correct and present. Meets word count of 400-800 words. | The essay has one or two errors that do not interfere with the reader’s understanding. . All citation are correct and present. Meets word count of 400-800 words. | The essay has a few careless errors in punctuation and grammar. Most citations are correct and present. May not meet word count of 400-800 words. | The errors in the essay confuse the reader. Most citations are correct and present. May not meet word count of 400-800 words. | The number of errors makes the essay hard to read. Many errors with citations. May not meet word count of 400-800 words. | Help is needed to make corrections. Little to no citations present. May not meet word count of 400-800 words. | .",
            "url": "https://leonard514.github.io/FastPage/word/2022/08/25/Op-Ed-Rubric.html",
            "relUrl": "/word/2022/08/25/Op-Ed-Rubric.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Python Quiz Script!",
            "content": "Hi! I&#39;m here to show you my Python script. But first for the hacks... I got an image and a link. The link is for my vocab table, and the image is below. . . Ok, enough of that. I&#39;ll show you the code in its full beauty first, and if you need help understanding how any part of it works, I&#39;ll explain as thoroughly as I can. . import getpass, sys #defines question and answer: a prompt variable goes in the parenthesis. It essentially spits out user input. def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) #defines question_with_response: collects the questions from a list with prompt, prints it, collects input, and stores it. def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg #variables for number of questions and number of correct answers questions = 10 correct = 0 #initial prompt print(&#39;Hi &#39; + getpass.getuser()) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) #list of questions and answers. Also converts answer list into iteration so next command works. Question_list = [&quot;Is your answer input or output?&quot;, &quot;What command is used to include other functions that are developed?&quot;, &quot;What is the collection of these functions called?&quot;, &quot;What command was used to make the function that gave you this question?&quot;, &quot;what is Answer_list in iter(Answer_list)?&quot;, &quot;What command in this example is used to evaluate a response?&quot;,&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;, &quot;What type of text is the variable called &#39;correct&#39; in this script?&quot;, &quot;What is it called to print a string (as output) to terminal?&quot;, &quot;What is a group of commands defined under a name?&quot;] Answer_list = [&quot;input&quot;, &quot;import&quot;, &quot;library&quot;, &quot;def&quot;, &quot;parameter&quot;, &quot;if&quot;, &quot;expression&quot;, &quot;dynamic text&quot;, &quot;string concatenation&quot;, &quot;function&quot;] Answer_iter = iter(Answer_list) #cycles through this set of command for each set of question and answer. Also accepts correct answers and rejects bad answers. for i in Question_list: rsp = question_with_response(str(i)) if rsp == str(next(Answer_iter)): print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) #Calculates percent correct answers. percent = (correct/questions) * 100 #Prints accuracy of answers to terminal print(&quot;You scored &quot; + str(percent) + &#39;%!&#39;) . Hi leonardw48247 You will be asked 10 questions. Question: Are you ready to take a test? Answer: Question: Is your answer input or output? input is correct! Question: What command is used to include other functions that are developed? import is correct! Question: What is the collection of these functions called? library is correct! Question: What command was used to make the function that gave you this question? def is correct! Question: what is Answer_list in iter(Answer_list)? parameter is correct! Question: What command in this example is used to evaluate a response? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! Question: What type of text is the variable called &#39;correct&#39; in this script? expression is incorrect! Question: What is it called to print a string (as output) to terminal? string concatenation is correct! Question: What is a group of commands defined under a name? function is correct! You scored 90.0%! . Explanation Portion . Alright... where to start... oh, the import commands would be a good start! . import getpass, sys . This imports the functions getpass and sys into the script, making them executable. Where did those functions come from? They came from the libraries, which is essentially a collection of functions that comes with your python installation. Pretty neat!. Next, we got our own function. . def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) . On the first line, we got the def command, which defines our function. The function&#39;s name is question_and_answer (fairly intuitive since it asks you a question and requests for an answer), and there is a prompt in the parenthesis. This prompt is a variable, and whenever this function is called (this should look like question_and_answer(&quot;insert text here&quot;)), the variable prompt is set to whatever is within the parenthesis. The colon is there for syntax purposes and should be kept. | On the second line, the print() command is used. Within the parenthesis is &quot;Question: &quot; to ensure that a question prompt is printed when the file is executed, along with + prompt. The + concatenates/prints whatever text/string is stored in the prompt variable. The output to the terminal is Question: (prompt text here) | On the third line, a variable named msg is set equal to the result of the command input(). As the name implies, the function will collect user input and set it equal to a variable. This also means the script will pause when user input is being collected. | On the fourth line, the print() command is used again, this time with the string Answer: to proceed the text of the variable msg, which was set equal to the input on the third line. | . So to sum it up, this function collects an input string from a user and re-prints it to the terminal. Let&#39;s move on to the other function. . def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg . If you paid attention, the first three lines of this function question_with_response were very similar to the first three lines of the question_with_answer function. The last line is what we want to look at. The return command ends the execution of the function and sends the contents of msg to the main script in execution. The contents of msg can therefore be used outside the function. . questions = 10 correct = 0 . These are more variables. The variable questions lets Python know how many questions there are, because knowledge of how many questions there are is necessary for score calculation. correct, the number of correct answers, is 0 since no questions have been answered yet. . print(&#39;Hi &#39; + getpass.getuser()) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) . The first line prints to the prompt, and this is the first line of code executed. getpass.getuser() is linked to that function we imported at the beginning, and it essentially is a placeholder for the username of the person running the script. Might as well say hi and call the test-taker by his/her name! | The second line prints about being asked questions. str(questions) must be used to print the number of questions since questions is set equal to a number (it must be set equal to a string to print, and the str() command converts it into such). | The third line is our question_and_answer function from before! If you remember what it does, it prints out the prompt in the parenthesis, collects a user input, and prints that input into the prompt. | . Now for the next bit of code! . Question_list = [&quot;Is your answer input or output?&quot;, &quot;What command is used to include other functions that are developed?&quot;, &quot;What is the collection of these functions called?&quot;, &quot;What command was used to make the function that gave you this question?&quot;, &quot;what is Answer_list in iter(Answer_list)?&quot;, &quot;What command in this example is used to evaluate a response?&quot;,&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;, &quot;What type of text is the variable called &#39;correct&#39; in this script?&quot;, &quot;What is it called to print a string (as output) to terminal?&quot;, &quot;What is a group of commands defined under a name?&quot;] Answer_list = [&quot;input&quot;, &quot;import&quot;, &quot;library&quot;, &quot;def&quot;, &quot;parameter&quot;, &quot;if&quot;, &quot;expression&quot;, &quot;dynamic text&quot;, &quot;string concatenation&quot;, &quot;function&quot;] Answer_iter = iter(Answer_list) . The first two lines are relatively self-explanatory (though lengthy). I made a list called Question_list that has a list of all the questions of the quiz, and Answer_list has all the answers. The first items on the lists will be the ones to appear on the quiz first, but more on that later. The third line is less self-explanatory. I essentially converted my answer list into an iteration. Why would I do that? Well really it&#39;s because there&#39;s a command in the next bit of code that doesn&#39;t work if I don&#39;t convert the list into an iteration. That&#39;s just the way it is. Now it&#39;s time for the exciting part. . for i in Question_list: rsp = question_with_response(str(i)) if rsp == str(next(Answer_iter)): print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) . I know this is a lot to take in. Bear with me for a little while. . The first line is a for loop. The i is a variable used to count how many items are in the related list, Question_list, and how many times the commands within the for loop are executed. You could use any variable, though i is the most common (probably since the word &quot;iteration&quot; starts with an i, though I could be wrong). All commands connected to the for loop (which is this entire chunk of code) is executed once for every question in Question_List. Why would I want to do that? Let&#39;s move to Line 2. | In the second line, we set a rsp variable. We call the question_with_response function, which if you remember prints a question prompt and collects input, sending it to the main script. This input will be set equal to the rsp variable. Notice what is inside the function&#39;s parenthesis: str(i). Remember i is the variable from the for loop which is going over each question in Question_list. So every time this is executed, the prompt will be the next question in the list. | In the third line, there is an if statement. If the condition of the if statement is satisfied, any connected code is executed. In this case, the condition is that the input variable rsp is equal to... let&#39;s deconstruct that code. str(), as mentioned before, turns a number/value into a string. In my tests, the printing of the answer was being picky, so I used this command even though there&#39;s no numbers involved. | next(Answer_iter) is the way that the next answer on the list will be used every time the command is executed. next() moves on to the next item in the iteration whenever executed. For some reason, next() doesn&#39;t accept lists, which is why we made Answer_iter. | . | So back to what I was saying... the condition is that the input variable rsp be equivalent to the correct answer of the question in the prompt. If this condition is satisfied, appropriate code is executed for a correct answer: | In line 4, we print their input (still stored in rsp) and also that it&#39;s correct. | In line 5, we increase the correct variable by one since a correct answer was given. | Line 6 is else. If the condition of the if statement is not fulfilled, any code connected to the else statement is executed instead. That would mean getting a question wrong. | So line 7 prints that the input was incorrect. | . These 7 lines execute 10 times for the 10 questions. Doing this makes the code more concise than typing out the same commands 10 times in a script. Now, the rest of the script should be a breeze. . percent = (correct/questions) * 100 . This line, as implies, calculates the percentage of questions correctly answered. It takes the number of questions correctly answered and divides by total number of questions (these are all variables by the way, which are set equal to values/numbers), then multiplies by 100. This number is set equal to the percent variable. . print(&quot;You scored &quot; + str(percent) + &#39;%!&#39;) . This line prints the percent score. Keep in mind that since the variable percent has a numeric value that the str() command must be used to convert it to a string. . That&#39;s the end of the script! I hope you had a good time learning about how this works, and I hope you will use some of these techniques in your future work. .",
            "url": "https://leonard514.github.io/FastPage/scripts/python_quiz",
            "relUrl": "/scripts/python_quiz",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Week 0 Review Ticket",
            "content": "Hi! . This is a submission for the Tools/Equipment hack. If you want to see index.html, you might as well check out home. . Anyways, better start showing you my stuff. My main github is here. You were probably interested in seeing the insights page as well, so I’ll stick it in here. . Oh yeah, you also wanted to see me using VSCode, which is how I’m writing this page. . VSCODE . . Notebook . And then there’s my Jupyter notebook, which is found at this link. Yeah, I know it has the default title. Going to have to ask around to figure out how that stuff works. . Anyways that’s all the submission-related stuff, but I think it’s also a good idea to keep a journal… of what I’ve done, and what I have left to do. . Here is a table of my progress. . Date Activities completed . August 17 | Class started. Installed VSCode and the windows version of a bunch of programs (oops) | . August 18 | Installed Windows Subsystem Linux. Installed python, jupyter, anaconda, and a lot of other software the way I was supposed to do it. | . August 19 | Fastpages development begins. Created the repository and did basic edits | . August 21 (night) | Fastpages development continues with this post, index.html, and about me. Make the Jupyter notebook. Used VSCode with my fastpages development (including this page) | . Remaining tasks: . Refine the Jupyter Notebook (having a title, markdown integration) | Image integration working fine, although I need a way to control resolution (since some images are massive) | .",
            "url": "https://leonard514.github.io/FastPage/submissions/Week_0_Submission",
            "relUrl": "/submissions/Week_0_Submission",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "A Print Test Script!",
            "content": "print(&quot;Hello World!&quot;) print(&quot;But that&#39;s boring. Let&#39;s try something different&quot;) print(&quot;Supercalifragilisticexpialidocious!!!&quot;) print(&quot;Pneumonoultramicroscopicsilicovolcanoconiosis!!!&quot;) print(&quot;Now that&#39;s better.&quot;) . Hello World! But that&#39;s boring. Let&#39;s try something different Supercalifragilisticexpialidocious!!! Pneumonoultramicroscopicsilicovolcanoconiosis!!! Now that&#39;s better. .",
            "url": "https://leonard514.github.io/FastPage/scripts/print_test",
            "relUrl": "/scripts/print_test",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://leonard514.github.io/FastPage/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://leonard514.github.io/FastPage/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Notes",
          "content": "Week 1 Focus and Habits Hack . Video Notes (includes 10 insights) . Origins . She sent a survey about what students thought about Yale culture; students are stressed about being in Yale and can’t enjoy pleasures or take advantage of opportunities | 40% of college students have greater than average stress, a third have severe depression, more than 40% have lack of hope, etc. | Santos therefore wanted to help using her knowledge in psychology (including positive psychology, where happy people are studied, and behavior change, to figure out how to change habits)… and made a course about it (Psychology and the good life) | 2 parts: positive psychology and the practice of the good life. To build this practice, rewiring habits became part of the syllabus (including gratitude, social connection, sleep, etc.) | No changes to syllabus upon submission, became popular | . Class Content: 10 insights . Happiness is controllable and can be improved (some is controlled by heritability, but not all) | Location of residence, salary, and other life circumstances matter less than we think (positive and negative events have a temporary impact on happiness). Therefore, removing the “bad stuff” isn’t the way to maximize happiness. | It is challenging (but possible) to become happier. This requires building daily habits that happy people have. The agile methodology, like the “Good Life” course, requires that habits be built. These habits will include having a daily standup meeting for planning and task delegation, maintaining issues for short-term tasks and the scrum board for organizing those tasks. This ensures that tasks are completed at a consistent pace in accordance with the agile methodology (Principle 8). GI Joe Fallacy: A cartoon claimed knowing a concept/skill is half the work, and that is false. The skill must also be put into practice, and that’s the majority of the work. | . | Intuitions about happiness can be inaccurate. The mind forecasts about what makes us happy (ex: salary, possessions), but increases in these things do not correlate with significant increases in happiness. | Happy people make time for social connections (spend more time with others). The agile framework would require working and with other people on computer projects. Communication in the agile framework requires in-person, face-to-face conversation (principle 6). This teamwork makes potential for social connections between effective group members, and this in turn may enhance happiness. | Helping others helps us (more than we expect) by making us happy. Helping others is integrated into the agile framework as when a student is having trouble with code, other group members can work with that student and teach how to fix the issue (this is also part of leadership skills) to help the group move along (Principle 4). This willingness to share help will ultimately lead to a better project and help with learning programming… along with the happiness along the way that comes with being helpful. | Make time for gratitude… daily. Happy people think/talk about the better people (rather than the annoying people). Writing down a list of good events daily increases happiness. It is also good to write a letter of gratitude and read it in-person to the person you are thanking. This reading of the letter connects the most with Agile Principle 6 (face-to-face conversation is the most effective mode of communication) | Healthy practice matter more than we think (exercise, sleep, etc.) Workouts has been shown to boost happiness for the day, while sleep deprivation significantly decreased happiness, some to depression levels. | Mindfulness (be in the present). Mindfulness is being aware of present sensory input (ex: how your feet feel when you stand, the room temperature, any sounds perceived, the color of your dish, etc.). More time spend in mindfulness is correlated with greater happiness, even compared to thinking about pleasant but non-present things. | Become wealthy… in terms of time. Time famine is being too busy… and time affluence is the opposite. People maximizing time affluence are happier. | Gratitude Note Experience . Letter to someone on campus . I wrote my letter to my teacher, Mr. Yeung. I was having a problem working with a group member, as I was helping him along every step of the way through setup. This left me with no time to do my own work in class. So I emailed him about the issue, and he told me to tell my partner three things: . Consult the blog/guide and read through the steps | If confused, ask me for help. Ask after 5 minutes of attempts to resolve the issue. | If I was too busy or didn’t know how to help, ask Mr. Yeung for help. | This allowed me to spend time during class working on my computer projects, and it also helped my partner gain some degree of independence during the learning process. I especially saw value in having group members consult a guide. This was very reassuring for me, especially since I tend to have anxiety during the early parts of a class (due to familiarization with class format and the like). So to thank him, I wrote him my letter. I already gave the letter to him at the time of writing, so I can’t copy the contents… but I can paraphrase from memory . In the letter, I thanked him for replying to the email, and told him all the good things that stemmed from this reply: having more time to work on the project, my partner being able to learn with a degree of independence (that is, not fully relying on my help), an understanding that I can refer confused group members to guides so I can continue to help in other ways, and a boost in my collaboration skills which will be important for college and the workforce. I also admitted that working in groups has been a challenge for me, and afterwards thanked him for helping me address it. . When I finished reading the letter to him, he told me he was glad to help with my issue. As far as I remember, the happiness I experienced was not a rush… but more deep inside, like a calm. This could have been my anxiety/stress dissipating. . During the next class, I thought of an application of his advice in a context outside of school. I know that the practice in groups I will get in this class will be invaluable in the future. . Letter to someone at home . I wrote my letter to my mother. I thanked her for helping me with an extracurricular activity last week, and I thanked her for helping me write an email about a concern with work in this class. She proceeded to give me all the credit for writing the email. I also thanked her for giving me good food and transporting me to school and other activities so that I can work with a clear mind, work in groups, and ask students and teachers for help with my work. I also thanked her for lending me her phone to ask my sister for help in AP Calculus BC, a tough course. I finally thanked her for her support in my efforts, especially any support that I haven’t given enough attention to. . My mother smiled and hugged me, and she asked why I was thanking her. When she asked if it was due to her help with improving my anxiety about this class (and other things), I nodded. . I felt it was nice that I made her happy by giving attention to everything she does to support me. Perhaps I can do this with other people as well. . Week 1 Python Vocab . Term Definition . Variable | An abstraction in a program that can hold one value/string at a time | . Command | A procedure executed by a computer/program | . Static text | Text within a program which does not change | . Dynamic text | Text within a program that does change, often due to inputs/outputs of various commands. Can be different depending on how a program is executed | . Output | The resulting text/values after a command is executed. This can be printed to a terminal using the print() command | . Input | A user answers a prompt with a string or other value. This is then often stored in a variable to be re-used later. | . Sequence of Code | Any code in which two or more lines are involved (ie, any code more complex than a single command) | . String | A sequence of characters/words, often enclosed in quotation marks | . Parameter | A variable which serves as input for a command/program | . function | Similar to a variable, but for commands. A function is defined with the def command (or other defining command), and afterwards the name of the function. The commands after the function name are then associated with the function throughout the entire script | . Procedural abstraction | Grouping a series of repeatedly-used commands | . library | a collection of code/functions that a program uses to optimize code execution. The program can refer to many parts of the library using importation commands to call certain functions/commands. | . String concatenation | When a string is printed to the terminal | . Python commands . Command Result . print(TEXT) | prints TEXT to the terminal | . def definition_name(commands here) | defines a function, which is a group of commands defined under a name | . definition_name(commands here) | execution of the function | . var_name = (input) | defines a variable based on input or as a predetermined value/string | . import | imports functions from a running environment | . if | if a specified condition is satisfied, the associated command(s) are run | . else | if the if condition is not satisfied, the command(s) associated with this are run instead | . list_name = [item1, item2, item3…] | Makes a list. Very useful if you are executing the same commands over and over and just want to modify an input. | . for | Does two things: cycles through a list, and executes a set of commands once for every item in that list. Each item in the list will be set equal to a variable (most commonly i) for input. | . iteration_name = iter(list_name) | Takes a list and turns it into an iteration (defining it as a variable). Required to run next. | . next(iteration) | Cycles to the next item in an iteration when executed… without re-executing any commands. | .",
          "url": "https://leonard514.github.io/FastPage/_pages/02_notes.html",
          "relUrl": "/_pages/02_notes.html",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "About Me",
          "content": "Hi! I’m Leonard Wright, and I am a student at Del Norte High School. This website is currently being maintained for AP Computer Science Principles. I do have some experience securing computers, and I guess this class will be more about learning to code code code!!! I hear we’ll be working in groups a lot in this class. I hope I can also learn about working with others in this class (I had a hard time with this in 11th grade, though recently I’ve learned a few things so hopefully things get better). I’ll need collaboration skills in college and the workforce anyways, so best to start practicing now. . Anyways other than that I guess I can mention I’m in Ms. Lanzi’s BC class (wish me luck). She does a good job with integrating group work into the course structure. That’s a plus since I could learn collaboration skills in that class as well as here. . I don’t know what else to say, I guess I’ll add more stuff here later .",
          "url": "https://leonard514.github.io/FastPage/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://leonard514.github.io/FastPage/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}