{
  
    
        "post0": {
            "title": "BC Gotta Knows!",
            "content": "Special Trig Limits + Squeeze Theorem . . Continuity Definition . . Continuity Properties + Composite Continuity . .",
            "url": "https://leonard514.github.io/FastPage/classes/BC/gotta_know",
            "relUrl": "/classes/BC/gotta_know",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Writing An Op Ed Piece",
            "content": "Writing an Op-Ed Piece . Requirements: . - 400-800 words, typed, (Copy submitted to teacher must be double-spaced, MLA format) . - Due Tuesday 9/6 at midnight . - You must choose an actual newspaper/journal to submit your piece to. See theopedproject.org for a list of possibilities. Identify the specific publication that you are submitting to on your piece. . - Clearly defined subject matter that engages reader with opening . - Distinct and plausible recommendations for action and change (failure to do this will result in a full grade level dock) . - Acknowledgment of opposing point of view . - Vibrant word choice reflective of personal voice and writer’s ethos. . According to The Wall Street Journal: Your article should be a strong argument about an issue in the news. It should not be a response to a Journal article; that is a letter to the editor. So this means that you should choose something about which you are passionate. . Please visit http://www.theopedproject.org/ for further resources . According to Duke University: . - Track the news and jump at opportunities. . - Make a single point — well. . - Put your main point on top. . - Tell readers why they should care. . - Offer specific recommendations. . - Showing is better than discussing. . - Embrace your personal voice. . - Play up your personal connection to the readers. . - Use short sentences and paragraphs. . - Avoid jargon. . - Use the active voice. . - Avoid tedious rebuttals. . - Acknowledge the other side. . - Make your ending a winner. . - Relax and have fun. . - Don’t worry about the headline. . - Offer graphics. .",
            "url": "https://leonard514.github.io/FastPage/word/",
            "relUrl": "/word/",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Op Ed Rubric",
            "content": "Traits 6 . (A+) . 5 . (A-/B+) . 4 . (B) . 3 . (C) . 2 . (D) . 1 . (F) . . Ideas | Clearly stated insightful claim outlining argument with well chosen quotes from reputable sources. . Demonstrates a thorough critical understanding of the issue. Explores the topic thoughtfully, acknowledges opposing points of view, and makes excellent use of the rhetorical strategies discussed in class. . | Clear argument statement and necessary supporting quotations that are cited correctly. . Demonstrates critical understanding of the issue. Explores issues well, acknowledges opposing points of view and makes strong use of rhetorical strategies discussed in class. . | Clear claim statement but it may lack depth. May not always include best quotations or may use obvious quotations. Demonstrates clear understanding of the issue. Explores the issues of this topic, may have implicit acknowledgment of opposing points of view, and successfully uses rhetorical strategies discussed in class. | Claim statement is too broad. Quotations are minimal or poorly chosen. Demonstrates some understanding of the issue. Explores some issues, implicit or missing acknowledgment of opposing points of view, and makes some use of the rhetorical strategies discussed in class. | Claim statement is unclear or simple &amp;/ more quotations are needed. Understanding of issue is shallow or not clearly demonstrated. Implicit or missing acknowledgment of opposing points of view Makes very little use of rhetorical strategies discussed in class. | The essay needs a claim statement and details. Understanding of the issue/articles is extremely limited or nonexistent. No use of rhetorical strategies discusses in class. | . Organization | Response is coherent, well focused and logical. The response contains logical structure that guides the reader and a conclusion which insightfully summarizes argument presented. Includes distinct and plausible recommendations for action and change. Order of information presented is compelling to read. . | Response is focused and logical. The response contains topic sentences which guide the reader and a conclusion which summarizes the argument presented. Includes plausible recommendations for action and change. The order in which the information is presented is successful.. | Response is focused on argument. The response contains topic sentences that guide the reader and a conclusion which loosely summarizes the argument. Includes recommendations for action and change but may not be as specific or plausible. The order in which the information is presented is appropriate | Response is somewhat focused on the argument. The response contains topic sentences and a short or inadequate conclusion. Missing or underdeveloped recommendations for action and change. The order in which the information is presented may confuse the reader. | Response is poorly focused on the argument, if at all. Topic sentences that are present are poorly written and if conclusion is present it is weak. Missing or underdeveloped recommendations for action and change The order in which the information is presented is confusing. | Response lacks logical organization. Topic sentences are nonexistent/ a conclusion may be missing. Missing recommendations for action and change. | . Voice | Voice expresses interest &amp; complete understanding of topic. Engages reader with a reason to care through unique personal perspective evident through use of compelling ideas, engaging language, and relevant details. Appropriate for purpose &amp; audience. . | The voice expresses interest in and understanding of the topic. Shows personal connection to topic and audience. Uses some compelling engaging language to meet the purpose of the assignment. | The voice expresses interest but needs to show more understanding. While the voice does engage the reader, it lacks a consistent personal connection. Has some engaging language but could use more | The voice needs to be more interesting and express more understanding. Reader questions the personal connection of the author. Language is not vivid or engaging | The voice does not show and interest in or understanding of the topic. There is little, to no, personal connection to the author in the voice or writing. | The writer needs to understand how to create a voice. | . Word Choice | Reflects careful thinking about subject. Words are rich, colorful, &amp; precise. Uses specific details to show ideas instead of tell. Words energize writing. Language moves &amp; enlightens the reader. Vocabulary striking, varied. Strong active verbs dominate. Verb tense shifts are correct. | The word choice creates a clear message. Broad range of words that are carefully chosen. Word choices energize writing. Vocabulary varied. Active verbs throughout the essay. Verb tense shifts are correct. | The word choice is appropriate and functional. The words work but might not energize the writing. Attempts at colorful language may be overdone. May include some passive verbs. Verb tense mostly correct. | The word choice is too general and uses many familiar words and phrases. Expression is mundane. Words work but do not capture interest. Passive verbs and linking verbs may dominate. May include many verb tense errors. | Words are colorless, flat, imprecise. . Monotonous repetition. Images are fuzzy or absent. Many passive verbs and linking verbs. Many verb tense errors. . | Limited vocabulary. Words that do not fit text. Words imprecise, wrong. Vague language hides . meaning of message . | . Sentence Fluency | Sentences are skillfully written. Writer consistently uses a variety of sentences. The writing is natural and flows smoothly. Sentences begin with a variety of words. Relatable, accessible language. | The sentences are skillfully written. Writer consistently uses a variety of sentences, fewer than a 6. The writing is natural and flows smoothly. Sentences begin with a variety of words. | The writer uses some variety in sentences. Paper has some rough spots. Not all sentences begin the same. No sentence problems exist. More sentence variety needed. | Writer uses simple sentences. Some sentences are choppy or awkward, but most are smooth and clear. Sentences tend to begin the same. A few sentence problems need to be corrected. | Writer doesn&#39;t use much variety in sentences. Little to no use of linking words to connect sentences. Uses short, repetitive sentence patterns. Has many sentence problems. | The writer needs to learn how to construct sentences. | . Conventions | Grammar &amp; punctuation correct, &amp; copy is free of all errors. Writing is complex enough to show skill in using a wide-range of conventions. All citation are correct and present. Meets word count of 400-800 words. | The essay has one or two errors that do not interfere with the reader’s understanding. . All citation are correct and present. Meets word count of 400-800 words. | The essay has a few careless errors in punctuation and grammar. Most citations are correct and present. May not meet word count of 400-800 words. | The errors in the essay confuse the reader. Most citations are correct and present. May not meet word count of 400-800 words. | The number of errors makes the essay hard to read. Many errors with citations. May not meet word count of 400-800 words. | Help is needed to make corrections. Little to no citations present. May not meet word count of 400-800 words. | .",
            "url": "https://leonard514.github.io/FastPage/word/",
            "relUrl": "/word/",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Tools/Equipment Submission",
            "content": "Hi! . This is a submission for the Tools/Equipment hack. If you want to see index.html, you might as well check out home. . Anyways, better start showing you my stuff. My main github is here. You were probably interested in seeing the insights page as well, so I’ll stick it in here. . Oh yeah, you also wanted to see me using VSCode, which is how I’m writing this page. . VSCODE . . Notebook . And then there’s my Jupyter notebook, which is found at this link. Yeah, I know it has the default title. Going to have to ask around to figure out how that stuff works. . Anyways that’s all the submission-related stuff, but I think it’s also a good idea to keep a journal… of what I’ve done, and what I have left to do. . Here is a table of my progress. . Date Activities completed . August 17 | Class started. Installed VSCode and the windows version of a bunch of programs (oops) | . August 18 | Installed Windows Subsystem Linux. Installed python, jupyter, anaconda, and a lot of other software the way I was supposed to do it. | . August 19 | Fastpages development begins. Created the repository and did basic edits | . August 21 (night) | Fastpages development continues with this post, index.html, and about me. Make the Jupyter notebook. Used VSCode with my fastpages development (including this page) | . Remaining tasks: . Refine the Jupyter Notebook (having a title, markdown integration) | Image integration working fine, although I need a way to control resolution (since some images are massive) | .",
            "url": "https://leonard514.github.io/FastPage/submissions/Week_0_Submission",
            "relUrl": "/submissions/Week_0_Submission",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "A Print Test Script",
            "content": "print(&quot;Hello World!&quot;) print(&quot;But that&#39;s boring. Let&#39;s try something different&quot;) print(&quot;Supercalifragilisticexpialidocious!!!&quot;) print(&quot;Pneumonoultramicroscopicsilicovolcanoconiosis!!!&quot;) print(&quot;Now that&#39;s better.&quot;) . Hello World! But that&#39;s boring. Let&#39;s try something different Supercalifragilisticexpialidocious!!! Pneumonoultramicroscopicsilicovolcanoconiosis!!! Now that&#39;s better. .",
            "url": "https://leonard514.github.io/FastPage/scripts/jupyter/comp%20sci/2022/08/22/print_test.html",
            "relUrl": "/scripts/jupyter/comp%20sci/2022/08/22/print_test.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Print_test",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# A Print Test Script! n”, “&gt;A basic script as a test… with some fun-sized words. n”, “ n”, “- title: A Print Test Script n”, “- toc: false n”, “- layout: post n”, “- description: Print test script! n”, “- categories: [scripts, jupyter, Comp Sci] n”, “- permalink: /scripts/first_jupyter_notebook n” ] }, { “cell_type”: “code”, “execution_count”: 4, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Hello World! n”, “But that’s boring. Let’s try something different n”, “Supercalifragilisticexpialidocious!!! n”, “Pneumonoultramicroscopicsilicovolcanoconiosis!!! n”, “Now that’s better. n” ] } ], “source”: [ “print(&quot;Hello World!&quot;) n”, “ n”, “print(&quot;But that’s boring. Let’s try something different&quot;) n”, “ n”, “print(&quot;Supercalifragilisticexpialidocious!!!&quot;) n”, “ n”, “print(&quot;Pneumonoultramicroscopicsilicovolcanoconiosis!!!&quot;) n”, “ n”, “print(&quot;Now that’s better.&quot;)” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3 (ipykernel)”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.9.12” }, “vscode”: { “interpreter”: { “hash”: “a6b2548ad65db808429227da51ec7f39b8650a8bf07402b465400f480f8a04a2” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://leonard514.github.io/FastPage/2022/08/22/print_test.ipynb",
            "relUrl": "/2022/08/22/print_test.ipynb",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://leonard514.github.io/FastPage/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://leonard514.github.io/FastPage/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Notes",
          "content": "Week 1 Focus and Habits Hack . Video Notes (includes 10 insights) . Origins . She sent a survey about what students thought about Yale culture; students are stressed about being in Yale and can’t enjoy pleasures or take advantage of opportunities | 40% of college students have greater than average stress, a third have severe depression, more than 40% have lack of hope, etc. | Santos therefore wanted to help using her knowledge in psychology (including positive psychology, where happy people are studied, and behavior change, to figure out how to change habits)… and made a course about it (Psychology and the good life) | 2 parts: positive psychology and the practice of the good life. To build this practice, rewiring habits became part of the syllabus (including gratitude, social connection, sleep, etc.) | No changes to syllabus upon submission, became popular | . Class Content: 10 insights . Happiness is controllable and can be improved (some is controlled by heritability, but not all) | Location of residence, salary, and other life circumstances matter less than we think (positive and negative events have a temporary impact on happiness). Therefore, removing the “bad stuff” isn’t the way to maximize happiness. | It is challenging (but possible) to become happier. This requires building daily habits that happy people have. The agile methodology, like the “Good Life” course, requires that habits be built. These habits will include having a daily standup meeting for planning and task delegation, maintaining issues for short-term tasks and the scrum board for organizing those tasks. This ensures that tasks are completed at a consistent pace in accordance with the agile methodology (Principle 8). GI Joe Fallacy: A cartoon claimed knowing a concept/skill is half the work, and that is false. The skill must also be put into practice, and that’s the majority of the work. | . | Intuitions about happiness can be inaccurate. The mind forecasts about what makes us happy (ex: salary, possessions), but increases in these things do not correlate with significant increases in happiness. | Happy people make time for social connections (spend more time with others). The agile framework would require working and with other people on computer projects. Communication in the agile framework requires in-person, face-to-face conversation (principle 6). This teamwork makes potential for social connections between effective group members, and this in turn may enhance happiness. | Helping others helps us (more than we expect) by making us happy. Helping others is integrated into the agile framework as when a student is having trouble with code, other group members can work with that student and teach how to fix the issue (this is also part of leadership skills) to help the group move along (Principle 4). This willingness to share help will ultimately lead to a better project and help with learning programming… along with the happiness along the way that comes with being helpful. | Make time for gratitude… daily. Happy people think/talk about the better people (rather than the annoying people). Writing down a list of good events daily increases happiness. It is also good to write a letter of gratitude and read it in-person to the person you are thanking. This reading of the letter connects the most with Agile Principle 6 (face-to-face conversation is the most effective mode of communication) | Healthy practice matter more than we think (exercise, sleep, etc.) Workouts has been shown to boost happiness for the day, while sleep deprivation significantly decreased happiness, some to depression levels. | Mindfulness (be in the present). Mindfulness is being aware of present sensory input (ex: how your feet feel when you stand, the room temperature, any sounds perceived, the color of your dish, etc.). More time spend in mindfulness is correlated with greater happiness, even compared to thinking about pleasant but non-present things. | Become wealthy… in terms of time. Time famine is being too busy… and time affluence is the opposite. People maximizing time affluence are happier. | Gratitude Note Experience . Letter to someone on campus . I wrote my letter to my teacher, Mr. Yeung. I was having a problem working with a group member, as I was helping him along every step of the way through setup. This left me with no time to do my own work in class. So I emailed him about the issue, and he told me to tell my partner three things: . Consult the blog/guide and read through the steps | If confused, ask me for help. Ask after 5 minutes of attempts to resolve the issue. | If I was too busy or didn’t know how to help, ask Mr. Yeung for help. | This allowed me to spend time during class working on my computer projects, and it also helped my partner gain some degree of independence during the learning process. I especially saw value in having group members consult a guide. This was very reassuring for me, especially since I tend to have anxiety during the early parts of a class (due to familiarization with class format and the like). So to thank him, I wrote him my letter. I already gave the letter to him at the time of writing, so I can’t copy the contents… but I can paraphrase from memory . In the letter, I thanked him for replying to the email, and told him all the good things that stemmed from this reply: having more time to work on the project, my partner being able to learn with a degree of independence (that is, not fully relying on my help), an understanding that I can refer confused group members to guides so I can continue to help in other ways, and a boost in my collaboration skills which will be important for college and the workforce. I also admitted that working in groups has been a challenge for me, and afterwards thanked him for helping me address it. . When I finished reading the letter to him, he told me he was glad to help with my issue. As far as I remember, the happiness I experienced was not a rush… but more deep inside, like a calm. This could have been my anxiety/stress dissipating. . During the next class, I thought of an application of his advice in a context outside of school. I know that the practice in groups I will get in this class will be invaluable in the future. . Letter to someone at home . I wrote my letter to my mother. I thanked her for helping me with an extracurricular activity last week, and I thanked her for helping me write an email about a concern with work in this class. She proceeded to give me all the credit for writing the email. I also thanked her for giving me good food and transporting me to school and other activities so that I can work with a clear mind, work in groups, and ask students and teachers for help with my work. I also thanked her for lending me her phone to ask my sister for help in AP Calculus BC, a tough course. I finally thanked her for her support in my efforts, especially any support that I haven’t given enough attention to. . My mother smiled and hugged me, and she asked why I was thanking her. When she asked if it was due to her help with improving my anxiety about this class (and other things), I nodded. . I felt it was nice that I made her happy by giving attention to everything she does to support me. Perhaps I can do this with other people as well. . Week 1 Python Vocab . | Term | Definition | |-|-| | Variable | An abstraction in a program that can hold one value/string at a time | | Command | A procedure executed by a computer/program | | Static text | Text within a program which does not change | | Dynamic text | Text within a program that does change, often due to inputs/outputs of various commands. Can be different depending on how a program is executed | | Output | The resulting text/values after a command is executed. This can be printed to a terminal using the print() command | | Input | A user answers a prompt with a string or other value. This is then often stored in a variable to be re-used later. | | Sequence of Code | Any code in which two or more lines are involved (ie, any code more complex than a single command) | | String | A sequence of characters/words, often enclosed in quotation marks | | Parameter | A variable which serves as input for a command/program | | function | Similar to a variable, but for commands. A function is defined with the def command (or other defining command), and afterwards the name of the function. The commands after the function name are then associated with the function throughout the entire script | | Procedural abstraction | Grouping a series of repeatedly-used commands | | library | a collection of code/functions that a program uses to optimize code execution. The program can refer to many parts of the library using importation commands to call certain functions/commands. | | String concatenation | When a string is printed to the terminal | . Python commands . Command Result . print(TEXT) | prints TEXT to the terminal | . def definition_name(commands here) | defines a function, which is a group of commands defined under a name | . definition_name(commands here) | execution of the function | . var_name = (input) | defines a variable based on input or as a predetermined value/string | . import | imports functions from a running environment | . if | if a specified condition is satisfied, the associated command(s) are run | . else | if the if condition is not satisfied, the command(s) associated with this are run instead | . list_name = [item1, item2, item3…] | Makes a list. Very useful if you are executing the same commands over and over and just want to modify an input. | . for | Does two things: cycles through a list, and executes a set of commands once for every item in that list. Each item in the list will be set equal to a variable (most commonly i) for input. | . iteration_name = iter(list_name) | Takes a list and turns it into an iteration (defining it as a variable). Required to run next. | . next(iteration) | Cycles to the next item in an iteration when executed… without re-executing any commands. | .",
          "url": "https://leonard514.github.io/FastPage/_pages/02_notes.html",
          "relUrl": "/_pages/02_notes.html",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "About Me",
          "content": "Hi! I’m Leonard Wright, and I am a student at Del Norte High School. This website is currently being maintained for AP Computer Science Principles. I do have some experience securing computers, and I guess this class will be more about learning to code code code!!! I hear we’ll be working in groups a lot in this class. I hope I can also learn about working with others in this class (I had a hard time with this in 11th grade, though recently I’ve learned a few things so hopefully things get better). I’ll need collaboration skills in college and the workforce anyways, so best to start practicing now. . Anyways other than that I guess I can mention I’m in Ms. Lanzi’s BC class (wish me luck). She does a good job with integrating group work into the course structure. That’s a plus since I could learn collaboration skills in that class as well as here. . I don’t know what else to say, I guess I’ll add more stuff here later .",
          "url": "https://leonard514.github.io/FastPage/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://leonard514.github.io/FastPage/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}